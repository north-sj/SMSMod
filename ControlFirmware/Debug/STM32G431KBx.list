
STM32G431KBx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000800c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080081e4  080081e4  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008424  08008424  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08008424  08008424  00018424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800842c  0800842c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08008434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003500  2000002c  08008460  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000352c  08008460  0002352c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa8f  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003460  00000000  00000000  0003aaeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001780  00000000  00000000  0003df50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015e8  00000000  00000000  0003f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c7f  00000000  00000000  00040cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013a3a  00000000  00000000  00062937  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dce08  00000000  00000000  00076371  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000641c  00000000  00000000  001531f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080081cc 	.word	0x080081cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	080081cc 	.word	0x080081cc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <factory_reset_eeprom_regs>:
#include "stm32g4xx_hal.h"

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 800051c:	4b5f      	ldr	r3, [pc, #380]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800051e:	225c      	movs	r2, #92	; 0x5c
 8000520:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 8000522:	4b5e      	ldr	r3, [pc, #376]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000524:	2200      	movs	r2, #0
 8000526:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 8000528:	4b5c      	ldr	r3, [pc, #368]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800052a:	2200      	movs	r2, #0
 800052c:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 800052e:	4b5b      	ldr	r3, [pc, #364]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000530:	2201      	movs	r2, #1
 8000532:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 8000534:	4b59      	ldr	r3, [pc, #356]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000536:	2203      	movs	r2, #3
 8000538:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 800053a:	4b58      	ldr	r3, [pc, #352]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800053c:	2200      	movs	r2, #0
 800053e:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8000540:	4b56      	ldr	r3, [pc, #344]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000542:	221e      	movs	r2, #30
 8000544:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8000546:	4b55      	ldr	r3, [pc, #340]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000548:	2200      	movs	r2, #0
 800054a:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 800054c:	4b53      	ldr	r3, [pc, #332]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800054e:	2296      	movs	r2, #150	; 0x96
 8000550:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8000552:	4b52      	ldr	r3, [pc, #328]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000554:	2200      	movs	r2, #0
 8000556:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8000558:	4b50      	ldr	r3, [pc, #320]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800055a:	2220      	movs	r2, #32
 800055c:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 800055e:	4b4f      	ldr	r3, [pc, #316]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000560:	2203      	movs	r2, #3
 8000562:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8000564:	4b4d      	ldr	r3, [pc, #308]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000566:	2240      	movs	r2, #64	; 0x40
 8000568:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 800056a:	4b4c      	ldr	r3, [pc, #304]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800056c:	221f      	movs	r2, #31
 800056e:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8000570:	4b4a      	ldr	r3, [pc, #296]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000572:	22fa      	movs	r2, #250	; 0xfa
 8000574:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8000576:	4b49      	ldr	r3, [pc, #292]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000578:	2200      	movs	r2, #0
 800057a:	765a      	strb	r2, [r3, #25]
	regs[REG_MAX_PWM_100_L] = LOW_BYTE(REG_MAX_PWM_100_VALUE);
 800057c:	4b47      	ldr	r3, [pc, #284]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800057e:	2232      	movs	r2, #50	; 0x32
 8000580:	769a      	strb	r2, [r3, #26]
	regs[REG_MAX_PWM_100_H] = HIGH_BYTE(REG_MAX_PWM_100_VALUE);
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000584:	2200      	movs	r2, #0
 8000586:	76da      	strb	r2, [r3, #27]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 8000588:	4b44      	ldr	r3, [pc, #272]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800058a:	223c      	movs	r2, #60	; 0x3c
 800058c:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 800058e:	4b43      	ldr	r3, [pc, #268]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000590:	222d      	movs	r2, #45	; 0x2d
 8000592:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 8000594:	4b41      	ldr	r3, [pc, #260]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000596:	225f      	movs	r2, #95	; 0x5f
 8000598:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 800059a:	4b40      	ldr	r3, [pc, #256]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800059c:	2205      	movs	r2, #5
 800059e:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 80005a0:	4b3e      	ldr	r3, [pc, #248]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 80005a8:	4b3c      	ldr	r3, [pc, #240]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005aa:	2224      	movs	r2, #36	; 0x24
 80005ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 80005b0:	4b3a      	ldr	r3, [pc, #232]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005b2:	2224      	movs	r2, #36	; 0x24
 80005b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_MIN_POSITION_ADC_L] = LOW_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80005b8:	4b38      	ldr	r3, [pc, #224]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005ba:	2232      	movs	r2, #50	; 0x32
 80005bc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MIN_POSITION_ADC_H] = HIGH_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MAX_POSITION_ADC_L] = LOW_BYTE(REG_MAX_POSITION_ADC_VALUE);
 80005c8:	4b34      	ldr	r3, [pc, #208]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005ca:	226e      	movs	r2, #110	; 0x6e
 80005cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MAX_POSITION_ADC_H] = HIGH_BYTE(REG_MAX_POSITION_ADC_VALUE);
 80005d0:	4b32      	ldr	r3, [pc, #200]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005d2:	220f      	movs	r2, #15
 80005d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_MAX_ROTATION_DEG] = REG_MAX_ROTATION_DEG_VALUE;
 80005d8:	4b30      	ldr	r3, [pc, #192]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005da:	22b4      	movs	r2, #180	; 0xb4
 80005dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	regs[REG_INV_ROTATION_MOTOR] = REG_INV_ROTATION_MOTOR_VALUE;
 80005e0:	4b2e      	ldr	r3, [pc, #184]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	regs[REG_INV_ROTATION_SENSOR] = REG_INV_ROTATION_SENSOR_VALUE;
 80005e8:	4b2c      	ldr	r3, [pc, #176]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005f2:	22d0      	movs	r2, #208	; 0xd0
 80005f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <factory_reset_eeprom_regs+0x184>)
 80005fa:	2207      	movs	r2, #7
 80005fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000602:	2228      	movs	r2, #40	; 0x28
 8000604:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000612:	22d0      	movs	r2, #208	; 0xd0
 8000614:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800061a:	2207      	movs	r2, #7
 800061c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	regs[REG_PID_CURRENT_KP_L] = LOW_BYTE(REG_PID_CURRENT_KP_VALUE);
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000642:	22e8      	movs	r2, #232	; 0xe8
 8000644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_CURRENT_KP_H] = HIGH_BYTE(REG_PID_CURRENT_KP_VALUE);
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800064a:	2203      	movs	r2, #3
 800064c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_CURRENT_KI_L] = LOW_BYTE(REG_PID_CURRENT_KI_VALUE);
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000652:	2201      	movs	r2, #1
 8000654:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_CURRENT_KI_H] = HIGH_BYTE(REG_PID_CURRENT_KI_VALUE);
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_CURRENT_KFF_L] = LOW_BYTE(REG_PID_CURRENT_KFF_VALUE);
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000662:	220a      	movs	r2, #10
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_CURRENT_KFF_VALUE);
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_CAL_CURRENT_SENSE_A_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_CAL_CURRENT_SENSE_A_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800067a:	2207      	movs	r2, #7
 800067c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_CAL_CURRENT_SENSE_B_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000682:	22b5      	movs	r2, #181	; 0xb5
 8000684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_CAL_CURRENT_SENSE_B_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <factory_reset_eeprom_regs+0x184>)
 800068a:	2204      	movs	r2, #4
 800068c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <factory_reset_eeprom_regs+0x184>)
 8000694:	f000 f8d0 	bl	8000838 <eeprom_store>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000078 	.word	0x20000078

080006a0 <load_eeprom_regs>:


void load_eeprom_regs()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4802      	ldr	r0, [pc, #8]	; (80006b0 <load_eeprom_regs+0x10>)
 80006a8:	f000 f8b2 	bl	8000810 <eeprom_restore>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000078 	.word	0x20000078

080006b4 <store_eeprom_regs>:

void store_eeprom_regs()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4802      	ldr	r0, [pc, #8]	; (80006c4 <store_eeprom_regs+0x10>)
 80006bc:	f000 f8bc 	bl	8000838 <eeprom_store>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000078 	.word	0x20000078

080006c8 <reset_ram_regs>:

void reset_ram_regs()
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

	regs[REG_TORQUE_ENABLE] = 0; 	// OFF
 80006cc:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <reset_ram_regs+0x120>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_LED] = 0;				// OFF
 80006d4:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <reset_ram_regs+0x120>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_CONTROL_MODE] = 1;		// POSITION CONTROL
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <reset_ram_regs+0x120>)
 80006de:	2201      	movs	r2, #1
 80006e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	regs[REG_GOAL_POSITION_DEG_L] = 0;
 80006e4:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <reset_ram_regs+0x120>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = 0;
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <reset_ram_regs+0x120>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <reset_ram_regs+0x120>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <reset_ram_regs+0x120>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_GOAL_CURRENT_MA_L] = 0;
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <reset_ram_regs+0x120>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_GOAL_CURRENT_MA_H] = 0;
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <reset_ram_regs+0x120>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_GOAL_PWM_100_L] = 0;
 8000714:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <reset_ram_regs+0x120>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	regs[REG_GOAL_PWM_100_H] = 0;
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <reset_ram_regs+0x120>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	regs[REG_PRESENT_POSITION_DEG_L] = 0;
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <reset_ram_regs+0x120>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = 0;
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <reset_ram_regs+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_PRESENT_VELOCITY_DPS_L] = 0;
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <reset_ram_regs+0x120>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = 0;
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <reset_ram_regs+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_PRESENT_CURRENT_MA_L] = 0;
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <reset_ram_regs+0x120>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = 0;
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <reset_ram_regs+0x120>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_PRESENT_VOLTAGE] = 0;
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <reset_ram_regs+0x120>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <reset_ram_regs+0x120>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	regs[REG_MOVING] = 0;
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <reset_ram_regs+0x120>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = 0;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <reset_ram_regs+0x120>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = 0;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <reset_ram_regs+0x120>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	regs[REG_SETPOINT_VELOCITY_DPS_L] = 0;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <reset_ram_regs+0x120>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = 0;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <reset_ram_regs+0x120>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	regs[REG_SETPOINT_CURRENT_MA_L] = 0;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <reset_ram_regs+0x120>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = 0;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <reset_ram_regs+0x120>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	regs[REG_SETPOINT_PWM_100_L] = 0;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <reset_ram_regs+0x120>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = 0;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <reset_ram_regs+0x120>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	regs[POSITION_INPUT_ADC_L] = 0;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <reset_ram_regs+0x120>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[POSITION_INPUT_ADC_H] = 0;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <reset_ram_regs+0x120>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	regs[CURRENT_INPUT_ADC_L] = 0;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <reset_ram_regs+0x120>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[CURRENT_INPUT_ADC_H] = 0;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <reset_ram_regs+0x120>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	regs[REG_PROTOCOL_CRC_FAIL] = 0;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <reset_ram_regs+0x120>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	regs[REG_HARDWARE_ERROR_STATUS] = 0;
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <reset_ram_regs+0x120>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000078 	.word	0x20000078

080007ec <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <eeprom_empty+0x20>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	0801f800 	.word	0x0801f800

08000810 <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <eeprom_restore+0x20>)
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f007 fcbf 	bl	80081a4 <memcpy>
	return HAL_OK;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	0801f800 	.word	0x0801f800
 8000834:	00000000 	.word	0x00000000

08000838 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08d      	sub	sp, #52	; 0x34
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000842:	f003 fd73 	bl	800432c <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	233f      	movs	r3, #63	; 0x3f
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 800085a:	f107 0210 	add.w	r2, r7, #16
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fe55 	bl	8004514 <HAL_FLASHEx_Erase>
 800086a:	4603      	mov	r3, r0
 800086c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 8000870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000874:	2b00      	cmp	r3, #0
 8000876:	d004      	beq.n	8000882 <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 8000878:	f003 fd7a 	bl	8004370 <HAL_FLASH_Lock>
			return result;
 800087c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000880:	e03b      	b.n	80008fa <eeprom_store+0xc2>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8000882:	a422      	add	r4, pc, #136	; (adr r4, 800090c <eeprom_store+0xd4>)
 8000884:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000888:	e9c7 3402 	strd	r3, r4, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000890:	e02c      	b.n	80008ec <eeprom_store+0xb4>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000896:	18d1      	adds	r1, r2, r3
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	2208      	movs	r2, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f007 fc80 	bl	80081a4 <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 80008a4:	4a18      	ldr	r2, [pc, #96]	; (8000908 <eeprom_store+0xd0>)
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	18d1      	adds	r1, r2, r3
 80008aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4623      	mov	r3, r4
 80008b2:	2000      	movs	r0, #0
 80008b4:	f003 fce4 	bl	8004280 <HAL_FLASH_Program>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 80008be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d00f      	beq.n	80008e6 <eeprom_store+0xae>
			{
				uint32_t error = HAL_FLASH_GetError();
 80008c6:	f003 fd6d 	bl	80043a4 <HAL_FLASH_GetError>
 80008ca:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <eeprom_store+0xa4>
				{
					HAL_FLASH_Lock();
 80008d2:	f003 fd4d 	bl	8004370 <HAL_FLASH_Lock>
					return error;
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	e00e      	b.n	80008fa <eeprom_store+0xc2>
				}
				HAL_FLASH_Lock();
 80008dc:	f003 fd48 	bl	8004370 <HAL_FLASH_Lock>
				return result;
 80008e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80008e4:	e009      	b.n	80008fa <eeprom_store+0xc2>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 80008e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e8:	3308      	adds	r3, #8
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d3ce      	bcc.n	8000892 <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 80008f4:	f003 fd3c 	bl	8004370 <HAL_FLASH_Lock>
	return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3734      	adds	r7, #52	; 0x34
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	0801f800 	.word	0x0801f800
 800090c:	deadbeef 	.word	0xdeadbeef
 8000910:	00000000 	.word	0x00000000

08000914 <stop_blinking>:
static uint32_t last_state_change_time[LED_COUNT]; // ms

/* Private functions ---------------------------------------------------------*/

void stop_blinking(int id)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    blinkin_period[id]=0;
 800091c:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <stop_blinking+0x3c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2100      	movs	r1, #0
 8000922:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_counter[id]=0;
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <stop_blinking+0x40>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2100      	movs	r1, #0
 800092c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_infinite[id]=false;
 8000930:	4a09      	ldr	r2, [pc, #36]	; (8000958 <stop_blinking+0x44>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=0;
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <stop_blinking+0x48>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2100      	movs	r1, #0
 8000940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	20000048 	.word	0x20000048
 8000954:	2000004c 	.word	0x2000004c
 8000958:	20000050 	.word	0x20000050
 800095c:	20000054 	.word	0x20000054

08000960 <HAL_Led_Init>:

/* HAL functions ---------------------------------------------------------*/

void HAL_Led_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
    // Init private data & ALL OFF
    int id = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	e00d      	b.n	800098c <HAL_Led_Init+0x2c>
    {
        stop_blinking(id);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ffcf 	bl	8000914 <stop_blinking>
        HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8000976:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800097a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097e:	2201      	movs	r2, #1
 8000980:	4618      	mov	r0, r3
 8000982:	f004 f885 	bl	8004a90 <HAL_GPIO_WritePin>
    for(id=0;id<LED_COUNT;++id)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3301      	adds	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	ddee      	ble.n	8000970 <HAL_Led_Init+0x10>
    }
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_Led_Process>:

void HAL_Led_Process(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
    uint32_t const current_time = HAL_GetTick();
 80009a2:	f001 fd7d 	bl	80024a0 <HAL_GetTick>
 80009a6:	6038      	str	r0, [r7, #0]
    int id = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	e058      	b.n	8000a64 <HAL_Led_Process+0xc8>
    {
        // have to blink ?
        if( blinkin_period[id]!=0 )
 80009b2:	4a30      	ldr	r2, [pc, #192]	; (8000a74 <HAL_Led_Process+0xd8>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d04f      	beq.n	8000a5e <HAL_Led_Process+0xc2>
        {
            // is it time to blink ?
            if( current_time >= last_state_change_time[id]+blinkin_period[id] )
 80009be:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <HAL_Led_Process+0xdc>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	492b      	ldr	r1, [pc, #172]	; (8000a74 <HAL_Led_Process+0xd8>)
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ce:	4413      	add	r3, r2
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d343      	bcc.n	8000a5e <HAL_Led_Process+0xc2>
            {
                // blink
                if(HAL_GPIO_ReadPin(hal_led_id_to_port[id],hal_led_id_to_pin[id])==GPIO_PIN_RESET)
 80009d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 f83d 	bl	8004a60 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d108      	bne.n	80009fe <HAL_Led_Process+0x62>
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 80009ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f4:	2201      	movs	r2, #1
 80009f6:	4618      	mov	r0, r3
 80009f8:	f004 f84a 	bl	8004a90 <HAL_GPIO_WritePin>
 80009fc:	e007      	b.n	8000a0e <HAL_Led_Process+0x72>
                else
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 80009fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a06:	2200      	movs	r2, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 f841 	bl	8004a90 <HAL_GPIO_WritePin>
                // next time
                last_state_change_time[id]+=blinkin_period[id];
 8000a0e:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <HAL_Led_Process+0xdc>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	4917      	ldr	r1, [pc, #92]	; (8000a74 <HAL_Led_Process+0xd8>)
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a1e:	441a      	add	r2, r3
 8000a20:	4915      	ldr	r1, [pc, #84]	; (8000a78 <HAL_Led_Process+0xdc>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if(!blinkin_infinite[id])
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_Led_Process+0xe0>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	f083 0301 	eor.w	r3, r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d011      	beq.n	8000a5e <HAL_Led_Process+0xc2>
                {
                    --blinkin_counter[id];
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <HAL_Led_Process+0xe4>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	490e      	ldr	r1, [pc, #56]	; (8000a80 <HAL_Led_Process+0xe4>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if(blinkin_counter[id]==0)
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <HAL_Led_Process+0xe4>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <HAL_Led_Process+0xc2>
                    {
                        stop_blinking(id);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff5b 	bl	8000914 <stop_blinking>
    for(id=0;id<LED_COUNT;++id)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3301      	adds	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	dda3      	ble.n	80009b2 <HAL_Led_Process+0x16>
            }
            // else don't change led state
        }
        // else don't change led state
    }
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000048 	.word	0x20000048
 8000a78:	20000054 	.word	0x20000054
 8000a7c:	20000050 	.word	0x20000050
 8000a80:	2000004c 	.word	0x2000004c

08000a84 <HAL_Led_Set>:

void HAL_Led_Set(int id)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff41 	bl	8000914 <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8000a92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 fff7 	bl	8004a90 <HAL_GPIO_WritePin>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_Led_Reset>:

void HAL_Led_Reset(int id)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ff2e 	bl	8000914 <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8000ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 ffe4 	bl	8004a90 <HAL_GPIO_WritePin>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_Led_Blink>:
    else
        return LED_OFF;
}

void HAL_Led_Blink(int id, int times, int period_ms)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
    blinkin_period[id]=period_ms;
 8000adc:	4917      	ldr	r1, [pc, #92]	; (8000b3c <HAL_Led_Blink+0x6c>)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    blinkin_counter[id]=times!=0?times*2-1:0;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_Led_Blink+0x24>
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	3b01      	subs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_Led_Blink+0x26>
 8000af4:	2300      	movs	r3, #0
 8000af6:	4912      	ldr	r1, [pc, #72]	; (8000b40 <HAL_Led_Blink+0x70>)
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    blinkin_infinite[id]=(times==0);
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2d9      	uxtb	r1, r3
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_Led_Blink+0x74>)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	460a      	mov	r2, r1
 8000b12:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=HAL_GetTick();
 8000b14:	f001 fcc4 	bl	80024a0 <HAL_GetTick>
 8000b18:	4601      	mov	r1, r0
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <HAL_Led_Blink+0x78>)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // ON at once
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8000b22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 ffaf 	bl	8004a90 <HAL_GPIO_WritePin>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000048 	.word	0x20000048
 8000b40:	2000004c 	.word	0x2000004c
 8000b44:	20000050 	.word	0x20000050
 8000b48:	20000054 	.word	0x20000054

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f001 fc40 	bl	80023d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f867 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f000 faf1 	bl	8001140 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5e:	f000 fab5 	bl	80010cc <MX_DMA_Init>
  MX_TIM4_Init();
 8000b62:	f000 f98f 	bl	8000e84 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000b66:	f000 fa11 	bl	8000f8c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8000b6a:	f000 fa61 	bl	8001030 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b6e:	f000 f8c5 	bl	8000cfc <MX_ADC1_Init>
  MX_OPAMP1_Init();
 8000b72:	f000 f959 	bl	8000e28 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Led_Init();
 8000b76:	f7ff fef3 	bl	8000960 <HAL_Led_Init>
  HAL_Led_Blink(LED0,10,150);
 8000b7a:	2296      	movs	r2, #150	; 0x96
 8000b7c:	210a      	movs	r1, #10
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff ffa6 	bl	8000ad0 <HAL_Led_Blink>
  HAL_Serial_Init_Half_Duplex(
 8000b84:	2300      	movs	r3, #0
 8000b86:	9303      	str	r3, [sp, #12]
 8000b88:	2310      	movs	r3, #16
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <main+0xcc>)
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	2300      	movs	r3, #0
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b9c:	491f      	ldr	r1, [pc, #124]	; (8000c1c <main+0xd0>)
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <main+0xd4>)
 8000ba0:	f000 feaa 	bl	80018f8 <HAL_Serial_Init_Half_Duplex>
	GPIO_PIN_RESET,
	UART2_DIR_RX_GPIO_Port,
	UART2_DIR_RX_Pin,
	GPIO_PIN_RESET
	);
	if(eeprom_empty())
 8000ba4:	f7ff fe22 	bl	80007ec <eeprom_empty>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <main+0x66>
		factory_reset_eeprom_regs();
 8000bae:	f7ff fcb3 	bl	8000518 <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8000bb2:	f7ff fd75 	bl	80006a0 <load_eeprom_regs>
	reset_ram_regs();
 8000bb6:	f7ff fd87 	bl	80006c8 <reset_ram_regs>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start_time = HAL_GetTick();
 8000bba:	f001 fc71 	bl	80024a0 <HAL_GetTick>
 8000bbe:	6078      	str	r0, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle LED
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8000bc0:	f001 fc6e 	bl	80024a0 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d910      	bls.n	8000bf2 <main+0xa6>
	{
		if(regs[REG_LED]==0)
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <main+0xd8>)
 8000bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d103      	bne.n	8000be2 <main+0x96>
		{
			HAL_Led_Reset(LED0);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ff65 	bl	8000aaa <HAL_Led_Reset>
 8000be0:	e007      	b.n	8000bf2 <main+0xa6>
		}
		else if(regs[REG_LED]==1)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <main+0xd8>)
 8000be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d102      	bne.n	8000bf2 <main+0xa6>
		{
			HAL_Led_Set(LED0);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ff49 	bl	8000a84 <HAL_Led_Set>
		}
	}
	HAL_Led_Process();
 8000bf2:	f7ff fed3 	bl	800099c <HAL_Led_Process>

	// Handle communication
	while(HAL_Serial_Available(&serial))
 8000bf6:	e008      	b.n	8000c0a <main+0xbe>
	{
	  char c = HAL_Serial_GetChar(&serial);
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <main+0xd0>)
 8000bfa:	f000 ff43 	bl	8001a84 <HAL_Serial_GetChar>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	70fb      	strb	r3, [r7, #3]
	  packet_handler(c);
 8000c02:	78fb      	ldrb	r3, [r7, #3]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fd0d 	bl	8001624 <packet_handler>
	while(HAL_Serial_Available(&serial))
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <main+0xd0>)
 8000c0c:	f000 ff0a 	bl	8001a24 <HAL_Serial_Available>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <main+0xac>
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8000c16:	e7d3      	b.n	8000bc0 <main+0x74>
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	200002fc 	.word	0x200002fc
 8000c20:	20002c04 	.word	0x20002c04
 8000c24:	20000078 	.word	0x20000078

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0a4      	sub	sp, #144	; 0x90
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c32:	2238      	movs	r2, #56	; 0x38
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f007 fabf 	bl	80081ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2244      	movs	r2, #68	; 0x44
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f007 fab1 	bl	80081ba <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c5c:	f004 f800 	bl	8004c60 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c60:	2302      	movs	r3, #2
 8000c62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6a:	2340      	movs	r3, #64	; 0x40
 8000c6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c76:	2304      	movs	r3, #4
 8000c78:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000c7a:	234b      	movs	r3, #75	; 0x4b
 8000c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 f896 	bl	8004dc8 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ca2:	f000 facb 	bl	800123c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2303      	movs	r3, #3
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 fb99 	bl	80053f8 <HAL_RCC_ClockConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000ccc:	f000 fab6 	bl	800123c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000cd0:	f248 0302 	movw	r3, #32770	; 0x8002
 8000cd4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cda:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fda4 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cee:	f000 faa5 	bl	800123c <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3790      	adds	r7, #144	; 0x90
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	; 0x30
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2220      	movs	r2, #32
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f007 fa50 	bl	80081ba <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1a:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d30:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d3c:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d48:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000d54:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d56:	2203      	movs	r2, #3
 8000d58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d64:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d88:	4824      	ldr	r0, [pc, #144]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000d8a:	f001 fdcf 	bl	800292c <HAL_ADC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000d94:	f000 fa52 	bl	800123c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	481e      	ldr	r0, [pc, #120]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000da4:	f002 fdca 	bl	800393c <HAL_ADCEx_MultiModeConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000dae:	f000 fa45 	bl	800123c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_ADC1_Init+0x124>)
 8000db4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db6:	2306      	movs	r3, #6
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dbe:	237f      	movs	r3, #127	; 0x7f
 8000dc0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000dd0:	f002 f96c 	bl	80030ac <HAL_ADC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000dda:	f000 fa2f 	bl	800123c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_ADC1_Init+0x128>)
 8000de0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000de2:	230c      	movs	r3, #12
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000dec:	f002 f95e 	bl	80030ac <HAL_ADC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000df6:	f000 fa21 	bl	800123c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_ADC1_Init+0x120>)
 8000e04:	f002 f952 	bl	80030ac <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000e0e:	f000 fa15 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	; 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000230 	.word	0x20000230
 8000e20:	b6902000 	.word	0xb6902000
 8000e24:	2a000400 	.word	0x2a000400

08000e28 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <MX_OPAMP1_Init+0x58>)
 8000e30:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e3a:	2240      	movs	r2, #64	; 0x40
 8000e3c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_8_OR_MINUS_7;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_OPAMP1_Init+0x54>)
 8000e68:	f003 fe2a 	bl	8004ac0 <HAL_OPAMP_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8000e72:	f000 f9e3 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001f4 	.word	0x200001f4
 8000e80:	40010300 	.word	0x40010300

08000e84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	; 0x38
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000eb8:	4a33      	ldr	r2, [pc, #204]	; (8000f88 <MX_TIM4_Init+0x104>)
 8000eba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 37;
 8000ebc:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000ebe:	2225      	movs	r2, #37	; 0x25
 8000ec0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000eca:	2263      	movs	r2, #99	; 0x63
 8000ecc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eda:	482a      	ldr	r0, [pc, #168]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000edc:	f004 fe98 	bl	8005c10 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ee6:	f000 f9a9 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4823      	ldr	r0, [pc, #140]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000ef8:	f005 f9d2 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f02:	f000 f99b 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f06:	481f      	ldr	r0, [pc, #124]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000f08:	f004 fed9 	bl	8005cbe <HAL_TIM_PWM_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f12:	f000 f993 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f16:	2320      	movs	r3, #32
 8000f18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4817      	ldr	r0, [pc, #92]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000f26:	f005 fee1 	bl	8006cec <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f30:	f000 f984 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f34:	2360      	movs	r3, #96	; 0x60
 8000f36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000f4c:	f005 f898 	bl	8006080 <HAL_TIM_PWM_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f56:	f000 f971 	bl	800123c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2204      	movs	r2, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000f66:	f005 f88b 	bl	8006080 <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000f70:	f000 f964 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM4_Init+0x100>)
 8000f76:	f001 f88d 	bl	8002094 <HAL_TIM_MspPostInit>

}
 8000f7a:	bf00      	nop
 8000f7c:	3738      	adds	r7, #56	; 0x38
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000015c 	.word	0x2000015c
 8000f88:	40000800 	.word	0x40000800

08000f8c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000fac:	4a1f      	ldr	r2, [pc, #124]	; (800102c <MX_TIM15_Init+0xa0>)
 8000fae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 149;
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000fb2:	2295      	movs	r2, #149	; 0x95
 8000fb4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000fd8:	f004 fe1a 	bl	8005c10 <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000fe2:	f000 f92b 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM15_Init+0x9c>)
 8000ff4:	f005 f954 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000ffe:	f000 f91d 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM15_Init+0x9c>)
 8001010:	f005 fe6c 	bl	8006cec <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800101a:	f000 f90f 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001a8 	.word	0x200001a8
 800102c:	40014000 	.word	0x40014000

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <MX_USART2_UART_Init+0x94>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <MX_USART2_UART_Init+0x98>)
 800103e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 8001054:	220c      	movs	r2, #12
 8001056:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001076:	4812      	ldr	r0, [pc, #72]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 8001078:	f005 ff00 	bl	8006e7c <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001082:	f000 f8db 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 800108a:	f006 ff82 	bl	8007f92 <HAL_UARTEx_SetTxFifoThreshold>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001094:	f000 f8d2 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	4809      	ldr	r0, [pc, #36]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 800109c:	f006 ffb7 	bl	800800e <HAL_UARTEx_SetRxFifoThreshold>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80010a6:	f000 f8c9 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USART2_UART_Init+0x90>)
 80010ac:	f006 ff38 	bl	8007f20 <HAL_UARTEx_DisableFifoMode>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80010b6:	f000 f8c1 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20002c04 	.word	0x20002c04
 80010c4:	40004400 	.word	0x40004400
 80010c8:	0007a120 	.word	0x0007a120

080010cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_DMA_Init+0x70>)
 80010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <MX_DMA_Init+0x70>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6493      	str	r3, [r2, #72]	; 0x48
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_DMA_Init+0x70>)
 80010e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_DMA_Init+0x70>)
 80010ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_DMA_Init+0x70>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6493      	str	r3, [r2, #72]	; 0x48
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_DMA_Init+0x70>)
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	200b      	movs	r0, #11
 8001108:	f002 fda7 	bl	8003c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800110c:	200b      	movs	r0, #11
 800110e:	f002 fdbe 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	200c      	movs	r0, #12
 8001118:	f002 fd9f 	bl	8003c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800111c:	200c      	movs	r0, #12
 800111e:	f002 fdb6 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	200d      	movs	r0, #13
 8001128:	f002 fd97 	bl	8003c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800112c:	200d      	movs	r0, #13
 800112e:	f002 fdae 	bl	8003c8e <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <MX_GPIO_Init+0xf4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a36      	ldr	r2, [pc, #216]	; (8001234 <MX_GPIO_Init+0xf4>)
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b34      	ldr	r3, [pc, #208]	; (8001234 <MX_GPIO_Init+0xf4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0320 	and.w	r3, r3, #32
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_GPIO_Init+0xf4>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a30      	ldr	r2, [pc, #192]	; (8001234 <MX_GPIO_Init+0xf4>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_GPIO_Init+0xf4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_GPIO_Init+0xf4>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <MX_GPIO_Init+0xf4>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_GPIO_Init+0xf4>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|UART2_DIR_TX_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f003 fc72 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_DIR_RX_GPIO_Port, UART2_DIR_RX_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2110      	movs	r1, #16
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <MX_GPIO_Init+0xf8>)
 80011b2:	f003 fc6d 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80011b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011bc:	2311      	movs	r3, #17
 80011be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f003 fac3 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_DIR_TX_Pin */
  GPIO_InitStruct.Pin = UART2_DIR_TX_Pin;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011dc:	2311      	movs	r3, #17
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_DIR_TX_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 fab3 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_DIR_RX_Pin */
  GPIO_InitStruct.Pin = UART2_DIR_RX_Pin;
 80011f6:	2310      	movs	r3, #16
 80011f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011fa:	2311      	movs	r3, #17
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_DIR_RX_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	4619      	mov	r1, r3
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <MX_GPIO_Init+0xf8>)
 800120e:	f003 faa5 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8001212:	2320      	movs	r3, #32
 8001214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121a:	2301      	movs	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4619      	mov	r1, r3
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_GPIO_Init+0xf8>)
 8001226:	f003 fa99 	bl	800475c <HAL_GPIO_Init>

}
 800122a:	bf00      	nop
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	48000400 	.word	0x48000400

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001242:	e7fe      	b.n	8001242 <Error_Handler+0x6>

08001244 <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	4613      	mov	r3, r2
 8001252:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 8001254:	2300      	movs	r3, #0
 8001256:	81fb      	strh	r3, [r7, #14]
 8001258:	e019      	b.n	800128e <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	b29a      	uxth	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	1c59      	adds	r1, r3, #1
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4053      	eors	r3, r2
 800126c:	b29b      	uxth	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	89bb      	ldrh	r3, [r7, #12]
 800127a:	490a      	ldr	r1, [pc, #40]	; (80012a4 <updateCRC+0x60>)
 800127c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001280:	b21b      	sxth	r3, r3
 8001282:	4053      	eors	r3, r2
 8001284:	b21b      	sxth	r3, r3
 8001286:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	3301      	adds	r3, #1
 800128c:	81fb      	strh	r3, [r7, #14]
 800128e:	89fa      	ldrh	r2, [r7, #14]
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3e1      	bcc.n	800125a <updateCRC+0x16>
  }

  return crc_accum;
 8001296:	88fb      	ldrh	r3, [r7, #6]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	080081f4 	.word	0x080081f4

080012a8 <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <packet_encapsulate+0x84>)
 80012b2:	22ff      	movs	r2, #255	; 0xff
 80012b4:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <packet_encapsulate+0x84>)
 80012b8:	22ff      	movs	r2, #255	; 0xff
 80012ba:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <packet_encapsulate+0x84>)
 80012be:	22fd      	movs	r2, #253	; 0xfd
 80012c0:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <packet_encapsulate+0x84>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <packet_encapsulate+0x88>)
 80012ca:	78da      	ldrb	r2, [r3, #3]
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <packet_encapsulate+0x84>)
 80012ce:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	3302      	adds	r3, #2
 80012d6:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <packet_encapsulate+0x84>)
 80012de:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <packet_encapsulate+0x84>)
 80012ea:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	3305      	adds	r3, #5
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	490d      	ldr	r1, [pc, #52]	; (800132c <packet_encapsulate+0x84>)
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff ffa4 	bl	8001244 <updateCRC>
 80012fc:	4603      	mov	r3, r0
 80012fe:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3307      	adds	r3, #7
 8001304:	89ba      	ldrh	r2, [r7, #12]
 8001306:	b2d1      	uxtb	r1, r2
 8001308:	4a08      	ldr	r2, [pc, #32]	; (800132c <packet_encapsulate+0x84>)
 800130a:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 800130c:	89bb      	ldrh	r3, [r7, #12]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	b29a      	uxth	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3308      	adds	r3, #8
 8001316:	b2d1      	uxtb	r1, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <packet_encapsulate+0x84>)
 800131a:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3309      	adds	r3, #9
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <packet_encapsulate+0x8c>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200030dc 	.word	0x200030dc
 8001330:	20000078 	.word	0x20000078
 8001334:	20000060 	.word	0x20000060

08001338 <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 800133e:	4b9b      	ldr	r3, [pc, #620]	; (80015ac <instruction_handler+0x274>)
 8001340:	79db      	ldrb	r3, [r3, #7]
 8001342:	2b06      	cmp	r3, #6
 8001344:	f000 811a 	beq.w	800157c <instruction_handler+0x244>
 8001348:	2b06      	cmp	r3, #6
 800134a:	dc06      	bgt.n	800135a <instruction_handler+0x22>
 800134c:	2b02      	cmp	r3, #2
 800134e:	d02b      	beq.n	80013a8 <instruction_handler+0x70>
 8001350:	2b03      	cmp	r3, #3
 8001352:	d070      	beq.n	8001436 <instruction_handler+0xfe>
 8001354:	2b01      	cmp	r3, #1
 8001356:	d00a      	beq.n	800136e <instruction_handler+0x36>
 8001358:	e148      	b.n	80015ec <instruction_handler+0x2b4>
 800135a:	2b82      	cmp	r3, #130	; 0x82
 800135c:	f000 8157 	beq.w	800160e <instruction_handler+0x2d6>
 8001360:	2b83      	cmp	r3, #131	; 0x83
 8001362:	f000 80b5 	beq.w	80014d0 <instruction_handler+0x198>
 8001366:	2b08      	cmp	r3, #8
 8001368:	f000 812a 	beq.w	80015c0 <instruction_handler+0x288>
 800136c:	e13e      	b.n	80015ec <instruction_handler+0x2b4>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800136e:	4b90      	ldr	r3, [pc, #576]	; (80015b0 <instruction_handler+0x278>)
 8001370:	2255      	movs	r2, #85	; 0x55
 8001372:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8001374:	4b8e      	ldr	r3, [pc, #568]	; (80015b0 <instruction_handler+0x278>)
 8001376:	2200      	movs	r2, #0
 8001378:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 800137a:	4b8e      	ldr	r3, [pc, #568]	; (80015b4 <instruction_handler+0x27c>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <instruction_handler+0x278>)
 8001380:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 8001382:	4b8c      	ldr	r3, [pc, #560]	; (80015b4 <instruction_handler+0x27c>)
 8001384:	785a      	ldrb	r2, [r3, #1]
 8001386:	4b8a      	ldr	r3, [pc, #552]	; (80015b0 <instruction_handler+0x278>)
 8001388:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 800138a:	4b8a      	ldr	r3, [pc, #552]	; (80015b4 <instruction_handler+0x27c>)
 800138c:	789a      	ldrb	r2, [r3, #2]
 800138e:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <instruction_handler+0x278>)
 8001390:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 8001392:	2005      	movs	r0, #5
 8001394:	f7ff ff88 	bl	80012a8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8001398:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <instruction_handler+0x280>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4984      	ldr	r1, [pc, #528]	; (80015b0 <instruction_handler+0x278>)
 80013a0:	4886      	ldr	r0, [pc, #536]	; (80015bc <instruction_handler+0x284>)
 80013a2:	f000 fbbf 	bl	8001b24 <HAL_Serial_Write>
		}
		break;
 80013a6:	e133      	b.n	8001610 <instruction_handler+0x2d8>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80013a8:	4b80      	ldr	r3, [pc, #512]	; (80015ac <instruction_handler+0x274>)
 80013aa:	7a5b      	ldrb	r3, [r3, #9]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b7e      	ldr	r3, [pc, #504]	; (80015ac <instruction_handler+0x274>)
 80013b2:	7a1b      	ldrb	r3, [r3, #8]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80013bc:	4b7b      	ldr	r3, [pc, #492]	; (80015ac <instruction_handler+0x274>)
 80013be:	7adb      	ldrb	r3, [r3, #11]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	4b79      	ldr	r3, [pc, #484]	; (80015ac <instruction_handler+0x274>)
 80013c6:	7a9b      	ldrb	r3, [r3, #10]
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	2b81      	cmp	r3, #129	; 0x81
 80013d4:	d81e      	bhi.n	8001414 <instruction_handler+0xdc>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <instruction_handler+0x278>)
 80013d8:	2255      	movs	r2, #85	; 0x55
 80013da:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80013dc:	4b74      	ldr	r3, [pc, #464]	; (80015b0 <instruction_handler+0x278>)
 80013de:	2200      	movs	r2, #0
 80013e0:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e6:	e00b      	b.n	8001400 <instruction_handler+0xc8>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	441a      	add	r2, r3
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	3309      	adds	r3, #9
 80013f2:	4970      	ldr	r1, [pc, #448]	; (80015b4 <instruction_handler+0x27c>)
 80013f4:	5c89      	ldrb	r1, [r1, r2]
 80013f6:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <instruction_handler+0x278>)
 80013f8:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 80013fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fc:	3301      	adds	r3, #1
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001400:	883b      	ldrh	r3, [r7, #0]
 8001402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001404:	429a      	cmp	r2, r3
 8001406:	d3ef      	bcc.n	80013e8 <instruction_handler+0xb0>
				packet_encapsulate(2+length);
 8001408:	883b      	ldrh	r3, [r7, #0]
 800140a:	3302      	adds	r3, #2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff4b 	bl	80012a8 <packet_encapsulate>
 8001412:	e008      	b.n	8001426 <instruction_handler+0xee>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8001414:	4b66      	ldr	r3, [pc, #408]	; (80015b0 <instruction_handler+0x278>)
 8001416:	2255      	movs	r2, #85	; 0x55
 8001418:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 800141a:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <instruction_handler+0x278>)
 800141c:	2207      	movs	r2, #7
 800141e:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8001420:	2002      	movs	r0, #2
 8001422:	f7ff ff41 	bl	80012a8 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8001426:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <instruction_handler+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4960      	ldr	r1, [pc, #384]	; (80015b0 <instruction_handler+0x278>)
 800142e:	4863      	ldr	r0, [pc, #396]	; (80015bc <instruction_handler+0x284>)
 8001430:	f000 fb78 	bl	8001b24 <HAL_Serial_Write>
		}
		break;
 8001434:	e0ec      	b.n	8001610 <instruction_handler+0x2d8>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8001436:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <instruction_handler+0x274>)
 8001438:	7a5b      	ldrb	r3, [r3, #9]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	4b5b      	ldr	r3, [pc, #364]	; (80015ac <instruction_handler+0x274>)
 8001440:	7a1b      	ldrb	r3, [r3, #8]
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21b      	sxth	r3, r3
 8001448:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 800144a:	4b58      	ldr	r3, [pc, #352]	; (80015ac <instruction_handler+0x274>)
 800144c:	799b      	ldrb	r3, [r3, #6]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <instruction_handler+0x274>)
 8001454:	795b      	ldrb	r3, [r3, #5]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21b      	sxth	r3, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	3b05      	subs	r3, #5
 8001460:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	2b81      	cmp	r3, #129	; 0x81
 8001466:	d822      	bhi.n	80014ae <instruction_handler+0x176>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
 800146c:	e00c      	b.n	8001488 <instruction_handler+0x150>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 800146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001470:	f103 020a 	add.w	r2, r3, #10
 8001474:	88f9      	ldrh	r1, [r7, #6]
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	440b      	add	r3, r1
 800147a:	494c      	ldr	r1, [pc, #304]	; (80015ac <instruction_handler+0x274>)
 800147c:	5c89      	ldrb	r1, [r1, r2]
 800147e:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <instruction_handler+0x27c>)
 8001480:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	3301      	adds	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800148c:	429a      	cmp	r2, r3
 800148e:	d3ee      	bcc.n	800146e <instruction_handler+0x136>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	2b3f      	cmp	r3, #63	; 0x3f
 8001494:	d801      	bhi.n	800149a <instruction_handler+0x162>
				{
					store_eeprom_regs();
 8001496:	f7ff f90d 	bl	80006b4 <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800149a:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <instruction_handler+0x278>)
 800149c:	2255      	movs	r2, #85	; 0x55
 800149e:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80014a0:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <instruction_handler+0x278>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80014a6:	2002      	movs	r0, #2
 80014a8:	f7ff fefe 	bl	80012a8 <packet_encapsulate>
 80014ac:	e008      	b.n	80014c0 <instruction_handler+0x188>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <instruction_handler+0x278>)
 80014b0:	2255      	movs	r2, #85	; 0x55
 80014b2:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <instruction_handler+0x278>)
 80014b6:	2207      	movs	r2, #7
 80014b8:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff fef4 	bl	80012a8 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <instruction_handler+0x280>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	493a      	ldr	r1, [pc, #232]	; (80015b0 <instruction_handler+0x278>)
 80014c8:	483c      	ldr	r0, [pc, #240]	; (80015bc <instruction_handler+0x284>)
 80014ca:	f000 fb2b 	bl	8001b24 <HAL_Serial_Write>
		}
		break;
 80014ce:	e09f      	b.n	8001610 <instruction_handler+0x2d8>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <instruction_handler+0x274>)
 80014d2:	799b      	ldrb	r3, [r3, #6]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b34      	ldr	r3, [pc, #208]	; (80015ac <instruction_handler+0x274>)
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3b07      	subs	r3, #7
 80014e6:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <instruction_handler+0x274>)
 80014ea:	7a5b      	ldrb	r3, [r3, #9]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <instruction_handler+0x274>)
 80014f2:	7a1b      	ldrb	r3, [r3, #8]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80014fc:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <instruction_handler+0x274>)
 80014fe:	7adb      	ldrb	r3, [r3, #11]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4a2a      	ldr	r2, [pc, #168]	; (80015ac <instruction_handler+0x274>)
 8001504:	7a92      	ldrb	r2, [r2, #10]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 800150a:	8bfa      	ldrh	r2, [r7, #30]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	3301      	adds	r3, #1
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <instruction_handler+0x27c>)
 8001518:	78db      	ldrb	r3, [r3, #3]
 800151a:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
 8001520:	e027      	b.n	8001572 <instruction_handler+0x23a>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	3301      	adds	r3, #1
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	330c      	adds	r3, #12
 800152e:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 8001530:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <instruction_handler+0x274>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	429a      	cmp	r2, r3
 8001540:	d114      	bne.n	800156c <instruction_handler+0x234>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
 8001546:	e00d      	b.n	8001564 <instruction_handler+0x22c>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	4413      	add	r3, r2
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	8bb9      	ldrh	r1, [r7, #28]
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	440b      	add	r3, r1
 8001556:	4915      	ldr	r1, [pc, #84]	; (80015ac <instruction_handler+0x274>)
 8001558:	5c89      	ldrb	r1, [r1, r2]
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <instruction_handler+0x27c>)
 800155c:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	3301      	adds	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
 8001564:	6a3a      	ldr	r2, [r7, #32]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	429a      	cmp	r2, r3
 800156a:	d3ed      	bcc.n	8001548 <instruction_handler+0x210>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	3301      	adds	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
 8001572:	8afb      	ldrh	r3, [r7, #22]
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	429a      	cmp	r2, r3
 8001578:	d3d3      	bcc.n	8001522 <instruction_handler+0x1ea>
				}
			}
		}
		break;
 800157a:	e049      	b.n	8001610 <instruction_handler+0x2d8>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 800157c:	f7fe ffcc 	bl	8000518 <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <instruction_handler+0x278>)
 8001582:	2255      	movs	r2, #85	; 0x55
 8001584:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <instruction_handler+0x278>)
 8001588:	2200      	movs	r2, #0
 800158a:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 800158c:	2002      	movs	r0, #2
 800158e:	f7ff fe8b 	bl	80012a8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <instruction_handler+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4905      	ldr	r1, [pc, #20]	; (80015b0 <instruction_handler+0x278>)
 800159a:	4808      	ldr	r0, [pc, #32]	; (80015bc <instruction_handler+0x284>)
 800159c:	f000 fac2 	bl	8001b24 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 80015a0:	2064      	movs	r0, #100	; 0x64
 80015a2:	f000 ff89 	bl	80024b8 <HAL_Delay>
			HAL_NVIC_SystemReset();
 80015a6:	f002 fb80 	bl	8003caa <HAL_NVIC_SystemReset>
		}
		break;
 80015aa:	e031      	b.n	8001610 <instruction_handler+0x2d8>
 80015ac:	20002c90 	.word	0x20002c90
 80015b0:	200030dc 	.word	0x200030dc
 80015b4:	20000078 	.word	0x20000078
 80015b8:	20000060 	.word	0x20000060
 80015bc:	200002fc 	.word	0x200002fc
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <instruction_handler+0x2e0>)
 80015c2:	2255      	movs	r2, #85	; 0x55
 80015c4:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <instruction_handler+0x2e0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 80015cc:	2002      	movs	r0, #2
 80015ce:	f7ff fe6b 	bl	80012a8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <instruction_handler+0x2e4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	490f      	ldr	r1, [pc, #60]	; (8001618 <instruction_handler+0x2e0>)
 80015da:	4811      	ldr	r0, [pc, #68]	; (8001620 <instruction_handler+0x2e8>)
 80015dc:	f000 faa2 	bl	8001b24 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f000 ff69 	bl	80024b8 <HAL_Delay>
			HAL_NVIC_SystemReset();
 80015e6:	f002 fb60 	bl	8003caa <HAL_NVIC_SystemReset>
		}
		break;
 80015ea:	e011      	b.n	8001610 <instruction_handler+0x2d8>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <instruction_handler+0x2e0>)
 80015ee:	2255      	movs	r2, #85	; 0x55
 80015f0:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <instruction_handler+0x2e0>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f7ff fe55 	bl	80012a8 <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <instruction_handler+0x2e4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4904      	ldr	r1, [pc, #16]	; (8001618 <instruction_handler+0x2e0>)
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <instruction_handler+0x2e8>)
 8001608:	f000 fa8c 	bl	8001b24 <HAL_Serial_Write>
		break;
 800160c:	e000      	b.n	8001610 <instruction_handler+0x2d8>
		break;
 800160e:	bf00      	nop
		// nope
	}
}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	; 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200030dc 	.word	0x200030dc
 800161c:	20000060 	.word	0x20000060
 8001620:	200002fc 	.word	0x200002fc

08001624 <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 800162e:	4b84      	ldr	r3, [pc, #528]	; (8001840 <packet_handler+0x21c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b09      	cmp	r3, #9
 8001634:	f200 8100 	bhi.w	8001838 <packet_handler+0x214>
 8001638:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <packet_handler+0x1c>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	08001669 	.word	0x08001669
 8001644:	0800167f 	.word	0x0800167f
 8001648:	080016af 	.word	0x080016af
 800164c:	080016cb 	.word	0x080016cb
 8001650:	080016e7 	.word	0x080016e7
 8001654:	08001709 	.word	0x08001709
 8001658:	08001717 	.word	0x08001717
 800165c:	0800174f 	.word	0x0800174f
 8001660:	0800177d 	.word	0x0800177d
 8001664:	08001799 	.word	0x08001799
	{
	case HEADER1:
		if(c==0xFF)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2bff      	cmp	r3, #255	; 0xff
 800166c:	f040 80e1 	bne.w	8001832 <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8001670:	4a74      	ldr	r2, [pc, #464]	; (8001844 <packet_handler+0x220>)
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 8001676:	4b72      	ldr	r3, [pc, #456]	; (8001840 <packet_handler+0x21c>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800167c:	e0d9      	b.n	8001832 <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2bff      	cmp	r3, #255	; 0xff
 8001682:	d106      	bne.n	8001692 <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 8001684:	4a6f      	ldr	r2, [pc, #444]	; (8001844 <packet_handler+0x220>)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <packet_handler+0x21c>)
 800168c:	2202      	movs	r2, #2
 800168e:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8001690:	e0d2      	b.n	8001838 <packet_handler+0x214>
		else if(c==0xFD)
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2bfd      	cmp	r3, #253	; 0xfd
 8001696:	d106      	bne.n	80016a6 <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8001698:	4a6a      	ldr	r2, [pc, #424]	; (8001844 <packet_handler+0x220>)
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 800169e:	4b68      	ldr	r3, [pc, #416]	; (8001840 <packet_handler+0x21c>)
 80016a0:	2203      	movs	r2, #3
 80016a2:	701a      	strb	r2, [r3, #0]
		break;
 80016a4:	e0c8      	b.n	8001838 <packet_handler+0x214>
			packet_state = HEADER1;
 80016a6:	4b66      	ldr	r3, [pc, #408]	; (8001840 <packet_handler+0x21c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
		break;
 80016ac:	e0c4      	b.n	8001838 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2bfd      	cmp	r3, #253	; 0xfd
 80016b2:	d106      	bne.n	80016c2 <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 80016b4:	4a63      	ldr	r2, [pc, #396]	; (8001844 <packet_handler+0x220>)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 80016ba:	4b61      	ldr	r3, [pc, #388]	; (8001840 <packet_handler+0x21c>)
 80016bc:	2203      	movs	r2, #3
 80016be:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80016c0:	e0ba      	b.n	8001838 <packet_handler+0x214>
			packet_state = HEADER1;
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <packet_handler+0x21c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
		break;
 80016c8:	e0b6      	b.n	8001838 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 80016d0:	4a5c      	ldr	r2, [pc, #368]	; (8001844 <packet_handler+0x220>)
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 80016d6:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <packet_handler+0x21c>)
 80016d8:	2204      	movs	r2, #4
 80016da:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80016dc:	e0ac      	b.n	8001838 <packet_handler+0x214>
			packet_state = HEADER1;
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <packet_handler+0x21c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
		break;
 80016e4:	e0a8      	b.n	8001838 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2bfc      	cmp	r3, #252	; 0xfc
 80016ea:	d902      	bls.n	80016f2 <packet_handler+0xce>
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2bfe      	cmp	r3, #254	; 0xfe
 80016f0:	d106      	bne.n	8001700 <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 80016f2:	4a54      	ldr	r2, [pc, #336]	; (8001844 <packet_handler+0x220>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 80016f8:	4b51      	ldr	r3, [pc, #324]	; (8001840 <packet_handler+0x21c>)
 80016fa:	2205      	movs	r2, #5
 80016fc:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80016fe:	e09b      	b.n	8001838 <packet_handler+0x214>
			packet_state = HEADER1;
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <packet_handler+0x21c>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
		break;
 8001706:	e097      	b.n	8001838 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 8001708:	4a4e      	ldr	r2, [pc, #312]	; (8001844 <packet_handler+0x220>)
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 800170e:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <packet_handler+0x21c>)
 8001710:	2206      	movs	r2, #6
 8001712:	701a      	strb	r2, [r3, #0]
		break;
 8001714:	e090      	b.n	8001838 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 8001716:	4a4b      	ldr	r2, [pc, #300]	; (8001844 <packet_handler+0x220>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 800171c:	4b49      	ldr	r3, [pc, #292]	; (8001844 <packet_handler+0x220>)
 800171e:	799b      	ldrb	r3, [r3, #6]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	4a48      	ldr	r2, [pc, #288]	; (8001844 <packet_handler+0x220>)
 8001724:	7952      	ldrb	r2, [r2, #5]
 8001726:	4313      	orrs	r3, r2
 8001728:	3b02      	subs	r3, #2
 800172a:	4a47      	ldr	r2, [pc, #284]	; (8001848 <packet_handler+0x224>)
 800172c:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 800172e:	4b46      	ldr	r3, [pc, #280]	; (8001848 <packet_handler+0x224>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001736:	d806      	bhi.n	8001746 <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 8001738:	4b41      	ldr	r3, [pc, #260]	; (8001840 <packet_handler+0x21c>)
 800173a:	2207      	movs	r2, #7
 800173c:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 800173e:	4b43      	ldr	r3, [pc, #268]	; (800184c <packet_handler+0x228>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8001744:	e078      	b.n	8001838 <packet_handler+0x214>
			packet_state = HEADER1;
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <packet_handler+0x21c>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
		break;
 800174c:	e074      	b.n	8001838 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <packet_handler+0x228>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	493c      	ldr	r1, [pc, #240]	; (8001844 <packet_handler+0x220>)
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <packet_handler+0x228>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a3b      	ldr	r2, [pc, #236]	; (800184c <packet_handler+0x228>)
 8001760:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <packet_handler+0x224>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3b01      	subs	r3, #1
 8001768:	4a37      	ldr	r2, [pc, #220]	; (8001848 <packet_handler+0x224>)
 800176a:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 800176c:	4b36      	ldr	r3, [pc, #216]	; (8001848 <packet_handler+0x224>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d160      	bne.n	8001836 <packet_handler+0x212>
			packet_state = CRC1;
 8001774:	4b32      	ldr	r3, [pc, #200]	; (8001840 <packet_handler+0x21c>)
 8001776:	2208      	movs	r2, #8
 8001778:	701a      	strb	r2, [r3, #0]
		break;
 800177a:	e05c      	b.n	8001836 <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 800177c:	4b33      	ldr	r3, [pc, #204]	; (800184c <packet_handler+0x228>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4930      	ldr	r1, [pc, #192]	; (8001844 <packet_handler+0x220>)
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <packet_handler+0x228>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	4a2f      	ldr	r2, [pc, #188]	; (800184c <packet_handler+0x228>)
 800178e:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <packet_handler+0x21c>)
 8001792:	2209      	movs	r2, #9
 8001794:	701a      	strb	r2, [r3, #0]
		break;
 8001796:	e04f      	b.n	8001838 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8001798:	4b2c      	ldr	r3, [pc, #176]	; (800184c <packet_handler+0x228>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4929      	ldr	r1, [pc, #164]	; (8001844 <packet_handler+0x220>)
 800179e:	79fa      	ldrb	r2, [r7, #7]
 80017a0:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <packet_handler+0x228>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a27      	ldr	r2, [pc, #156]	; (8001844 <packet_handler+0x220>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <packet_handler+0x228>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	4923      	ldr	r1, [pc, #140]	; (8001844 <packet_handler+0x220>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21b      	sxth	r3, r3
 80017be:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <packet_handler+0x228>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	491d      	ldr	r1, [pc, #116]	; (8001844 <packet_handler+0x220>)
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fd38 	bl	8001244 <updateCRC>
 80017d4:	4603      	mov	r3, r0
 80017d6:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 80017d8:	89ba      	ldrh	r2, [r7, #12]
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d10c      	bne.n	80017fa <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <packet_handler+0x220>)
 80017e2:	791a      	ldrb	r2, [r3, #4]
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <packet_handler+0x22c>)
 80017e6:	78db      	ldrb	r3, [r3, #3]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d003      	beq.n	80017f4 <packet_handler+0x1d0>
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <packet_handler+0x220>)
 80017ee:	791b      	ldrb	r3, [r3, #4]
 80017f0:	2bfe      	cmp	r3, #254	; 0xfe
 80017f2:	d11a      	bne.n	800182a <packet_handler+0x206>
				instruction_handler();
 80017f4:	f7ff fda0 	bl	8001338 <instruction_handler>
 80017f8:	e017      	b.n	800182a <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <packet_handler+0x22c>)
 80017fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001800:	3301      	adds	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <packet_handler+0x22c>)
 8001806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <packet_handler+0x230>)
 800180c:	2255      	movs	r2, #85	; 0x55
 800180e:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <packet_handler+0x230>)
 8001812:	2203      	movs	r2, #3
 8001814:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8001816:	2002      	movs	r0, #2
 8001818:	f7ff fd46 	bl	80012a8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <packet_handler+0x234>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	490c      	ldr	r1, [pc, #48]	; (8001854 <packet_handler+0x230>)
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <packet_handler+0x238>)
 8001826:	f000 f97d 	bl	8001b24 <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <packet_handler+0x21c>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
		break;
 8001830:	e002      	b.n	8001838 <packet_handler+0x214>
		break;
 8001832:	bf00      	nop
 8001834:	e000      	b.n	8001838 <packet_handler+0x214>
		break;
 8001836:	bf00      	nop
	}
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000064 	.word	0x20000064
 8001844:	20002c90 	.word	0x20002c90
 8001848:	2000005c 	.word	0x2000005c
 800184c:	20000058 	.word	0x20000058
 8001850:	20000078 	.word	0x20000078
 8001854:	200030dc 	.word	0x200030dc
 8001858:	20000060 	.word	0x20000060
 800185c:	200002fc 	.word	0x200002fc

08001860 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e032      	b.n	80018d6 <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_UART_ErrorCallback+0x90>)
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	d124      	bne.n	80018cc <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <HAL_UART_ErrorCallback+0x90>)
 8001888:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4917      	ldr	r1, [pc, #92]	; (80018f0 <HAL_UART_ErrorCallback+0x90>)
 8001892:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001896:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 800189a:	3210      	adds	r2, #16
 800189c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80018a0:	3310      	adds	r3, #16
 80018a2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <HAL_UART_ErrorCallback+0x90>)
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_UART_ErrorCallback+0x90>)
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80018be:	3310      	adds	r3, #16
 80018c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c4:	4619      	mov	r1, r3
 80018c6:	f005 fba9 	bl	800701c <HAL_UART_Receive_DMA>
		   break;
 80018ca:	e00b      	b.n	80018e4 <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_UART_ErrorCallback+0x8c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_UART_ErrorCallback+0x94>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1c5      	bne.n	8001870 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000070 	.word	0x20000070
 80018f0:	20000068 	.word	0x20000068
 80018f4:	2000006c 	.word	0x2000006c

080018f8 <HAL_Serial_Init_Half_Duplex>:
		GPIO_PinState PinState_TX,
		GPIO_TypeDef *GPIOx_RX,
		uint16_t GPIO_Pin_RX,
		GPIO_PinState PinState_RX
)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	807b      	strh	r3, [r7, #2]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8001906:	4b45      	ldr	r3, [pc, #276]	; (8001a1c <HAL_Serial_Init_Half_Duplex+0x124>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	4943      	ldr	r1, [pc, #268]	; (8001a1c <HAL_Serial_Init_Half_Duplex+0x124>)
 800190e:	600a      	str	r2, [r1, #0]
 8001910:	4943      	ldr	r1, [pc, #268]	; (8001a20 <HAL_Serial_Init_Half_Duplex+0x128>)
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001924:	3304      	adds	r3, #4
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001930:	3308      	adds	r3, #8
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800193c:	330c      	adds	r3, #12
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8001948:	3210      	adds	r2, #16
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001950:	3310      	adds	r3, #16
 8001952:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800195e:	3310      	adds	r3, #16
 8001960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001964:	4619      	mov	r1, r3
 8001966:	f005 fb59 	bl	800701c <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = true;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001970:	3314      	adds	r3, #20
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = GPIOx_TX;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800197c:	3318      	adds	r3, #24
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = GPIO_Pin_TX;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001988:	331c      	adds	r3, #28
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = PinState_TX;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001994:	331e      	adds	r3, #30
 8001996:	7e3a      	ldrb	r2, [r7, #24]
 8001998:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = GPIOx_RX;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80019a0:	3320      	adds	r3, #32
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = GPIO_Pin_RX;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80019ac:	3324      	adds	r3, #36	; 0x24
 80019ae:	8c3a      	ldrh	r2, [r7, #32]
 80019b0:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = PinState_RX;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80019b8:	3326      	adds	r3, #38	; 0x26
 80019ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019be:	701a      	strb	r2, [r3, #0]
    // TX = OFF
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80019c6:	3318      	adds	r3, #24
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80019d0:	331c      	adds	r3, #28
 80019d2:	8819      	ldrh	r1, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80019da:	331e      	adds	r3, #30
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf0c      	ite	eq
 80019e2:	2301      	moveq	r3, #1
 80019e4:	2300      	movne	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	f003 f851 	bl	8004a90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80019f4:	3320      	adds	r3, #32
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80019fe:	3324      	adds	r3, #36	; 0x24
 8001a00:	8819      	ldrh	r1, [r3, #0]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001a08:	3326      	adds	r3, #38	; 0x26
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f003 f83f 	bl	8004a90 <HAL_GPIO_WritePin>
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000006c 	.word	0x2000006c
 8001a20:	20000068 	.word	0x20000068

08001a24 <HAL_Serial_Available>:

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_Serial_Available+0x14>
        return 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e01f      	b.n	8001a78 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001a3e:	3310      	adds	r3, #16
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	6852      	ldr	r2, [r2, #4]
 8001a4a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001a58:	3310      	adds	r3, #16
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d303      	bcc.n	8001a6e <HAL_Serial_Available+0x4a>
        return head-tail;
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	e004      	b.n	8001a78 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_Serial_GetChar+0x14>
        return 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e03f      	b.n	8001b18 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001a9e:	3310      	adds	r3, #16
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	6852      	ldr	r2, [r2, #4]
 8001aaa:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8001aae:	4413      	add	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001ab8:	3310      	adds	r3, #16
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d027      	beq.n	8001b16 <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001acc:	3310      	adds	r3, #16
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	1c51      	adds	r1, r2, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001ad8:	3310      	adds	r3, #16
 8001ada:	6019      	str	r1, [r3, #0]
 8001adc:	7813      	ldrb	r3, [r2, #0]
 8001ade:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001ae6:	3310      	adds	r3, #16
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001af0:	3310      	adds	r3, #16
 8001af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d30b      	bcc.n	8001b12 <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001b00:	3310      	adds	r3, #16
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001b0e:	3310      	adds	r3, #16
 8001b10:	601a      	str	r2, [r3, #0]
        return c;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	e000      	b.n	8001b18 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_Serial_Write+0x18>
        return 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e09a      	b.n	8001c72 <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001b42:	3304      	adds	r3, #4
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4403      	add	r3, r0
 8001b54:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001b58:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001b60:	3304      	adds	r3, #4
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	019b      	lsls	r3, r3, #6
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	3304      	adds	r3, #4
 8001b72:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f006 fb12 	bl	80081a4 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001b86:	3304      	adds	r3, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001b96:	3304      	adds	r3, #4
 8001b98:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001ba0:	330c      	adds	r3, #12
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d163      	bne.n	8001c70 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001bae:	330c      	adds	r3, #12
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001bba:	3314      	adds	r3, #20
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d028      	beq.n	8001c14 <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001bc8:	3318      	adds	r3, #24
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001bd2:	331c      	adds	r3, #28
 8001bd4:	8819      	ldrh	r1, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001bdc:	331e      	adds	r3, #30
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	f002 ff55 	bl	8004a90 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001bec:	3320      	adds	r3, #32
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001bf6:	3324      	adds	r3, #36	; 0x24
 8001bf8:	8819      	ldrh	r1, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001c00:	3326      	adds	r3, #38	; 0x26
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f002 ff3e 	bl	8004a90 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001c1e:	3308      	adds	r3, #8
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4613      	mov	r3, r2
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001c36:	3308      	adds	r3, #8
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68f9      	ldr	r1, [r7, #12]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	019b      	lsls	r3, r3, #6
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001c4a:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	f005 f963 	bl	8006f1c <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001c5c:	3308      	adds	r3, #8
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 021f 	and.w	r2, r3, #31
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001c6c:	3308      	adds	r3, #8
 8001c6e:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
	...

08001c7c <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 8001c84:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e0d0      	b.n	8001e2e <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6f      	ldr	r2, [pc, #444]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	f040 80c2 	bne.w	8001e24 <HAL_UART_TxCpltCallback+0x1a8>
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001cae:	330c      	adds	r3, #12
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	f040 80b6 	bne.w	8001e24 <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a64      	ldr	r2, [pc, #400]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4960      	ldr	r1, [pc, #384]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cd4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001cd8:	3308      	adds	r3, #8
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d04a      	beq.n	8001d76 <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 8001ce0:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5a      	ldr	r2, [pc, #360]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 8001cea:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8001cec:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a57      	ldr	r2, [pc, #348]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001cf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cf6:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001d04:	3308      	adds	r3, #8
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	019b      	lsls	r3, r3, #6
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8001d14:	4b4d      	ldr	r3, [pc, #308]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a4d      	ldr	r2, [pc, #308]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001d1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d1e:	4b4b      	ldr	r3, [pc, #300]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4b      	ldr	r2, [pc, #300]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	019b      	lsls	r3, r3, #6
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001d3e:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	4621      	mov	r1, r4
 8001d46:	f005 f8e9 	bl	8006f1c <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 8001d4a:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a40      	ldr	r2, [pc, #256]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001d58:	3308      	adds	r3, #8
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	493b      	ldr	r1, [pc, #236]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001d64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001d70:	3308      	adds	r3, #8
 8001d72:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 8001d74:	e064      	b.n	8001e40 <HAL_UART_TxCpltCallback+0x1c4>
				hserial_table[id]->tx_dma = 0;
 8001d76:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001d84:	330c      	adds	r3, #12
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a30      	ldr	r2, [pc, #192]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001d98:	3314      	adds	r3, #20
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d04f      	beq.n	8001e40 <HAL_UART_TxCpltCallback+0x1c4>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001dae:	3318      	adds	r3, #24
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001dc0:	331c      	adds	r3, #28
 8001dc2:	8819      	ldrh	r1, [r3, #0]
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001dd2:	331e      	adds	r3, #30
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf0c      	ite	eq
 8001dda:	2301      	moveq	r3, #1
 8001ddc:	2300      	movne	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	f002 fe55 	bl	8004a90 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001df4:	3320      	adds	r3, #32
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001e06:	3324      	adds	r3, #36	; 0x24
 8001e08:	8819      	ldrh	r1, [r3, #0]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_UART_TxCpltCallback+0x1d4>)
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001e18:	3326      	adds	r3, #38	; 0x26
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f002 fe37 	bl	8004a90 <HAL_GPIO_WritePin>
           break;
 8001e22:	e00d      	b.n	8001e40 <HAL_UART_TxCpltCallback+0x1c4>
    for(id=0;id!=serial_counter;++id)
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_UART_TxCpltCallback+0x1d0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <HAL_UART_TxCpltCallback+0x1d8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f47f af27 	bne.w	8001c8c <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 8001e3e:	e000      	b.n	8001e42 <HAL_UART_TxCpltCallback+0x1c6>
           break;
 8001e40:	bf00      	nop
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000074 	.word	0x20000074
 8001e50:	20000068 	.word	0x20000068
 8001e54:	2000006c 	.word	0x2000006c

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_MspInit+0x44>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <HAL_MspInit+0x44>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_MspInit+0x44>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_MspInit+0x44>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_MspInit+0x44>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_MspInit+0x44>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e8e:	f002 ff8b 	bl	8004da8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec0:	d16e      	bne.n	8001fa0 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a38      	ldr	r2, [pc, #224]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001ec8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	4a32      	ldr	r2, [pc, #200]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_ADC_MspInit+0x108>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4823      	ldr	r0, [pc, #140]	; (8001fac <HAL_ADC_MspInit+0x10c>)
 8001f1e:	f002 fc1d 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f26:	2303      	movs	r3, #3
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <HAL_ADC_MspInit+0x110>)
 8001f36:	f002 fc11 	bl	800475c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f3c:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_ADC_MspInit+0x118>)
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f42:	2205      	movs	r2, #5
 8001f44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f76:	f001 fea9 	bl	8003ccc <HAL_DMA_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001f80:	f7ff f95c 	bl	800123c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_ADC_MspInit+0x114>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2012      	movs	r0, #18
 8001f96:	f001 fe60 	bl	8003c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f9a:	2012      	movs	r0, #18
 8001f9c:	f001 fe77 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	48001400 	.word	0x48001400
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	20002ba4 	.word	0x20002ba4
 8001fb8:	40020030 	.word	0x40020030

08001fbc <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_OPAMP_MspInit+0x5c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d118      	bne.n	8002010 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_OPAMP_MspInit+0x60>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_OPAMP_MspInit+0x60>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_OPAMP_MspInit+0x60>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4619      	mov	r1, r3
 8002008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200c:	f002 fba6 	bl	800475c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40010300 	.word	0x40010300
 800201c:	40021000 	.word	0x40021000

08002020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_TIM_Base_MspInit+0x68>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d114      	bne.n	800205c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_TIM_Base_MspInit+0x6c>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_TIM_Base_MspInit+0x6c>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6593      	str	r3, [r2, #88]	; 0x58
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_TIM_Base_MspInit+0x6c>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	201e      	movs	r0, #30
 8002050:	f001 fe03 	bl	8003c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002054:	201e      	movs	r0, #30
 8002056:	f001 fe1a 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800205a:	e010      	b.n	800207e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_TIM_Base_MspInit+0x70>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d10b      	bne.n	800207e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_TIM_Base_MspInit+0x6c>)
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_TIM_Base_MspInit+0x6c>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6613      	str	r3, [r2, #96]	; 0x60
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_TIM_Base_MspInit+0x6c>)
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40000800 	.word	0x40000800
 800208c:	40021000 	.word	0x40021000
 8002090:	40014000 	.word	0x40014000

08002094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <HAL_TIM_MspPostInit+0x64>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d11b      	bne.n	80020ee <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_TIM_MspPostInit+0x68>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_TIM_MspPostInit+0x68>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_TIM_MspPostInit+0x68>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ce:	23c0      	movs	r3, #192	; 0xc0
 80020d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020de:	2302      	movs	r3, #2
 80020e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_TIM_MspPostInit+0x6c>)
 80020ea:	f002 fb37 	bl	800475c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40021000 	.word	0x40021000
 8002100:	48000400 	.word	0x48000400

08002104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a53      	ldr	r2, [pc, #332]	; (8002270 <HAL_UART_MspInit+0x16c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	f040 80a0 	bne.w	8002268 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002128:	4b52      	ldr	r3, [pc, #328]	; (8002274 <HAL_UART_MspInit+0x170>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	4a51      	ldr	r2, [pc, #324]	; (8002274 <HAL_UART_MspInit+0x170>)
 800212e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002132:	6593      	str	r3, [r2, #88]	; 0x58
 8002134:	4b4f      	ldr	r3, [pc, #316]	; (8002274 <HAL_UART_MspInit+0x170>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_UART_MspInit+0x170>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_UART_MspInit+0x170>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_UART_MspInit+0x170>)
 800214e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_UART_MspInit+0x170>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	4a45      	ldr	r2, [pc, #276]	; (8002274 <HAL_UART_MspInit+0x170>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002164:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_UART_MspInit+0x170>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002182:	2307      	movs	r3, #7
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002190:	f002 fae4 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002194:	2308      	movs	r3, #8
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a4:	2307      	movs	r3, #7
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4832      	ldr	r0, [pc, #200]	; (8002278 <HAL_UART_MspInit+0x174>)
 80021b0:	f002 fad4 	bl	800475c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_UART_MspInit+0x178>)
 80021b6:	4a32      	ldr	r2, [pc, #200]	; (8002280 <HAL_UART_MspInit+0x17c>)
 80021b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_UART_MspInit+0x178>)
 80021bc:	221a      	movs	r2, #26
 80021be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c0:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_UART_MspInit+0x178>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_UART_MspInit+0x178>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_UART_MspInit+0x178>)
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_UART_MspInit+0x178>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_UART_MspInit+0x178>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_UART_MspInit+0x178>)
 80021e0:	2220      	movs	r2, #32
 80021e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_UART_MspInit+0x178>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021ea:	4824      	ldr	r0, [pc, #144]	; (800227c <HAL_UART_MspInit+0x178>)
 80021ec:	f001 fd6e 	bl	8003ccc <HAL_DMA_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80021f6:	f7ff f821 	bl	800123c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_UART_MspInit+0x178>)
 80021fe:	679a      	str	r2, [r3, #120]	; 0x78
 8002200:	4a1e      	ldr	r2, [pc, #120]	; (800227c <HAL_UART_MspInit+0x178>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_UART_MspInit+0x180>)
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_UART_MspInit+0x184>)
 800220a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_UART_MspInit+0x180>)
 800220e:	221b      	movs	r2, #27
 8002210:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_UART_MspInit+0x180>)
 8002214:	2210      	movs	r2, #16
 8002216:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_UART_MspInit+0x180>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_UART_MspInit+0x180>)
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_UART_MspInit+0x180>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_UART_MspInit+0x180>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_UART_MspInit+0x180>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_UART_MspInit+0x180>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800223c:	4811      	ldr	r0, [pc, #68]	; (8002284 <HAL_UART_MspInit+0x180>)
 800223e:	f001 fd45 	bl	8003ccc <HAL_DMA_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8002248:	f7fe fff8 	bl	800123c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_UART_MspInit+0x180>)
 8002250:	675a      	str	r2, [r3, #116]	; 0x74
 8002252:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <HAL_UART_MspInit+0x180>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2026      	movs	r0, #38	; 0x26
 800225e:	f001 fcfc 	bl	8003c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002262:	2026      	movs	r0, #38	; 0x26
 8002264:	f001 fd13 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40004400 	.word	0x40004400
 8002274:	40021000 	.word	0x40021000
 8002278:	48000400 	.word	0x48000400
 800227c:	200000fc 	.word	0x200000fc
 8002280:	40020008 	.word	0x40020008
 8002284:	2000029c 	.word	0x2000029c
 8002288:	4002001c 	.word	0x4002001c

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <NMI_Handler+0x4>

08002292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <MemManage_Handler+0x4>

0800229e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <BusFault_Handler+0x4>

080022a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <UsageFault_Handler+0x4>

080022aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d8:	f000 f8d0 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <DMA1_Channel1_IRQHandler+0x10>)
 80022e6:	f001 fe7b 	bl	8003fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200000fc 	.word	0x200000fc

080022f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <DMA1_Channel2_IRQHandler+0x10>)
 80022fa:	f001 fe71 	bl	8003fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000029c 	.word	0x2000029c

08002308 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <DMA1_Channel3_IRQHandler+0x10>)
 800230e:	f001 fe67 	bl	8003fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20002ba4 	.word	0x20002ba4

0800231c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <ADC1_2_IRQHandler+0x10>)
 8002322:	f000 fc8b 	bl	8002c3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000230 	.word	0x20000230

08002330 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <TIM4_IRQHandler+0x10>)
 8002336:	f003 fd23 	bl	8005d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000015c 	.word	0x2000015c

08002344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <USART2_IRQHandler+0x10>)
 800234a:	f004 feef 	bl	800712c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20002c04 	.word	0x20002c04

08002358 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <SystemInit+0x28>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <SystemInit+0x28>)
 8002364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SystemInit+0x28>)
 800236e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002372:	609a      	str	r2, [r3, #8]
#endif
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002386:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800238a:	490e      	ldr	r1, [pc, #56]	; (80023c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <LoopForever+0xe>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a0:	4c0b      	ldr	r4, [pc, #44]	; (80023d0 <LoopForever+0x16>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023ae:	f7ff ffd3 	bl	8002358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023b2:	f005 fed3 	bl	800815c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b6:	f7fe fbc9 	bl	8000b4c <main>

080023ba <LoopForever>:

LoopForever:
    b LoopForever
 80023ba:	e7fe      	b.n	80023ba <LoopForever>
  ldr   r0, =_estack
 80023bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80023c8:	08008434 	.word	0x08008434
  ldr r2, =_sbss
 80023cc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80023d0:	2000352c 	.word	0x2000352c

080023d4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <COMP1_2_3_IRQHandler>

080023d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f001 fc2f 	bl	8003c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023e6:	2000      	movs	r0, #0
 80023e8:	f000 f80e 	bl	8002408 <HAL_InitTick>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	e001      	b.n	80023fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023f8:	f7ff fd2e 	bl	8001e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023fc:	79fb      	ldrb	r3, [r7, #7]

}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_InitTick+0x68>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d022      	beq.n	8002462 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_InitTick+0x6c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_InitTick+0x68>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002428:	fbb1 f3f3 	udiv	r3, r1, r3
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	4618      	mov	r0, r3
 8002432:	f001 fc3e 	bl	8003cb2 <HAL_SYSTICK_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10f      	bne.n	800245c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	d809      	bhi.n	8002456 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002442:	2200      	movs	r2, #0
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	f04f 30ff 	mov.w	r0, #4294967295
 800244a:	f001 fc06 	bl	8003c5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_InitTick+0x70>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e007      	b.n	8002466 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e004      	b.n	8002466 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e001      	b.n	8002466 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000008 	.word	0x20000008
 8002474:	20000000 	.word	0x20000000
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_IncTick+0x1c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_IncTick+0x20>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4413      	add	r3, r2
 800248a:	4a03      	ldr	r2, [pc, #12]	; (8002498 <HAL_IncTick+0x1c>)
 800248c:	6013      	str	r3, [r2, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	20003528 	.word	0x20003528
 800249c:	20000008 	.word	0x20000008

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20003528 	.word	0x20003528

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d004      	beq.n	80024dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_Delay+0x40>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024dc:	bf00      	nop
 80024de:	f7ff ffdf 	bl	80024a0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d8f7      	bhi.n	80024de <HAL_Delay+0x26>
  {
  }
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008

080024fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	609a      	str	r2, [r3, #8]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3360      	adds	r3, #96	; 0x60
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <LL_ADC_SetOffset+0x44>)
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	4313      	orrs	r3, r2
 8002594:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	03fff000 	.word	0x03fff000

080025ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3360      	adds	r3, #96	; 0x60
 80025ba:	461a      	mov	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3360      	adds	r3, #96	; 0x60
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3360      	adds	r3, #96	; 0x60
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	431a      	orrs	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3360      	adds	r3, #96	; 0x60
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	431a      	orrs	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	615a      	str	r2, [r3, #20]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b087      	sub	sp, #28
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3330      	adds	r3, #48	; 0x30
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	4413      	add	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	211f      	movs	r1, #31
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	401a      	ands	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0e9b      	lsrs	r3, r3, #26
 80026fe:	f003 011f 	and.w	r1, r3, #31
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	431a      	orrs	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3314      	adds	r3, #20
 8002754:	461a      	mov	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	0e5b      	lsrs	r3, r3, #25
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	4413      	add	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	0d1b      	lsrs	r3, r3, #20
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2107      	movs	r1, #7
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	401a      	ands	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	0d1b      	lsrs	r3, r3, #20
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	431a      	orrs	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0318 	and.w	r3, r3, #24
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027c0:	40d9      	lsrs	r1, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	400b      	ands	r3, r1
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	431a      	orrs	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	0007ffff 	.word	0x0007ffff

080027e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 031f 	and.w	r3, r3, #31
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800282c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6093      	str	r3, [r2, #8]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002854:	d101      	bne.n	800285a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800287c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a4:	d101      	bne.n	80028aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <LL_ADC_IsEnabled+0x18>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <LL_ADC_IsEnabled+0x1a>
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b08      	cmp	r3, #8
 8002916:	d101      	bne.n	800291c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e16b      	b.n	8002c1e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff faa3 	bl	8001ea0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff67 	bl	8002840 <LL_ADC_IsDeepPowerDownEnabled>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff4d 	bl	800281c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff82 	bl	8002890 <LL_ADC_IsInternalRegulatorEnabled>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d113      	bne.n	80029ba <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff66 	bl	8002868 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800299c:	4ba2      	ldr	r3, [pc, #648]	; (8002c28 <HAL_ADC_Init+0x2fc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	4aa2      	ldr	r2, [pc, #648]	; (8002c2c <HAL_ADC_Init+0x300>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029ac:	e002      	b.n	80029b4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f9      	bne.n	80029ae <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ff66 	bl	8002890 <LL_ADC_IsInternalRegulatorEnabled>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10d      	bne.n	80029e6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff77 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 80029f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 8106 	bne.w	8002c0c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 8102 	bne.w	8002c0c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a10:	f043 0202 	orr.w	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff4b 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d111      	bne.n	8002a4c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a2c:	f7ff ff44 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a30:	4604      	mov	r4, r0
 8002a32:	487f      	ldr	r0, [pc, #508]	; (8002c30 <HAL_ADC_Init+0x304>)
 8002a34:	f7ff ff40 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4323      	orrs	r3, r4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4619      	mov	r1, r3
 8002a46:	487b      	ldr	r0, [pc, #492]	; (8002c34 <HAL_ADC_Init+0x308>)
 8002a48:	f7ff fd58 	bl	80024fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7f5b      	ldrb	r3, [r3, #29]
 8002a50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d106      	bne.n	8002a88 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	045b      	lsls	r3, r3, #17
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_ADC_Init+0x30c>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	69b9      	ldr	r1, [r7, #24]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff03 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff10 	bl	8002904 <LL_ADC_INJ_IsConversionOngoing>
 8002ae4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d16d      	bne.n	8002bc8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d16a      	bne.n	8002bc8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002af6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002afe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b0e:	f023 0302 	bic.w	r3, r3, #2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	69b9      	ldr	r1, [r7, #24]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6911      	ldr	r1, [r2, #16]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b52:	e013      	b.n	8002b7c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d118      	bne.n	8002bb8 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	e007      	b.n	8002bc8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10c      	bne.n	8002bea <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f023 010f 	bic.w	r1, r3, #15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	1e5a      	subs	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
 8002be8:	e007      	b.n	8002bfa <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 020f 	bic.w	r2, r2, #15
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	f023 0303 	bic.w	r3, r3, #3
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c0a:	e007      	b.n	8002c1c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	f043 0210 	orr.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd90      	pop	{r4, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	053e2d63 	.word	0x053e2d63
 8002c30:	50000100 	.word	0x50000100
 8002c34:	50000300 	.word	0x50000300
 8002c38:	fff04007 	.word	0xfff04007

08002c3c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c58:	4883      	ldr	r0, [pc, #524]	; (8002e68 <HAL_ADC_IRQHandler+0x22c>)
 8002c5a:	f7ff fdc3 	bl	80027e4 <LL_ADC_GetMultimode>
 8002c5e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d017      	beq.n	8002c9a <HAL_ADC_IRQHandler+0x5e>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d012      	beq.n	8002c9a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fe4b 	bl	8003928 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2202      	movs	r2, #2
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <HAL_ADC_IRQHandler+0x72>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8085 	beq.w	8002dc4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d07f      	beq.n	8002dc4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fcdd 	bl	80026a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d064      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_ADC_IRQHandler+0x230>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d002      	beq.n	8002cfc <HAL_ADC_IRQHandler+0xc0>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	e001      	b.n	8002d00 <HAL_ADC_IRQHandler+0xc4>
 8002cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d008      	beq.n	8002d1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d002      	beq.n	8002d1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	d104      	bne.n	8002d24 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	623b      	str	r3, [r7, #32]
 8002d22:	e00d      	b.n	8002d40 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_ADC_IRQHandler+0x230>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d002      	beq.n	8002d34 <HAL_ADC_IRQHandler+0xf8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	e001      	b.n	8002d38 <HAL_ADC_IRQHandler+0xfc>
 8002d34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d38:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d135      	bne.n	8002db6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d12e      	bne.n	8002db6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fdbe 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11a      	bne.n	8002d9e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 020c 	bic.w	r2, r2, #12
 8002d76:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d112      	bne.n	8002db6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d9c:	e00b      	b.n	8002db6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f95a 	bl	8003070 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	220c      	movs	r2, #12
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x19c>
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 809e 	beq.w	8002f20 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8098 	beq.w	8002f20 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fc86 	bl	800271e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e12:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fc41 	bl	80026a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e1e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_ADC_IRQHandler+0x230>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d002      	beq.n	8002e30 <HAL_ADC_IRQHandler+0x1f4>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	e001      	b.n	8002e34 <HAL_ADC_IRQHandler+0x1f8>
 8002e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d008      	beq.n	8002e4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b06      	cmp	r3, #6
 8002e46:	d002      	beq.n	8002e4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b07      	cmp	r3, #7
 8002e4c:	d104      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	623b      	str	r3, [r7, #32]
 8002e56:	e011      	b.n	8002e7c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <HAL_ADC_IRQHandler+0x230>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d006      	beq.n	8002e70 <HAL_ADC_IRQHandler+0x234>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	e005      	b.n	8002e74 <HAL_ADC_IRQHandler+0x238>
 8002e68:	50000300 	.word	0x50000300
 8002e6c:	50000100 	.word	0x50000100
 8002e70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e74:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d142      	bne.n	8002f12 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03f      	beq.n	8002f12 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d13a      	bne.n	8002f12 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d133      	bne.n	8002f12 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d12e      	bne.n	8002f12 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fd23 	bl	8002904 <LL_ADC_INJ_IsConversionOngoing>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11a      	bne.n	8002efa <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ed2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d112      	bne.n	8002f12 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef8:	e00b      	b.n	8002f12 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	f043 0210 	orr.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fce0 	bl	80038d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2260      	movs	r2, #96	; 0x60
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d011      	beq.n	8002f4e <HAL_ADC_IRQHandler+0x312>
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f89f 	bl	8003084 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <HAL_ADC_IRQHandler+0x342>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fcc6 	bl	8003900 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_ADC_IRQHandler+0x372>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fcb8 	bl	8003914 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d036      	beq.n	8003026 <HAL_ADC_IRQHandler+0x3ea>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d031      	beq.n	8003026 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	e014      	b.n	8002ffa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fd6:	4825      	ldr	r0, [pc, #148]	; (800306c <HAL_ADC_IRQHandler+0x430>)
 8002fd8:	f7ff fc12 	bl	8002800 <LL_ADC_GetMultiDMATransfer>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe6:	e008      	b.n	8002ffa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10e      	bne.n	800301e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	f043 0202 	orr.w	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f83d 	bl	8003098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2210      	movs	r2, #16
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d018      	beq.n	8003062 <HAL_ADC_IRQHandler+0x426>
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d013      	beq.n	8003062 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304a:	f043 0208 	orr.w	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800305a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fc45 	bl	80038ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003062:	bf00      	nop
 8003064:	3728      	adds	r7, #40	; 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	50000300 	.word	0x50000300

08003070 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b0b6      	sub	sp, #216	; 0xd8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x22>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e3c7      	b.n	800385e <HAL_ADC_ConfigChannel+0x7b2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fbff 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 83ac 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f7ff fae6 	bl	80026c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fbed 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 8003104:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fbf9 	bl	8002904 <LL_ADC_INJ_IsConversionOngoing>
 8003112:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003116:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800311a:	2b00      	cmp	r3, #0
 800311c:	f040 81d9 	bne.w	80034d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 81d4 	bne.w	80034d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003132:	d10f      	bne.n	8003154 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2200      	movs	r2, #0
 800313e:	4619      	mov	r1, r3
 8003140:	f7ff fb00 	bl	8002744 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fa94 	bl	800267a <LL_ADC_SetSamplingTimeCommonConfig>
 8003152:	e00e      	b.n	8003172 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6819      	ldr	r1, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	461a      	mov	r2, r3
 8003162:	f7ff faef 	bl	8002744 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fa84 	bl	800267a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d022      	beq.n	80031da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6919      	ldr	r1, [r3, #16]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031a4:	f7ff f9de 	bl	8002564 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6919      	ldr	r1, [r3, #16]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	461a      	mov	r2, r3
 80031b6:	f7ff fa2a 	bl	800260e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	7f1b      	ldrb	r3, [r3, #28]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x124>
 80031ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ce:	e000      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x126>
 80031d0:	2300      	movs	r3, #0
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7ff fa36 	bl	8002644 <LL_ADC_SetOffsetSaturation>
 80031d8:	e17b      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f9e3 	bl	80025ac <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x15a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f9d8 	bl	80025ac <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	e01e      	b.n	8003244 <HAL_ADC_ConfigChannel+0x198>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f9cd 	bl	80025ac <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800322c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e004      	b.n	8003242 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_ADC_ConfigChannel+0x1b0>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0e9b      	lsrs	r3, r3, #26
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	e018      	b.n	800328e <HAL_ADC_ConfigChannel+0x1e2>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003278:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e004      	b.n	800328e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	429a      	cmp	r2, r3
 8003290:	d106      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff f99c 	bl	80025d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f980 	bl	80025ac <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x220>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff f975 	bl	80025ac <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	f003 021f 	and.w	r2, r3, #31
 80032ca:	e01e      	b.n	800330a <HAL_ADC_ConfigChannel+0x25e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f96a 	bl	80025ac <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032fa:	2320      	movs	r3, #32
 80032fc:	e004      	b.n	8003308 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80032fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x276>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	0e9b      	lsrs	r3, r3, #26
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	e018      	b.n	8003354 <HAL_ADC_ConfigChannel+0x2a8>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800333a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800333e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003346:	2320      	movs	r3, #32
 8003348:	e004      	b.n	8003354 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800334a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	429a      	cmp	r2, r3
 8003356:	d106      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2200      	movs	r2, #0
 800335e:	2101      	movs	r1, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff f939 	bl	80025d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f91d 	bl	80025ac <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x2e6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f912 	bl	80025ac <LL_ADC_GetOffsetChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	e01e      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x324>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f907 	bl	80025ac <LL_ADC_GetOffsetChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80033c0:	2320      	movs	r3, #32
 80033c2:	e004      	b.n	80033ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x33c>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	e016      	b.n	8003416 <HAL_ADC_ConfigChannel+0x36a>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e004      	b.n	8003416 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800340c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	429a      	cmp	r2, r3
 8003418:	d106      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	2102      	movs	r1, #2
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f8d8 	bl	80025d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2103      	movs	r1, #3
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f8bc 	bl	80025ac <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x3a8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2103      	movs	r1, #3
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f8b1 	bl	80025ac <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	f003 021f 	and.w	r2, r3, #31
 8003452:	e017      	b.n	8003484 <HAL_ADC_ConfigChannel+0x3d8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2103      	movs	r1, #3
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f8a6 	bl	80025ac <LL_ADC_GetOffsetChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800346c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800346e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003476:	2320      	movs	r3, #32
 8003478:	e003      	b.n	8003482 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800347a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_ADC_ConfigChannel+0x3f0>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	e011      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x414>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e003      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80034b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d106      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2103      	movs	r1, #3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f883 	bl	80025d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f9ee 	bl	80028b8 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 8140 	bne.w	8003764 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	461a      	mov	r2, r3
 80034f2:	f7ff f953 	bl	800279c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	4a8f      	ldr	r2, [pc, #572]	; (8003738 <HAL_ADC_ConfigChannel+0x68c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	f040 8131 	bne.w	8003764 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HAL_ADC_ConfigChannel+0x47e>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	0e9b      	lsrs	r3, r3, #26
 8003518:	3301      	adds	r3, #1
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2b09      	cmp	r3, #9
 8003520:	bf94      	ite	ls
 8003522:	2301      	movls	r3, #1
 8003524:	2300      	movhi	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e019      	b.n	800355e <HAL_ADC_ConfigChannel+0x4b2>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800353a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800353c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003542:	2320      	movs	r3, #32
 8003544:	e003      	b.n	800354e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2b09      	cmp	r3, #9
 8003556:	bf94      	ite	ls
 8003558:	2301      	movls	r3, #1
 800355a:	2300      	movhi	r3, #0
 800355c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800355e:	2b00      	cmp	r3, #0
 8003560:	d079      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_ADC_ConfigChannel+0x4d2>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	0e9b      	lsrs	r3, r3, #26
 8003574:	3301      	adds	r3, #1
 8003576:	069b      	lsls	r3, r3, #26
 8003578:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800357c:	e015      	b.n	80035aa <HAL_ADC_ConfigChannel+0x4fe>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003596:	2320      	movs	r3, #32
 8003598:	e003      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	3301      	adds	r3, #1
 80035a4:	069b      	lsls	r3, r3, #26
 80035a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x51e>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0e9b      	lsrs	r3, r3, #26
 80035bc:	3301      	adds	r3, #1
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	e017      	b.n	80035fa <HAL_ADC_ConfigChannel+0x54e>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035e2:	2320      	movs	r3, #32
 80035e4:	e003      	b.n	80035ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	ea42 0103 	orr.w	r1, r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x574>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0e9b      	lsrs	r3, r3, #26
 8003610:	3301      	adds	r3, #1
 8003612:	f003 021f 	and.w	r2, r3, #31
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	051b      	lsls	r3, r3, #20
 800361e:	e018      	b.n	8003652 <HAL_ADC_ConfigChannel+0x5a6>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003638:	2320      	movs	r3, #32
 800363a:	e003      	b.n	8003644 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f003 021f 	and.w	r2, r3, #31
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003652:	430b      	orrs	r3, r1
 8003654:	e081      	b.n	800375a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x5c6>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	0e9b      	lsrs	r3, r3, #26
 8003668:	3301      	adds	r3, #1
 800366a:	069b      	lsls	r3, r3, #26
 800366c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003670:	e015      	b.n	800369e <HAL_ADC_ConfigChannel+0x5f2>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800368a:	2320      	movs	r3, #32
 800368c:	e003      	b.n	8003696 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3301      	adds	r3, #1
 8003698:	069b      	lsls	r3, r3, #26
 800369a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_ADC_ConfigChannel+0x612>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	3301      	adds	r3, #1
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	e017      	b.n	80036ee <HAL_ADC_ConfigChannel+0x642>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	61fb      	str	r3, [r7, #28]
  return result;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e003      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	ea42 0103 	orr.w	r1, r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_ADC_ConfigChannel+0x66e>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	3301      	adds	r3, #1
 8003706:	f003 021f 	and.w	r2, r3, #31
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	3b1e      	subs	r3, #30
 8003712:	051b      	lsls	r3, r3, #20
 8003714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003718:	e01e      	b.n	8003758 <HAL_ADC_ConfigChannel+0x6ac>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	613b      	str	r3, [r7, #16]
  return result;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003732:	2320      	movs	r3, #32
 8003734:	e006      	b.n	8003744 <HAL_ADC_ConfigChannel+0x698>
 8003736:	bf00      	nop
 8003738:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	3b1e      	subs	r3, #30
 8003752:	051b      	lsls	r3, r3, #20
 8003754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003758:	430b      	orrs	r3, r1
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	6892      	ldr	r2, [r2, #8]
 800375e:	4619      	mov	r1, r3
 8003760:	f7fe fff0 	bl	8002744 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_ADC_ConfigChannel+0x7bc>)
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d070      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003770:	483e      	ldr	r0, [pc, #248]	; (800386c <HAL_ADC_ConfigChannel+0x7c0>)
 8003772:	f7fe fee9 	bl	8002548 <LL_ADC_GetCommonPathInternalCh>
 8003776:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3c      	ldr	r2, [pc, #240]	; (8003870 <HAL_ADC_ConfigChannel+0x7c4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_ADC_ConfigChannel+0x6e2>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <HAL_ADC_ConfigChannel+0x7c8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d126      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800378e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d120      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a2:	d156      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ac:	4619      	mov	r1, r3
 80037ae:	482f      	ldr	r0, [pc, #188]	; (800386c <HAL_ADC_ConfigChannel+0x7c0>)
 80037b0:	f7fe feb7 	bl	8002522 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_ADC_ConfigChannel+0x7cc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	4a30      	ldr	r2, [pc, #192]	; (800387c <HAL_ADC_ConfigChannel+0x7d0>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	099a      	lsrs	r2, r3, #6
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037cc:	e002      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f9      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037da:	e03a      	b.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a27      	ldr	r2, [pc, #156]	; (8003880 <HAL_ADC_ConfigChannel+0x7d4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d113      	bne.n	800380e <HAL_ADC_ConfigChannel+0x762>
 80037e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a23      	ldr	r2, [pc, #140]	; (8003884 <HAL_ADC_ConfigChannel+0x7d8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d02a      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003804:	4619      	mov	r1, r3
 8003806:	4819      	ldr	r0, [pc, #100]	; (800386c <HAL_ADC_ConfigChannel+0x7c0>)
 8003808:	f7fe fe8b 	bl	8002522 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800380c:	e021      	b.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <HAL_ADC_ConfigChannel+0x7dc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d11c      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800381c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_ADC_ConfigChannel+0x7d8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d011      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800382e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003832:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003836:	4619      	mov	r1, r3
 8003838:	480c      	ldr	r0, [pc, #48]	; (800386c <HAL_ADC_ConfigChannel+0x7c0>)
 800383a:	f7fe fe72 	bl	8002522 <LL_ADC_SetCommonPathInternalCh>
 800383e:	e008      	b.n	8003852 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	f043 0220 	orr.w	r2, r3, #32
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800385a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800385e:	4618      	mov	r0, r3
 8003860:	37d8      	adds	r7, #216	; 0xd8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	80080000 	.word	0x80080000
 800386c:	50000300 	.word	0x50000300
 8003870:	c3210000 	.word	0xc3210000
 8003874:	90c00010 	.word	0x90c00010
 8003878:	20000000 	.word	0x20000000
 800387c:	053e2d63 	.word	0x053e2d63
 8003880:	c7520000 	.word	0xc7520000
 8003884:	50000100 	.word	0x50000100
 8003888:	cb840000 	.word	0xcb840000

0800388c <LL_ADC_IsEnabled>:
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <LL_ADC_IsEnabled+0x18>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <LL_ADC_IsEnabled+0x1a>
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d101      	bne.n	80038ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b0a1      	sub	sp, #132	; 0x84
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003956:	2302      	movs	r3, #2
 8003958:	e087      	b.n	8003a6a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396a:	d102      	bne.n	8003972 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800396c:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	e001      	b.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e06a      	b.n	8003a6a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff8b 	bl	80038b2 <LL_ADC_REG_IsConversionOngoing>
 800399c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff85 	bl	80038b2 <LL_ADC_REG_IsConversionOngoing>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d14c      	bne.n	8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d149      	bne.n	8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039b4:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80039b6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d028      	beq.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80039c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039d2:	035b      	lsls	r3, r3, #13
 80039d4:	430b      	orrs	r3, r1
 80039d6:	431a      	orrs	r2, r3
 80039d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039e0:	f7ff ff54 	bl	800388c <LL_ADC_IsEnabled>
 80039e4:	4604      	mov	r4, r0
 80039e6:	4823      	ldr	r0, [pc, #140]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80039e8:	f7ff ff50 	bl	800388c <LL_ADC_IsEnabled>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4323      	orrs	r3, r4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d133      	bne.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039fc:	f023 030f 	bic.w	r3, r3, #15
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	6811      	ldr	r1, [r2, #0]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	6892      	ldr	r2, [r2, #8]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a10:	e024      	b.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a1e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a22:	f7ff ff33 	bl	800388c <LL_ADC_IsEnabled>
 8003a26:	4604      	mov	r4, r0
 8003a28:	4812      	ldr	r0, [pc, #72]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003a2a:	f7ff ff2f 	bl	800388c <LL_ADC_IsEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4323      	orrs	r3, r4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d112      	bne.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a3e:	f023 030f 	bic.w	r3, r3, #15
 8003a42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a46:	e009      	b.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a5a:	e000      	b.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3784      	adds	r7, #132	; 0x84
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	50000100 	.word	0x50000100
 8003a78:	50000300 	.word	0x50000300

08003a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aae:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	60d3      	str	r3, [r2, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <__NVIC_GetPriorityGrouping+0x18>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 0307 	and.w	r3, r3, #7
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db0b      	blt.n	8003b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	4907      	ldr	r1, [pc, #28]	; (8003b18 <__NVIC_EnableIRQ+0x38>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2001      	movs	r0, #1
 8003b02:	fa00 f202 	lsl.w	r2, r0, r2
 8003b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000e100 	.word	0xe000e100

08003b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db0a      	blt.n	8003b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	490c      	ldr	r1, [pc, #48]	; (8003b68 <__NVIC_SetPriority+0x4c>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b44:	e00a      	b.n	8003b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4908      	ldr	r1, [pc, #32]	; (8003b6c <__NVIC_SetPriority+0x50>)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3b04      	subs	r3, #4
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	761a      	strb	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f1c3 0307 	rsb	r3, r3, #7
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf28      	it	cs
 8003b8e:	2304      	movcs	r3, #4
 8003b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d902      	bls.n	8003ba0 <NVIC_EncodePriority+0x30>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3b03      	subs	r3, #3
 8003b9e:	e000      	b.n	8003ba2 <NVIC_EncodePriority+0x32>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43d9      	mvns	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	4313      	orrs	r3, r2
         );
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003bdc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <__NVIC_SystemReset+0x20>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <__NVIC_SystemReset+0x20>)
 8003bea:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <__NVIC_SystemReset+0x24>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60cb      	str	r3, [r1, #12]
 8003bf0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <__NVIC_SystemReset+0x1c>
 8003bf8:	e000ed00 	.word	0xe000ed00
 8003bfc:	05fa0004 	.word	0x05fa0004

08003c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c10:	d301      	bcc.n	8003c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00f      	b.n	8003c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c16:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <SysTick_Config+0x40>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c1e:	210f      	movs	r1, #15
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	f7ff ff7a 	bl	8003b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <SysTick_Config+0x40>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c2e:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <SysTick_Config+0x40>)
 8003c30:	2207      	movs	r2, #7
 8003c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	e000e010 	.word	0xe000e010

08003c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff15 	bl	8003a7c <__NVIC_SetPriorityGrouping>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	4603      	mov	r3, r0
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c68:	f7ff ff2c 	bl	8003ac4 <__NVIC_GetPriorityGrouping>
 8003c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f7ff ff7c 	bl	8003b70 <NVIC_EncodePriority>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff4b 	bl	8003b1c <__NVIC_SetPriority>
}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff1f 	bl	8003ae0 <__NVIC_EnableIRQ>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003cae:	f7ff ff93 	bl	8003bd8 <__NVIC_SystemReset>

08003cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ffa0 	bl	8003c00 <SysTick_Config>
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e08d      	b.n	8003dfa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_DMA_Init+0x138>)
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d80f      	bhi.n	8003d0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <HAL_DMA_Init+0x13c>)
 8003cf2:	4413      	add	r3, r2
 8003cf4:	4a45      	ldr	r2, [pc, #276]	; (8003e0c <HAL_DMA_Init+0x140>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	009a      	lsls	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a42      	ldr	r2, [pc, #264]	; (8003e10 <HAL_DMA_Init+0x144>)
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40
 8003d08:	e00e      	b.n	8003d28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <HAL_DMA_Init+0x148>)
 8003d12:	4413      	add	r3, r2
 8003d14:	4a3d      	ldr	r2, [pc, #244]	; (8003e0c <HAL_DMA_Init+0x140>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	009a      	lsls	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <HAL_DMA_Init+0x14c>)
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa1e 	bl	80041bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d88:	d102      	bne.n	8003d90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003da4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d010      	beq.n	8003dd0 <HAL_DMA_Init+0x104>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d80c      	bhi.n	8003dd0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa3e 	bl	8004238 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	e008      	b.n	8003de2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40020407 	.word	0x40020407
 8003e08:	bffdfff8 	.word	0xbffdfff8
 8003e0c:	cccccccd 	.word	0xcccccccd
 8003e10:	40020000 	.word	0x40020000
 8003e14:	bffdfbf8 	.word	0xbffdfbf8
 8003e18:	40020400 	.word	0x40020400

08003e1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_DMA_Start_IT+0x20>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e066      	b.n	8003f0a <HAL_DMA_Start_IT+0xee>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d155      	bne.n	8003efc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f962 	bl	800413e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 020e 	orr.w	r2, r2, #14
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e00f      	b.n	8003eb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0204 	bic.w	r2, r2, #4
 8003ea2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 020a 	orr.w	r2, r2, #10
 8003eb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e005      	b.n	8003f08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
 8003f06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d00d      	beq.n	8003f46 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
 8003f44:	e047      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 020e 	bic.w	r2, r2, #14
 8003f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f003 021f 	and.w	r2, r3, #31
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2101      	movs	r1, #1
 8003f84:	fa01 f202 	lsl.w	r2, r1, r2
 8003f88:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f92:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00c      	beq.n	8003fb6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003faa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fb4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
    }
  }
  return status;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2204      	movs	r2, #4
 8004002:	409a      	lsls	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d026      	beq.n	800405a <HAL_DMA_IRQHandler+0x7a>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d021      	beq.n	800405a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d107      	bne.n	8004034 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0204 	bic.w	r2, r2, #4
 8004032:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2104      	movs	r1, #4
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	2b00      	cmp	r3, #0
 800404e:	d071      	beq.n	8004134 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004058:	e06c      	b.n	8004134 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2202      	movs	r2, #2
 8004064:	409a      	lsls	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02e      	beq.n	80040cc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d029      	beq.n	80040cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020a 	bic.w	r2, r2, #10
 8004094:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f003 021f 	and.w	r2, r3, #31
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2102      	movs	r1, #2
 80040ac:	fa01 f202 	lsl.w	r2, r1, r2
 80040b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d038      	beq.n	8004134 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040ca:	e033      	b.n	8004134 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2208      	movs	r2, #8
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02a      	beq.n	8004136 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d025      	beq.n	8004136 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 020e 	bic.w	r2, r2, #14
 80040f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f003 021f 	and.w	r2, r3, #31
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2101      	movs	r1, #1
 8004108:	fa01 f202 	lsl.w	r2, r1, r2
 800410c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004134:	bf00      	nop
 8004136:	bf00      	nop
}
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004154:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	f003 021f 	and.w	r2, r3, #31
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	2101      	movs	r1, #1
 8004176:	fa01 f202 	lsl.w	r2, r1, r2
 800417a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b10      	cmp	r3, #16
 800418a:	d108      	bne.n	800419e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800419c:	e007      	b.n	80041ae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	60da      	str	r2, [r3, #12]
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b16      	ldr	r3, [pc, #88]	; (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d802      	bhi.n	80041d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041d0:	4b15      	ldr	r3, [pc, #84]	; (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e001      	b.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80041d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	3b08      	subs	r3, #8
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	009a      	lsls	r2, r3, #2
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004206:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2201      	movs	r2, #1
 8004210:	409a      	lsls	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40020407 	.word	0x40020407
 8004228:	40020800 	.word	0x40020800
 800422c:	40020820 	.word	0x40020820
 8004230:	cccccccd 	.word	0xcccccccd
 8004234:	40020880 	.word	0x40020880

08004238 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800425a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b01      	subs	r3, #1
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2201      	movs	r2, #1
 8004266:	409a      	lsls	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	1000823f 	.word	0x1000823f
 800427c:	40020940 	.word	0x40020940

08004280 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_FLASH_Program+0xa4>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_FLASH_Program+0x1e>
 800429a:	2302      	movs	r3, #2
 800429c:	e03e      	b.n	800431c <HAL_FLASH_Program+0x9c>
 800429e:	4b21      	ldr	r3, [pc, #132]	; (8004324 <HAL_FLASH_Program+0xa4>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042a8:	f000 f888 	bl	80043bc <FLASH_WaitForLastOperation>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d12e      	bne.n	8004314 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_FLASH_Program+0xa4>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80042c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f000 f8cc 	bl	8004464 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80042cc:	2301      	movs	r3, #1
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	e010      	b.n	80042f4 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d002      	beq.n	80042de <HAL_FLASH_Program+0x5e>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d10a      	bne.n	80042f4 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	f000 f8e2 	bl	80044ac <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d102      	bne.n	80042f4 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80042ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042f2:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042f8:	f000 f860 	bl	80043bc <FLASH_WaitForLastOperation>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <HAL_FLASH_Program+0xa8>)
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	43db      	mvns	r3, r3
 800430e:	4906      	ldr	r1, [pc, #24]	; (8004328 <HAL_FLASH_Program+0xa8>)
 8004310:	4013      	ands	r3, r2
 8004312:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_FLASH_Program+0xa4>)
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800431a:	7dfb      	ldrb	r3, [r7, #23]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	2000000c 	.word	0x2000000c
 8004328:	40022000 	.word	0x40022000

0800432c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_FLASH_Unlock+0x38>)
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	da0b      	bge.n	8004356 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_FLASH_Unlock+0x38>)
 8004340:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_FLASH_Unlock+0x3c>)
 8004342:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004344:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_FLASH_Unlock+0x38>)
 8004346:	4a09      	ldr	r2, [pc, #36]	; (800436c <HAL_FLASH_Unlock+0x40>)
 8004348:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_FLASH_Unlock+0x38>)
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	da01      	bge.n	8004356 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004356:	79fb      	ldrb	r3, [r7, #7]
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40022000 	.word	0x40022000
 8004368:	45670123 	.word	0x45670123
 800436c:	cdef89ab 	.word	0xcdef89ab

08004370 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_FLASH_Lock+0x30>)
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4a08      	ldr	r2, [pc, #32]	; (80043a0 <HAL_FLASH_Lock+0x30>)
 8004380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004384:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_FLASH_Lock+0x30>)
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	da01      	bge.n	8004392 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004392:	79fb      	ldrb	r3, [r7, #7]
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	40022000 	.word	0x40022000

080043a4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_FLASH_GetError+0x14>)
 80043aa:	685b      	ldr	r3, [r3, #4]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	2000000c 	.word	0x2000000c

080043bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80043c4:	f7fe f86c 	bl	80024a0 <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80043ca:	e009      	b.n	80043e0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80043cc:	f7fe f868 	bl	80024a0 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d201      	bcs.n	80043e0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e038      	b.n	8004452 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80043e0:	4b1e      	ldr	r3, [pc, #120]	; (800445c <FLASH_WaitForLastOperation+0xa0>)
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d0ee      	beq.n	80043cc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80043ee:	4b1b      	ldr	r3, [pc, #108]	; (800445c <FLASH_WaitForLastOperation+0xa0>)
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80043f6:	4013      	ands	r3, r2
 80043f8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01e      	beq.n	800443e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8004400:	4b17      	ldr	r3, [pc, #92]	; (8004460 <FLASH_WaitForLastOperation+0xa4>)
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <FLASH_WaitForLastOperation+0xa4>)
 800440a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <FLASH_WaitForLastOperation+0x6a>
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <FLASH_WaitForLastOperation+0xa0>)
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004420:	490e      	ldr	r1, [pc, #56]	; (800445c <FLASH_WaitForLastOperation+0xa0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	618b      	str	r3, [r1, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <FLASH_WaitForLastOperation+0x7e>
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <FLASH_WaitForLastOperation+0xa0>)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004438:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e009      	b.n	8004452 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <FLASH_WaitForLastOperation+0xa0>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <FLASH_WaitForLastOperation+0xa0>)
 800444c:	2201      	movs	r2, #1
 800444e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40022000 	.word	0x40022000
 8004460:	2000000c 	.word	0x2000000c

08004464 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004464:	b490      	push	{r4, r7}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004470:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <FLASH_Program_DoubleWord+0x44>)
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4a0c      	ldr	r2, [pc, #48]	; (80044a8 <FLASH_Program_DoubleWord+0x44>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004482:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004486:	e9d7 1200 	ldrd	r1, r2, [r7]
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	f04f 0400 	mov.w	r4, #0
 8004492:	0013      	movs	r3, r2
 8004494:	2400      	movs	r4, #0
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	3204      	adds	r2, #4
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc90      	pop	{r4, r7}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40022000 	.word	0x40022000

080044ac <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80044b6:	2340      	movs	r3, #64	; 0x40
 80044b8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <FLASH_Program_Fast+0x64>)
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <FLASH_Program_Fast+0x64>)
 80044c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ce:	f3ef 8310 	mrs	r3, PRIMASK
 80044d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80044d4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80044d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80044d8:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	3304      	adds	r3, #4
 80044e6:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3304      	adds	r3, #4
 80044ec:	617b      	str	r3, [r7, #20]
    row_index--;
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80044f4:	7ffb      	ldrb	r3, [r7, #31]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1ef      	bne.n	80044da <FLASH_Program_Fast+0x2e>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004504:	bf00      	nop
 8004506:	3724      	adds	r7, #36	; 0x24
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40022000 	.word	0x40022000

08004514 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800451e:	4b4a      	ldr	r3, [pc, #296]	; (8004648 <HAL_FLASHEx_Erase+0x134>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_FLASHEx_Erase+0x16>
 8004526:	2302      	movs	r3, #2
 8004528:	e089      	b.n	800463e <HAL_FLASHEx_Erase+0x12a>
 800452a:	4b47      	ldr	r3, [pc, #284]	; (8004648 <HAL_FLASHEx_Erase+0x134>)
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004534:	f7ff ff42 	bl	80043bc <FLASH_WaitForLastOperation>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d179      	bne.n	8004636 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_FLASHEx_Erase+0x134>)
 8004544:	2200      	movs	r2, #0
 8004546:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004548:	4b40      	ldr	r3, [pc, #256]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004550:	2b00      	cmp	r3, #0
 8004552:	d019      	beq.n	8004588 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004554:	4b3d      	ldr	r3, [pc, #244]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a3c      	ldr	r2, [pc, #240]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 800455a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800455e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004560:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800456c:	4b37      	ldr	r3, [pc, #220]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a36      	ldr	r2, [pc, #216]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 8004572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004576:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004578:	4b33      	ldr	r3, [pc, #204]	; (8004648 <HAL_FLASHEx_Erase+0x134>)
 800457a:	2203      	movs	r2, #3
 800457c:	771a      	strb	r2, [r3, #28]
 800457e:	e016      	b.n	80045ae <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004580:	4b31      	ldr	r3, [pc, #196]	; (8004648 <HAL_FLASHEx_Erase+0x134>)
 8004582:	2201      	movs	r2, #1
 8004584:	771a      	strb	r2, [r3, #28]
 8004586:	e012      	b.n	80045ae <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004588:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004594:	4b2d      	ldr	r3, [pc, #180]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2c      	ldr	r2, [pc, #176]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 800459a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800459e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80045a0:	4b29      	ldr	r3, [pc, #164]	; (8004648 <HAL_FLASHEx_Erase+0x134>)
 80045a2:	2202      	movs	r2, #2
 80045a4:	771a      	strb	r2, [r3, #28]
 80045a6:	e002      	b.n	80045ae <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_FLASHEx_Erase+0x134>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d111      	bne.n	80045da <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f848 	bl	8004650 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045c4:	f7ff fefa 	bl	80043bc <FLASH_WaitForLastOperation>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	4a1e      	ldr	r2, [pc, #120]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	6153      	str	r3, [r2, #20]
 80045d8:	e02b      	b.n	8004632 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	e01b      	b.n	8004622 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4619      	mov	r1, r3
 80045f0:	68b8      	ldr	r0, [r7, #8]
 80045f2:	f000 f84b 	bl	800468c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045fa:	f7ff fedf 	bl	80043bc <FLASH_WaitForLastOperation>
 80045fe:	4603      	mov	r3, r0
 8004600:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4a11      	ldr	r2, [pc, #68]	; (800464c <HAL_FLASHEx_Erase+0x138>)
 8004608:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800460c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	601a      	str	r2, [r3, #0]
          break;
 800461a:	e00a      	b.n	8004632 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	3301      	adds	r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4413      	add	r3, r2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d3db      	bcc.n	80045ea <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004632:	f000 f84f 	bl	80046d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <HAL_FLASHEx_Erase+0x134>)
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]

  return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000000c 	.word	0x2000000c
 800464c:	40022000 	.word	0x40022000

08004650 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <FLASH_MassErase+0x38>)
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <FLASH_MassErase+0x38>)
 8004668:	f043 0304 	orr.w	r3, r3, #4
 800466c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <FLASH_MassErase+0x38>)
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4a05      	ldr	r2, [pc, #20]	; (8004688 <FLASH_MassErase+0x38>)
 8004674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004678:	6153      	str	r3, [r2, #20]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40022000 	.word	0x40022000

0800468c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004696:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <FLASH_PageErase+0x44>)
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80046a6:	490a      	ldr	r1, [pc, #40]	; (80046d0 <FLASH_PageErase+0x44>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <FLASH_PageErase+0x44>)
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	4a07      	ldr	r2, [pc, #28]	; (80046d0 <FLASH_PageErase+0x44>)
 80046b2:	f043 0302 	orr.w	r3, r3, #2
 80046b6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <FLASH_PageErase+0x44>)
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <FLASH_PageErase+0x44>)
 80046be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c2:	6153      	str	r3, [r2, #20]
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40022000 	.word	0x40022000

080046d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <FLASH_FlushCaches+0x80>)
 80046dc:	7f1b      	ldrb	r3, [r3, #28]
 80046de:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d002      	beq.n	80046ec <FLASH_FlushCaches+0x18>
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d111      	bne.n	8004710 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <FLASH_FlushCaches+0x84>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <FLASH_FlushCaches+0x84>)
 80046f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4b17      	ldr	r3, [pc, #92]	; (8004758 <FLASH_FlushCaches+0x84>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a16      	ldr	r2, [pc, #88]	; (8004758 <FLASH_FlushCaches+0x84>)
 80046fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004702:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <FLASH_FlushCaches+0x84>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a13      	ldr	r2, [pc, #76]	; (8004758 <FLASH_FlushCaches+0x84>)
 800470a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800470e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d002      	beq.n	800471c <FLASH_FlushCaches+0x48>
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d111      	bne.n	8004740 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <FLASH_FlushCaches+0x84>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0d      	ldr	r2, [pc, #52]	; (8004758 <FLASH_FlushCaches+0x84>)
 8004722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <FLASH_FlushCaches+0x84>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <FLASH_FlushCaches+0x84>)
 800472e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004732:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <FLASH_FlushCaches+0x84>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a07      	ldr	r2, [pc, #28]	; (8004758 <FLASH_FlushCaches+0x84>)
 800473a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800473e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <FLASH_FlushCaches+0x80>)
 8004742:	2200      	movs	r2, #0
 8004744:	771a      	strb	r2, [r3, #28]
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2000000c 	.word	0x2000000c
 8004758:	40022000 	.word	0x40022000

0800475c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800476a:	e15a      	b.n	8004a22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2101      	movs	r1, #1
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 814c 	beq.w	8004a1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d00b      	beq.n	80047a4 <HAL_GPIO_Init+0x48>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d007      	beq.n	80047a4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004798:	2b11      	cmp	r3, #17
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b12      	cmp	r3, #18
 80047a2:	d130      	bne.n	8004806 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047da:	2201      	movs	r2, #1
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0201 	and.w	r2, r3, #1
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	2203      	movs	r2, #3
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0xea>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b12      	cmp	r3, #18
 8004844:	d123      	bne.n	800488e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	08da      	lsrs	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3208      	adds	r2, #8
 800484e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	220f      	movs	r2, #15
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	08da      	lsrs	r2, r3, #3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3208      	adds	r2, #8
 8004888:	6939      	ldr	r1, [r7, #16]
 800488a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	2203      	movs	r2, #3
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 0203 	and.w	r2, r3, #3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80a6 	beq.w	8004a1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048d0:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <HAL_GPIO_Init+0x2e4>)
 80048d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d4:	4a5a      	ldr	r2, [pc, #360]	; (8004a40 <HAL_GPIO_Init+0x2e4>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6613      	str	r3, [r2, #96]	; 0x60
 80048dc:	4b58      	ldr	r3, [pc, #352]	; (8004a40 <HAL_GPIO_Init+0x2e4>)
 80048de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048e8:	4a56      	ldr	r2, [pc, #344]	; (8004a44 <HAL_GPIO_Init+0x2e8>)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	3302      	adds	r3, #2
 80048f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	220f      	movs	r2, #15
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004912:	d01f      	beq.n	8004954 <HAL_GPIO_Init+0x1f8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a4c      	ldr	r2, [pc, #304]	; (8004a48 <HAL_GPIO_Init+0x2ec>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d019      	beq.n	8004950 <HAL_GPIO_Init+0x1f4>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a4b      	ldr	r2, [pc, #300]	; (8004a4c <HAL_GPIO_Init+0x2f0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_GPIO_Init+0x1f0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a4a      	ldr	r2, [pc, #296]	; (8004a50 <HAL_GPIO_Init+0x2f4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00d      	beq.n	8004948 <HAL_GPIO_Init+0x1ec>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a49      	ldr	r2, [pc, #292]	; (8004a54 <HAL_GPIO_Init+0x2f8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <HAL_GPIO_Init+0x1e8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a48      	ldr	r2, [pc, #288]	; (8004a58 <HAL_GPIO_Init+0x2fc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_GPIO_Init+0x1e4>
 800493c:	2305      	movs	r3, #5
 800493e:	e00a      	b.n	8004956 <HAL_GPIO_Init+0x1fa>
 8004940:	2306      	movs	r3, #6
 8004942:	e008      	b.n	8004956 <HAL_GPIO_Init+0x1fa>
 8004944:	2304      	movs	r3, #4
 8004946:	e006      	b.n	8004956 <HAL_GPIO_Init+0x1fa>
 8004948:	2303      	movs	r3, #3
 800494a:	e004      	b.n	8004956 <HAL_GPIO_Init+0x1fa>
 800494c:	2302      	movs	r3, #2
 800494e:	e002      	b.n	8004956 <HAL_GPIO_Init+0x1fa>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_GPIO_Init+0x1fa>
 8004954:	2300      	movs	r3, #0
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	f002 0203 	and.w	r2, r2, #3
 800495c:	0092      	lsls	r2, r2, #2
 800495e:	4093      	lsls	r3, r2
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004966:	4937      	ldr	r1, [pc, #220]	; (8004a44 <HAL_GPIO_Init+0x2e8>)
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	089b      	lsrs	r3, r3, #2
 800496c:	3302      	adds	r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004974:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <HAL_GPIO_Init+0x300>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	43db      	mvns	r3, r3
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4013      	ands	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004998:	4a30      	ldr	r2, [pc, #192]	; (8004a5c <HAL_GPIO_Init+0x300>)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800499e:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <HAL_GPIO_Init+0x300>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049c2:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <HAL_GPIO_Init+0x300>)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_GPIO_Init+0x300>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <HAL_GPIO_Init+0x300>)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049f2:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <HAL_GPIO_Init+0x300>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4013      	ands	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a16:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <HAL_GPIO_Init+0x300>)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f47f ae9d 	bne.w	800476c <HAL_GPIO_Init+0x10>
  }
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40010000 	.word	0x40010000
 8004a48:	48000400 	.word	0x48000400
 8004a4c:	48000800 	.word	0x48000800
 8004a50:	48000c00 	.word	0x48000c00
 8004a54:	48001000 	.word	0x48001000
 8004a58:	48001400 	.word	0x48001400
 8004a5c:	40010400 	.word	0x40010400

08004a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	e001      	b.n	8004a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aac:	e002      	b.n	8004ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e0bb      	b.n	8004c4e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d101      	bne.n	8004ae6 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0b3      	b.n	8004c4e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d101      	bne.n	8004af6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0ab      	b.n	8004c4e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af6:	4b58      	ldr	r3, [pc, #352]	; (8004c58 <HAL_OPAMP_Init+0x198>)
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	4a57      	ldr	r2, [pc, #348]	; (8004c58 <HAL_OPAMP_Init+0x198>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	6613      	str	r3, [r2, #96]	; 0x60
 8004b02:	4b55      	ldr	r3, [pc, #340]	; (8004c58 <HAL_OPAMP_Init+0x198>)
 8004b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd fa4a 	bl	8001fbc <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d003      	beq.n	8004b38 <HAL_OPAMP_Init+0x78>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b60      	cmp	r3, #96	; 0x60
 8004b36:	d133      	bne.n	8004ba0 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 0110 	bic.w	r1, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <HAL_OPAMP_Init+0x19c>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6851      	ldr	r1, [r2, #4]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6892      	ldr	r2, [r2, #8]
 8004b60:	4311      	orrs	r1, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6912      	ldr	r2, [r2, #16]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	7d09      	ldrb	r1, [r1, #20]
 8004b6c:	2901      	cmp	r1, #1
 8004b6e:	d102      	bne.n	8004b76 <HAL_OPAMP_Init+0xb6>
 8004b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b74:	e000      	b.n	8004b78 <HAL_OPAMP_Init+0xb8>
 8004b76:	2100      	movs	r1, #0
 8004b78:	4311      	orrs	r1, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b84:	4311      	orrs	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b8a:	04d2      	lsls	r2, r2, #19
 8004b8c:	4311      	orrs	r1, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b92:	0612      	lsls	r2, r2, #24
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e035      	b.n	8004c0c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 0110 	bic.w	r1, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b27      	ldr	r3, [pc, #156]	; (8004c5c <HAL_OPAMP_Init+0x19c>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6851      	ldr	r1, [r2, #4]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6892      	ldr	r2, [r2, #8]
 8004bc8:	4311      	orrs	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68d2      	ldr	r2, [r2, #12]
 8004bce:	4311      	orrs	r1, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6912      	ldr	r2, [r2, #16]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	7d09      	ldrb	r1, [r1, #20]
 8004bda:	2901      	cmp	r1, #1
 8004bdc:	d102      	bne.n	8004be4 <HAL_OPAMP_Init+0x124>
 8004bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004be2:	e000      	b.n	8004be6 <HAL_OPAMP_Init+0x126>
 8004be4:	2100      	movs	r1, #0
 8004be6:	4311      	orrs	r1, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bec:	4311      	orrs	r1, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004bf2:	4311      	orrs	r1, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004bf8:	04d2      	lsls	r2, r2, #19
 8004bfa:	4311      	orrs	r1, r2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c00:	0612      	lsls	r2, r2, #24
 8004c02:	4311      	orrs	r1, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	db10      	blt.n	8004c38 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	e0003e11 	.word	0xe0003e11

08004c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d141      	bne.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7a:	d131      	bne.n	8004ce0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c7c:	4b47      	ldr	r3, [pc, #284]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c82:	4a46      	ldr	r2, [pc, #280]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c8c:	4b43      	ldr	r3, [pc, #268]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c94:	4a41      	ldr	r2, [pc, #260]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c9c:	4b40      	ldr	r3, [pc, #256]	; (8004da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2232      	movs	r2, #50	; 0x32
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	4a3f      	ldr	r2, [pc, #252]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	0c9b      	lsrs	r3, r3, #18
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cb2:	e002      	b.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cba:	4b38      	ldr	r3, [pc, #224]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc6:	d102      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f2      	bne.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cce:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cda:	d158      	bne.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e057      	b.n	8004d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cf0:	e04d      	b.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d141      	bne.n	8004d7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cfa:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d131      	bne.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0e:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d18:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d20:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2232      	movs	r2, #50	; 0x32
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	0c9b      	lsrs	r3, r3, #18
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d3e:	e002      	b.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	d102      	bne.n	8004d5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f2      	bne.n	8004d40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d66:	d112      	bne.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e011      	b.n	8004d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d7c:	e007      	b.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d86:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	20000000 	.word	0x20000000
 8004da4:	431bde83 	.word	0x431bde83

08004da8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a04      	ldr	r2, [pc, #16]	; (8004dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004db6:	6093      	str	r3, [r2, #8]
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40007000 	.word	0x40007000

08004dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e308      	b.n	80053ec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d075      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de6:	4ba3      	ldr	r3, [pc, #652]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004df0:	4ba0      	ldr	r3, [pc, #640]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b0c      	cmp	r3, #12
 8004dfe:	d102      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3e>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_OscConfig+0x44>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d10b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	4b99      	ldr	r3, [pc, #612]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05b      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x108>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d157      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e2e3      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_OscConfig+0x74>
 8004e2e:	4b91      	ldr	r3, [pc, #580]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a90      	ldr	r2, [pc, #576]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e01d      	b.n	8004e78 <HAL_RCC_OscConfig+0xb0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCC_OscConfig+0x98>
 8004e46:	4b8b      	ldr	r3, [pc, #556]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a8a      	ldr	r2, [pc, #552]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4b88      	ldr	r3, [pc, #544]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a87      	ldr	r2, [pc, #540]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCC_OscConfig+0xb0>
 8004e60:	4b84      	ldr	r3, [pc, #528]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a83      	ldr	r2, [pc, #524]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b81      	ldr	r3, [pc, #516]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a80      	ldr	r2, [pc, #512]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d013      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd fb0e 	bl	80024a0 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fd fb0a 	bl	80024a0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e2a8      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e9a:	4b76      	ldr	r3, [pc, #472]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0xc0>
 8004ea6:	e014      	b.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fd fafa 	bl	80024a0 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fd faf6 	bl	80024a0 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e294      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ec2:	4b6c      	ldr	r3, [pc, #432]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0xe8>
 8004ece:	e000      	b.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d075      	beq.n	8004fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ede:	4b65      	ldr	r3, [pc, #404]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee8:	4b62      	ldr	r3, [pc, #392]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d102      	bne.n	8004efe <HAL_RCC_OscConfig+0x136>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d002      	beq.n	8004f04 <HAL_RCC_OscConfig+0x13c>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11f      	bne.n	8004f44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f04:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_OscConfig+0x154>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e267      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1c:	4b55      	ldr	r3, [pc, #340]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	4952      	ldr	r1, [pc, #328]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f30:	4b51      	ldr	r3, [pc, #324]	; (8005078 <HAL_RCC_OscConfig+0x2b0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fd fa67 	bl	8002408 <HAL_InitTick>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d043      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e253      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d023      	beq.n	8004f94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f4c:	4b49      	ldr	r3, [pc, #292]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a48      	ldr	r2, [pc, #288]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd faa2 	bl	80024a0 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f60:	f7fd fa9e 	bl	80024a0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e23c      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f72:	4b40      	ldr	r3, [pc, #256]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	061b      	lsls	r3, r3, #24
 8004f8c:	4939      	ldr	r1, [pc, #228]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	604b      	str	r3, [r1, #4]
 8004f92:	e01a      	b.n	8004fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f94:	4b37      	ldr	r3, [pc, #220]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a36      	ldr	r2, [pc, #216]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fa7e 	bl	80024a0 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fd fa7a 	bl	80024a0 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e218      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fba:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x1e0>
 8004fc6:	e000      	b.n	8004fca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d03c      	beq.n	8005050 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01c      	beq.n	8005018 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b25      	ldr	r3, [pc, #148]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe4:	4a23      	ldr	r2, [pc, #140]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fee:	f7fd fa57 	bl	80024a0 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff6:	f7fd fa53 	bl	80024a0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e1f1      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ef      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x22e>
 8005016:	e01b      	b.n	8005050 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005018:	4b16      	ldr	r3, [pc, #88]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 800501a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fd fa3a 	bl	80024a0 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005030:	f7fd fa36 	bl	80024a0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e1d4      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ef      	bne.n	8005030 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80ab 	beq.w	80051b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800505e:	2300      	movs	r3, #0
 8005060:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_RCC_OscConfig+0x2b4>
 800506e:	2301      	movs	r3, #1
 8005070:	e005      	b.n	800507e <HAL_RCC_OscConfig+0x2b6>
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	20000004 	.word	0x20000004
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00d      	beq.n	800509e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	4baf      	ldr	r3, [pc, #700]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	4aae      	ldr	r2, [pc, #696]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508c:	6593      	str	r3, [r2, #88]	; 0x58
 800508e:	4bac      	ldr	r3, [pc, #688]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800509a:	2301      	movs	r3, #1
 800509c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800509e:	4ba9      	ldr	r3, [pc, #676]	; (8005344 <HAL_RCC_OscConfig+0x57c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d118      	bne.n	80050dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050aa:	4ba6      	ldr	r3, [pc, #664]	; (8005344 <HAL_RCC_OscConfig+0x57c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4aa5      	ldr	r2, [pc, #660]	; (8005344 <HAL_RCC_OscConfig+0x57c>)
 80050b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b6:	f7fd f9f3 	bl	80024a0 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050be:	f7fd f9ef 	bl	80024a0 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e18d      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d0:	4b9c      	ldr	r3, [pc, #624]	; (8005344 <HAL_RCC_OscConfig+0x57c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d108      	bne.n	80050f6 <HAL_RCC_OscConfig+0x32e>
 80050e4:	4b96      	ldr	r3, [pc, #600]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	4a95      	ldr	r2, [pc, #596]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050f4:	e024      	b.n	8005140 <HAL_RCC_OscConfig+0x378>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	d110      	bne.n	8005120 <HAL_RCC_OscConfig+0x358>
 80050fe:	4b90      	ldr	r3, [pc, #576]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005104:	4a8e      	ldr	r2, [pc, #568]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005106:	f043 0304 	orr.w	r3, r3, #4
 800510a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800510e:	4b8c      	ldr	r3, [pc, #560]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005114:	4a8a      	ldr	r2, [pc, #552]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800511e:	e00f      	b.n	8005140 <HAL_RCC_OscConfig+0x378>
 8005120:	4b87      	ldr	r3, [pc, #540]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	4a86      	ldr	r2, [pc, #536]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005130:	4b83      	ldr	r3, [pc, #524]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	4a82      	ldr	r2, [pc, #520]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d016      	beq.n	8005176 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7fd f9aa 	bl	80024a0 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514e:	e00a      	b.n	8005166 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fd f9a6 	bl	80024a0 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	; 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e142      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005166:	4b76      	ldr	r3, [pc, #472]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ed      	beq.n	8005150 <HAL_RCC_OscConfig+0x388>
 8005174:	e015      	b.n	80051a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005176:	f7fd f993 	bl	80024a0 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fd f98f 	bl	80024a0 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	; 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e12b      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005194:	4b6a      	ldr	r3, [pc, #424]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ed      	bne.n	800517e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051a2:	7ffb      	ldrb	r3, [r7, #31]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a8:	4b65      	ldr	r3, [pc, #404]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ac:	4a64      	ldr	r2, [pc, #400]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d03c      	beq.n	800523a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01c      	beq.n	8005202 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051c8:	4b5d      	ldr	r3, [pc, #372]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051ce:	4a5c      	ldr	r2, [pc, #368]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fd f962 	bl	80024a0 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051e0:	f7fd f95e 	bl	80024a0 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0fc      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051f2:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0ef      	beq.n	80051e0 <HAL_RCC_OscConfig+0x418>
 8005200:	e01b      	b.n	800523a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005202:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005208:	4a4d      	ldr	r2, [pc, #308]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800520a:	f023 0301 	bic.w	r3, r3, #1
 800520e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005212:	f7fd f945 	bl	80024a0 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800521a:	f7fd f941 	bl	80024a0 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e0df      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800522c:	4b44      	ldr	r3, [pc, #272]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800522e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1ef      	bne.n	800521a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80d3 	beq.w	80053ea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005244:	4b3e      	ldr	r3, [pc, #248]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 030c 	and.w	r3, r3, #12
 800524c:	2b0c      	cmp	r3, #12
 800524e:	f000 808d 	beq.w	800536c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d15a      	bne.n	8005310 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a38      	ldr	r2, [pc, #224]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005266:	f7fd f91b 	bl	80024a0 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526e:	f7fd f917 	bl	80024a0 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e0b5      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800528c:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <HAL_RCC_OscConfig+0x580>)
 8005292:	4013      	ands	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6a11      	ldr	r1, [r2, #32]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800529c:	3a01      	subs	r2, #1
 800529e:	0112      	lsls	r2, r2, #4
 80052a0:	4311      	orrs	r1, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052a6:	0212      	lsls	r2, r2, #8
 80052a8:	4311      	orrs	r1, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052ae:	0852      	lsrs	r2, r2, #1
 80052b0:	3a01      	subs	r2, #1
 80052b2:	0552      	lsls	r2, r2, #21
 80052b4:	4311      	orrs	r1, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052ba:	0852      	lsrs	r2, r2, #1
 80052bc:	3a01      	subs	r2, #1
 80052be:	0652      	lsls	r2, r2, #25
 80052c0:	4311      	orrs	r1, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052c6:	06d2      	lsls	r2, r2, #27
 80052c8:	430a      	orrs	r2, r1
 80052ca:	491d      	ldr	r1, [pc, #116]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d0:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1a      	ldr	r2, [pc, #104]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052dc:	4b18      	ldr	r3, [pc, #96]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fd f8da 	bl	80024a0 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fd f8d6 	bl	80024a0 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e074      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005302:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x528>
 800530e:	e06c      	b.n	80053ea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800531a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800531c:	4b08      	ldr	r3, [pc, #32]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a07      	ldr	r2, [pc, #28]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800532e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005336:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fd f8b2 	bl	80024a0 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800533e:	e00e      	b.n	800535e <HAL_RCC_OscConfig+0x596>
 8005340:	40021000 	.word	0x40021000
 8005344:	40007000 	.word	0x40007000
 8005348:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534c:	f7fd f8a8 	bl	80024a0 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e046      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800535e:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_OscConfig+0x62c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x584>
 800536a:	e03e      	b.n	80053ea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e039      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005378:	4b1e      	ldr	r3, [pc, #120]	; (80053f4 <HAL_RCC_OscConfig+0x62c>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 0203 	and.w	r2, r3, #3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	429a      	cmp	r2, r3
 800538a:	d12c      	bne.n	80053e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	3b01      	subs	r3, #1
 8005398:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539a:	429a      	cmp	r2, r3
 800539c:	d123      	bne.n	80053e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d11b      	bne.n	80053e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d113      	bne.n	80053e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	085b      	lsrs	r3, r3, #1
 80053ca:	3b01      	subs	r3, #1
 80053cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d109      	bne.n	80053e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	3b01      	subs	r3, #1
 80053e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d001      	beq.n	80053ea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021000 	.word	0x40021000

080053f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e11e      	b.n	800564e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005410:	4b91      	ldr	r3, [pc, #580]	; (8005658 <HAL_RCC_ClockConfig+0x260>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d910      	bls.n	8005440 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b8e      	ldr	r3, [pc, #568]	; (8005658 <HAL_RCC_ClockConfig+0x260>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 020f 	bic.w	r2, r3, #15
 8005426:	498c      	ldr	r1, [pc, #560]	; (8005658 <HAL_RCC_ClockConfig+0x260>)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b8a      	ldr	r3, [pc, #552]	; (8005658 <HAL_RCC_ClockConfig+0x260>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e106      	b.n	800564e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d073      	beq.n	8005534 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d129      	bne.n	80054a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005454:	4b81      	ldr	r3, [pc, #516]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0f4      	b.n	800564e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005464:	f000 f99e 	bl	80057a4 <RCC_GetSysClockFreqFromPLLSource>
 8005468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4a7c      	ldr	r2, [pc, #496]	; (8005660 <HAL_RCC_ClockConfig+0x268>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d93f      	bls.n	80054f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005472:	4b7a      	ldr	r3, [pc, #488]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005486:	2b00      	cmp	r3, #0
 8005488:	d033      	beq.n	80054f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800548e:	2b00      	cmp	r3, #0
 8005490:	d12f      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005492:	4b72      	ldr	r3, [pc, #456]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800549a:	4a70      	ldr	r2, [pc, #448]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 800549c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e024      	b.n	80054f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054b0:	4b6a      	ldr	r3, [pc, #424]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0c6      	b.n	800564e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054c0:	4b66      	ldr	r3, [pc, #408]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0be      	b.n	800564e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054d0:	f000 f8ce 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 80054d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4a61      	ldr	r2, [pc, #388]	; (8005660 <HAL_RCC_ClockConfig+0x268>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d909      	bls.n	80054f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054de:	4b5f      	ldr	r3, [pc, #380]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e6:	4a5d      	ldr	r2, [pc, #372]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054f2:	4b5a      	ldr	r3, [pc, #360]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4957      	ldr	r1, [pc, #348]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005504:	f7fc ffcc 	bl	80024a0 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	e00a      	b.n	8005522 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550c:	f7fc ffc8 	bl	80024a0 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e095      	b.n	800564e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	4b4e      	ldr	r3, [pc, #312]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 020c 	and.w	r2, r3, #12
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	429a      	cmp	r2, r3
 8005532:	d1eb      	bne.n	800550c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d023      	beq.n	8005588 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800554c:	4b43      	ldr	r3, [pc, #268]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	4a42      	ldr	r2, [pc, #264]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005556:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005564:	4b3d      	ldr	r3, [pc, #244]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800556c:	4a3b      	ldr	r2, [pc, #236]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 800556e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005574:	4b39      	ldr	r3, [pc, #228]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4936      	ldr	r1, [pc, #216]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
 8005586:	e008      	b.n	800559a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d105      	bne.n	800559a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800558e:	4b33      	ldr	r3, [pc, #204]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	4a32      	ldr	r2, [pc, #200]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005598:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800559a:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <HAL_RCC_ClockConfig+0x260>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d21d      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a8:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <HAL_RCC_ClockConfig+0x260>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 020f 	bic.w	r2, r3, #15
 80055b0:	4929      	ldr	r1, [pc, #164]	; (8005658 <HAL_RCC_ClockConfig+0x260>)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055b8:	f7fc ff72 	bl	80024a0 <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c0:	f7fc ff6e 	bl	80024a0 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e03b      	b.n	800564e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <HAL_RCC_ClockConfig+0x260>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d1ed      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4917      	ldr	r1, [pc, #92]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	490f      	ldr	r1, [pc, #60]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005622:	f000 f825 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 8005626:	4601      	mov	r1, r0
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <HAL_RCC_ClockConfig+0x264>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <HAL_RCC_ClockConfig+0x26c>)
 8005634:	5cd3      	ldrb	r3, [r2, r3]
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	fa21 f303 	lsr.w	r3, r1, r3
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <HAL_RCC_ClockConfig+0x270>)
 8005640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <HAL_RCC_ClockConfig+0x274>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7fc fede 	bl	8002408 <HAL_InitTick>
 800564c:	4603      	mov	r3, r0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40022000 	.word	0x40022000
 800565c:	40021000 	.word	0x40021000
 8005660:	04c4b400 	.word	0x04c4b400
 8005664:	080083f4 	.word	0x080083f4
 8005668:	20000000 	.word	0x20000000
 800566c:	20000004 	.word	0x20000004

08005670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005676:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b04      	cmp	r3, #4
 8005680:	d102      	bne.n	8005688 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005682:	4b2a      	ldr	r3, [pc, #168]	; (800572c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e047      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005688:	4b27      	ldr	r3, [pc, #156]	; (8005728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b08      	cmp	r3, #8
 8005692:	d102      	bne.n	800569a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005694:	4b26      	ldr	r3, [pc, #152]	; (8005730 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	e03e      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800569a:	4b23      	ldr	r3, [pc, #140]	; (8005728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	2b0c      	cmp	r3, #12
 80056a4:	d136      	bne.n	8005714 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056a6:	4b20      	ldr	r3, [pc, #128]	; (8005728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056b0:	4b1d      	ldr	r3, [pc, #116]	; (8005728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	3301      	adds	r3, #1
 80056bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d10c      	bne.n	80056de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056c4:	4a1a      	ldr	r2, [pc, #104]	; (8005730 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	4a16      	ldr	r2, [pc, #88]	; (8005728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ce:	68d2      	ldr	r2, [r2, #12]
 80056d0:	0a12      	lsrs	r2, r2, #8
 80056d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	617b      	str	r3, [r7, #20]
      break;
 80056dc:	e00c      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056de:	4a13      	ldr	r2, [pc, #76]	; (800572c <HAL_RCC_GetSysClockFreq+0xbc>)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	4a10      	ldr	r2, [pc, #64]	; (8005728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056e8:	68d2      	ldr	r2, [r2, #12]
 80056ea:	0a12      	lsrs	r2, r2, #8
 80056ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]
      break;
 80056f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	0e5b      	lsrs	r3, r3, #25
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	3301      	adds	r3, #1
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	e001      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005718:	693b      	ldr	r3, [r7, #16]
}
 800571a:	4618      	mov	r0, r3
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000
 800572c:	00f42400 	.word	0x00f42400
 8005730:	007a1200 	.word	0x007a1200

08005734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <HAL_RCC_GetHCLKFreq+0x14>)
 800573a:	681b      	ldr	r3, [r3, #0]
}
 800573c:	4618      	mov	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000000 	.word	0x20000000

0800574c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005750:	f7ff fff0 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005754:	4601      	mov	r1, r0
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4a04      	ldr	r2, [pc, #16]	; (8005774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005762:	5cd3      	ldrb	r3, [r2, r3]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000
 8005774:	08008404 	.word	0x08008404

08005778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800577c:	f7ff ffda 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005780:	4601      	mov	r1, r0
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	0adb      	lsrs	r3, r3, #11
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800578e:	5cd3      	ldrb	r3, [r2, r3]
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005798:	4618      	mov	r0, r3
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40021000 	.word	0x40021000
 80057a0:	08008404 	.word	0x08008404

080057a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057aa:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	3301      	adds	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d10c      	bne.n	80057e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057c8:	4a17      	ldr	r2, [pc, #92]	; (8005828 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	4a14      	ldr	r2, [pc, #80]	; (8005824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057d2:	68d2      	ldr	r2, [r2, #12]
 80057d4:	0a12      	lsrs	r2, r2, #8
 80057d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	617b      	str	r3, [r7, #20]
    break;
 80057e0:	e00c      	b.n	80057fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	4a0e      	ldr	r2, [pc, #56]	; (8005824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ec:	68d2      	ldr	r2, [r2, #12]
 80057ee:	0a12      	lsrs	r2, r2, #8
 80057f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057f4:	fb02 f303 	mul.w	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]
    break;
 80057fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057fc:	4b09      	ldr	r3, [pc, #36]	; (8005824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	0e5b      	lsrs	r3, r3, #25
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	3301      	adds	r3, #1
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005816:	687b      	ldr	r3, [r7, #4]
}
 8005818:	4618      	mov	r0, r3
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40021000 	.word	0x40021000
 8005828:	007a1200 	.word	0x007a1200
 800582c:	00f42400 	.word	0x00f42400

08005830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005838:	2300      	movs	r3, #0
 800583a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800583c:	2300      	movs	r3, #0
 800583e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8098 	beq.w	800597e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800584e:	2300      	movs	r3, #0
 8005850:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005852:	4b43      	ldr	r3, [pc, #268]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	4b40      	ldr	r3, [pc, #256]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	4a3f      	ldr	r2, [pc, #252]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	6593      	str	r3, [r2, #88]	; 0x58
 800586a:	4b3d      	ldr	r3, [pc, #244]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005876:	2301      	movs	r3, #1
 8005878:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800587a:	4b3a      	ldr	r3, [pc, #232]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a39      	ldr	r2, [pc, #228]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005886:	f7fc fe0b 	bl	80024a0 <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800588c:	e009      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588e:	f7fc fe07 	bl	80024a0 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d902      	bls.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	74fb      	strb	r3, [r7, #19]
        break;
 80058a0:	e005      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a2:	4b30      	ldr	r3, [pc, #192]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0ef      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80058ae:	7cfb      	ldrb	r3, [r7, #19]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d159      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058b4:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01e      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d019      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058d0:	4b23      	ldr	r3, [pc, #140]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058dc:	4b20      	ldr	r3, [pc, #128]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ec:	4b1c      	ldr	r3, [pc, #112]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590e:	f7fc fdc7 	bl	80024a0 <HAL_GetTick>
 8005912:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005914:	e00b      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fc fdc3 	bl	80024a0 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f241 3288 	movw	r2, #5000	; 0x1388
 8005924:	4293      	cmp	r3, r2
 8005926:	d902      	bls.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	74fb      	strb	r3, [r7, #19]
            break;
 800592c:	e006      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592e:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0ec      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800593c:	7cfb      	ldrb	r3, [r7, #19]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10b      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005942:	4b07      	ldr	r3, [pc, #28]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	4903      	ldr	r1, [pc, #12]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005958:	e008      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800595a:	7cfb      	ldrb	r3, [r7, #19]
 800595c:	74bb      	strb	r3, [r7, #18]
 800595e:	e005      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005960:	40021000 	.word	0x40021000
 8005964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800596c:	7c7b      	ldrb	r3, [r7, #17]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d105      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005972:	4ba6      	ldr	r3, [pc, #664]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	4aa5      	ldr	r2, [pc, #660]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800598a:	4ba0      	ldr	r3, [pc, #640]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f023 0203 	bic.w	r2, r3, #3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	499c      	ldr	r1, [pc, #624]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ac:	4b97      	ldr	r3, [pc, #604]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f023 020c 	bic.w	r2, r3, #12
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	4994      	ldr	r1, [pc, #592]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ce:	4b8f      	ldr	r3, [pc, #572]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	498b      	ldr	r1, [pc, #556]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059f0:	4b86      	ldr	r3, [pc, #536]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	4983      	ldr	r1, [pc, #524]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a12:	4b7e      	ldr	r3, [pc, #504]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	497a      	ldr	r1, [pc, #488]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a34:	4b75      	ldr	r3, [pc, #468]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	4972      	ldr	r1, [pc, #456]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a56:	4b6d      	ldr	r3, [pc, #436]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	4969      	ldr	r1, [pc, #420]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a78:	4b64      	ldr	r3, [pc, #400]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4961      	ldr	r1, [pc, #388]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a9a:	4b5c      	ldr	r3, [pc, #368]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	4958      	ldr	r1, [pc, #352]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d015      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005abc:	4b53      	ldr	r3, [pc, #332]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	4950      	ldr	r1, [pc, #320]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ada:	d105      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005adc:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a4a      	ldr	r2, [pc, #296]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ae6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005af4:	4b45      	ldr	r3, [pc, #276]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	4942      	ldr	r1, [pc, #264]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b12:	d105      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b14:	4b3d      	ldr	r3, [pc, #244]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a3c      	ldr	r2, [pc, #240]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d015      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b2c:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	4934      	ldr	r1, [pc, #208]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b4a:	d105      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d015      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b64:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	4926      	ldr	r1, [pc, #152]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b82:	d105      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b84:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d015      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	4918      	ldr	r1, [pc, #96]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bba:	d105      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bbc:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a12      	ldr	r2, [pc, #72]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d015      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bd4:	4b0d      	ldr	r3, [pc, #52]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be2:	490a      	ldr	r1, [pc, #40]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf2:	d105      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c00:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40021000 	.word	0x40021000

08005c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e049      	b.n	8005cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fc f9f2 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f000 fc2a 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e049      	b.n	8005d64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f841 	bl	8005d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f000 fbd3 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d122      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d11b      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0202 	mvn.w	r2, #2
 8005dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fb52 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fb44 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fb55 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d122      	bne.n	8005e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d11b      	bne.n	8005e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0204 	mvn.w	r2, #4
 8005e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fb28 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fb1a 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fb2b 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d122      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d11b      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0208 	mvn.w	r2, #8
 8005e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fafe 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 faf0 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fb01 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d122      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d11b      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0210 	mvn.w	r2, #16
 8005ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2208      	movs	r2, #8
 8005eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fad4 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fac6 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fad7 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d10e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0201 	mvn.w	r2, #1
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 faa0 	bl	8006444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d10e      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1c:	2b80      	cmp	r3, #128	; 0x80
 8005f1e:	d107      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 ff6a 	bl	8006e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3e:	d10e      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	d107      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ff5d 	bl	8006e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d10e      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d107      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa85 	bl	8006494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d10e      	bne.n	8005fb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d107      	bne.n	8005fb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f06f 0220 	mvn.w	r2, #32
 8005fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 ff1d 	bl	8006df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc4:	d10f      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd4:	d107      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 ff23 	bl	8006e2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ff0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff4:	d10f      	bne.n	8006016 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006004:	d107      	bne.n	8006016 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800600e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 ff15 	bl	8006e40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006024:	d10f      	bne.n	8006046 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006034:	d107      	bne.n	8006046 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800603e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 ff07 	bl	8006e54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006050:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006054:	d10f      	bne.n	8006076 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006064:	d107      	bne.n	8006076 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800606e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fef9 	bl	8006e68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006096:	2302      	movs	r3, #2
 8006098:	e0fd      	b.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x216>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b14      	cmp	r3, #20
 80060a6:	f200 80f0 	bhi.w	800628a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	08006105 	.word	0x08006105
 80060b4:	0800628b 	.word	0x0800628b
 80060b8:	0800628b 	.word	0x0800628b
 80060bc:	0800628b 	.word	0x0800628b
 80060c0:	08006145 	.word	0x08006145
 80060c4:	0800628b 	.word	0x0800628b
 80060c8:	0800628b 	.word	0x0800628b
 80060cc:	0800628b 	.word	0x0800628b
 80060d0:	08006187 	.word	0x08006187
 80060d4:	0800628b 	.word	0x0800628b
 80060d8:	0800628b 	.word	0x0800628b
 80060dc:	0800628b 	.word	0x0800628b
 80060e0:	080061c7 	.word	0x080061c7
 80060e4:	0800628b 	.word	0x0800628b
 80060e8:	0800628b 	.word	0x0800628b
 80060ec:	0800628b 	.word	0x0800628b
 80060f0:	08006209 	.word	0x08006209
 80060f4:	0800628b 	.word	0x0800628b
 80060f8:	0800628b 	.word	0x0800628b
 80060fc:	0800628b 	.word	0x0800628b
 8006100:	08006249 	.word	0x08006249
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fa5c 	bl	80065c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0208 	orr.w	r2, r2, #8
 800611e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0204 	bic.w	r2, r2, #4
 800612e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6999      	ldr	r1, [r3, #24]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	619a      	str	r2, [r3, #24]
      break;
 8006142:	e0a3      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 facc 	bl	80066e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800615e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6999      	ldr	r1, [r3, #24]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	021a      	lsls	r2, r3, #8
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	619a      	str	r2, [r3, #24]
      break;
 8006184:	e082      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fb35 	bl	80067fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0208 	orr.w	r2, r2, #8
 80061a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0204 	bic.w	r2, r2, #4
 80061b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69d9      	ldr	r1, [r3, #28]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	61da      	str	r2, [r3, #28]
      break;
 80061c4:	e062      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fb9d 	bl	800690c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69d9      	ldr	r1, [r3, #28]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	021a      	lsls	r2, r3, #8
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	61da      	str	r2, [r3, #28]
      break;
 8006206:	e041      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fc06 	bl	8006a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0208 	orr.w	r2, r2, #8
 8006222:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0204 	bic.w	r2, r2, #4
 8006232:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006246:	e021      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fc4a 	bl	8006ae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006262:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006272:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	021a      	lsls	r2, r3, #8
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006288:	e000      	b.n	800628c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800628a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop

080062a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_ConfigClockSource+0x18>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e0b9      	b.n	800642c <HAL_TIM_ConfigClockSource+0x18c>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80062d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b70      	cmp	r3, #112	; 0x70
 80062f2:	d02e      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0xb2>
 80062f4:	2b70      	cmp	r3, #112	; 0x70
 80062f6:	d812      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x7e>
 80062f8:	2b30      	cmp	r3, #48	; 0x30
 80062fa:	f000 8084 	beq.w	8006406 <HAL_TIM_ConfigClockSource+0x166>
 80062fe:	2b30      	cmp	r3, #48	; 0x30
 8006300:	d806      	bhi.n	8006310 <HAL_TIM_ConfigClockSource+0x70>
 8006302:	2b10      	cmp	r3, #16
 8006304:	d07f      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
 8006306:	2b20      	cmp	r3, #32
 8006308:	d07d      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d07b      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800630e:	e084      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8006310:	2b50      	cmp	r3, #80	; 0x50
 8006312:	d048      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x106>
 8006314:	2b60      	cmp	r3, #96	; 0x60
 8006316:	d056      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x126>
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d064      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x146>
      break;
 800631c:	e07d      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800631e:	4a45      	ldr	r2, [pc, #276]	; (8006434 <HAL_TIM_ConfigClockSource+0x194>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d070      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
 8006324:	4a43      	ldr	r2, [pc, #268]	; (8006434 <HAL_TIM_ConfigClockSource+0x194>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d809      	bhi.n	800633e <HAL_TIM_ConfigClockSource+0x9e>
 800632a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632e:	d027      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0xe0>
 8006330:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006334:	d067      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d06d      	beq.n	8006418 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800633c:	e06d      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800633e:	4a3e      	ldr	r2, [pc, #248]	; (8006438 <HAL_TIM_ConfigClockSource+0x198>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d060      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
 8006344:	4a3d      	ldr	r2, [pc, #244]	; (800643c <HAL_TIM_ConfigClockSource+0x19c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d05d      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
 800634a:	4a3d      	ldr	r2, [pc, #244]	; (8006440 <HAL_TIM_ConfigClockSource+0x1a0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d05a      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8006350:	e063      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6899      	ldr	r1, [r3, #8]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f000 fca3 	bl	8006cac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006374:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	609a      	str	r2, [r3, #8]
      break;
 800637e:	e04c      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6899      	ldr	r1, [r3, #8]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f000 fc8c 	bl	8006cac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a2:	609a      	str	r2, [r3, #8]
      break;
 80063a4:	e039      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 fbfe 	bl	8006bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2150      	movs	r1, #80	; 0x50
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fc57 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 80063c4:	e029      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 fc1d 	bl	8006c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2160      	movs	r1, #96	; 0x60
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fc47 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 80063e4:	e019      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 fbde 	bl	8006bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2140      	movs	r1, #64	; 0x40
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fc37 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 8006404:	e009      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f000 fc2e 	bl	8006c72 <TIM_ITRx_SetConfig>
        break;
 8006416:	e000      	b.n	800641a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8006418:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	00100020 	.word	0x00100020
 8006438:	00100040 	.word	0x00100040
 800643c:	00100070 	.word	0x00100070
 8006440:	00100030 	.word	0x00100030

08006444 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a3c      	ldr	r2, [pc, #240]	; (80065ac <TIM_Base_SetConfig+0x104>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00f      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c6:	d00b      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a39      	ldr	r2, [pc, #228]	; (80065b0 <TIM_Base_SetConfig+0x108>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a38      	ldr	r2, [pc, #224]	; (80065b4 <TIM_Base_SetConfig+0x10c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a37      	ldr	r2, [pc, #220]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d108      	bne.n	80064f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2d      	ldr	r2, [pc, #180]	; (80065ac <TIM_Base_SetConfig+0x104>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01b      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006500:	d017      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <TIM_Base_SetConfig+0x108>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <TIM_Base_SetConfig+0x10c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a28      	ldr	r2, [pc, #160]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a27      	ldr	r2, [pc, #156]	; (80065bc <TIM_Base_SetConfig+0x114>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <TIM_Base_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <TIM_Base_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d108      	bne.n	8006544 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a10      	ldr	r2, [pc, #64]	; (80065ac <TIM_Base_SetConfig+0x104>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a10      	ldr	r2, [pc, #64]	; (80065bc <TIM_Base_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <TIM_Base_SetConfig+0x118>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <TIM_Base_SetConfig+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d103      	bne.n	8006598 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	615a      	str	r2, [r3, #20]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40013400 	.word	0x40013400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <TIM_OC1_SetConfig+0x10c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a2b      	ldr	r2, [pc, #172]	; (80066d8 <TIM_OC1_SetConfig+0x110>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <TIM_OC1_SetConfig+0x114>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <TIM_OC1_SetConfig+0x118>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10c      	bne.n	8006662 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0308 	bic.w	r3, r3, #8
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <TIM_OC1_SetConfig+0x10c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <TIM_OC1_SetConfig+0x110>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <TIM_OC1_SetConfig+0x114>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <TIM_OC1_SetConfig+0x118>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40013400 	.word	0x40013400
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f023 0210 	bic.w	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0320 	bic.w	r3, r3, #32
 8006736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a28      	ldr	r2, [pc, #160]	; (80067e8 <TIM_OC2_SetConfig+0x100>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_OC2_SetConfig+0x6c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <TIM_OC2_SetConfig+0x104>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10d      	bne.n	8006770 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <TIM_OC2_SetConfig+0x100>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00f      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <TIM_OC2_SetConfig+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00b      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <TIM_OC2_SetConfig+0x108>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <TIM_OC2_SetConfig+0x10c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <TIM_OC2_SetConfig+0x110>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d113      	bne.n	80067c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800679e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800

080067fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <TIM_OC3_SetConfig+0xfc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x6a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a26      	ldr	r2, [pc, #152]	; (80068fc <TIM_OC3_SetConfig+0x100>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d10d      	bne.n	8006882 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800686c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1c      	ldr	r2, [pc, #112]	; (80068f8 <TIM_OC3_SetConfig+0xfc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00f      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <TIM_OC3_SetConfig+0x100>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00b      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <TIM_OC3_SetConfig+0x104>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d007      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <TIM_OC3_SetConfig+0x108>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d003      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a18      	ldr	r2, [pc, #96]	; (8006908 <TIM_OC3_SetConfig+0x10c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d113      	bne.n	80068d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40013400 	.word	0x40013400
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800695a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a28      	ldr	r2, [pc, #160]	; (8006a0c <TIM_OC4_SetConfig+0x100>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC4_SetConfig+0x6c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <TIM_OC4_SetConfig+0x104>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d10d      	bne.n	8006994 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800697e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	031b      	lsls	r3, r3, #12
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <TIM_OC4_SetConfig+0x100>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00f      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <TIM_OC4_SetConfig+0x104>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00b      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a1b      	ldr	r2, [pc, #108]	; (8006a14 <TIM_OC4_SetConfig+0x108>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a1a      	ldr	r2, [pc, #104]	; (8006a18 <TIM_OC4_SetConfig+0x10c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <TIM_OC4_SetConfig+0x110>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d113      	bne.n	80069e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	019b      	lsls	r3, r3, #6
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40013400 	.word	0x40013400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800

08006a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <TIM_OC5_SetConfig+0xb4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00f      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a16      	ldr	r2, [pc, #88]	; (8006ad8 <TIM_OC5_SetConfig+0xb8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00b      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a15      	ldr	r2, [pc, #84]	; (8006adc <TIM_OC5_SetConfig+0xbc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d007      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <TIM_OC5_SetConfig+0xc0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <TIM_OC5_SetConfig+0xc4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d109      	bne.n	8006aae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40013400 	.word	0x40013400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800

08006ae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <TIM_OC6_SetConfig+0xb8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <TIM_OC6_SetConfig+0xbc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a16      	ldr	r2, [pc, #88]	; (8006ba8 <TIM_OC6_SetConfig+0xc0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a15      	ldr	r2, [pc, #84]	; (8006bac <TIM_OC6_SetConfig+0xc4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a14      	ldr	r2, [pc, #80]	; (8006bb0 <TIM_OC6_SetConfig+0xc8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d109      	bne.n	8006b78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	029b      	lsls	r3, r3, #10
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40013400 	.word	0x40013400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800

08006bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 030a 	bic.w	r3, r3, #10
 8006bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b087      	sub	sp, #28
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f023 0210 	bic.w	r2, r3, #16
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	031b      	lsls	r3, r3, #12
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f043 0307 	orr.w	r3, r3, #7
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	609a      	str	r2, [r3, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e065      	b.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2b      	ldr	r2, [pc, #172]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d108      	bne.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d018      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7a:	d013      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a18      	ldr	r2, [pc, #96]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a13      	ldr	r2, [pc, #76]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d10c      	bne.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40013400 	.word	0x40013400
 8006de4:	40000400 	.word	0x40000400
 8006de8:	40000800 	.word	0x40000800
 8006dec:	40014000 	.word	0x40014000

08006df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e042      	b.n	8006f14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fb f92f 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2224      	movs	r2, #36	; 0x24
 8006eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0201 	bic.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fad2 	bl	8007468 <UART_SetConfig>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e022      	b.n	8006f14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fd6e 	bl	80079b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fdf5 	bl	8007afc <UART_CheckIdleState>
 8006f12:	4603      	mov	r3, r0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d168      	bne.n	8007006 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <HAL_UART_Transmit_DMA+0x24>
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e061      	b.n	8007008 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Transmit_DMA+0x36>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e05a      	b.n	8007008 <HAL_UART_Transmit_DMA+0xec>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	88fa      	ldrh	r2, [r7, #6]
 8006f64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	88fa      	ldrh	r2, [r7, #6]
 8006f6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2221      	movs	r2, #33	; 0x21
 8006f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d02c      	beq.n	8006fe2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f8c:	4a20      	ldr	r2, [pc, #128]	; (8007010 <HAL_UART_Transmit_DMA+0xf4>)
 8006f8e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f94:	4a1f      	ldr	r2, [pc, #124]	; (8007014 <HAL_UART_Transmit_DMA+0xf8>)
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9c:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <HAL_UART_Transmit_DMA+0xfc>)
 8006f9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3328      	adds	r3, #40	; 0x28
 8006fb8:	461a      	mov	r2, r3
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	f7fc ff2e 	bl	8003e1c <HAL_DMA_Start_IT>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00d      	beq.n	8006fe2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2210      	movs	r2, #16
 8006fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e012      	b.n	8007008 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2240      	movs	r2, #64	; 0x40
 8006fe8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007000:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	e000      	b.n	8007008 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8007006:	2302      	movs	r3, #2
  }
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	08007d0f 	.word	0x08007d0f
 8007014:	08007d63 	.word	0x08007d63
 8007018:	08007e05 	.word	0x08007e05

0800701c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007030:	2b20      	cmp	r3, #32
 8007032:	d170      	bne.n	8007116 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_UART_Receive_DMA+0x24>
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e069      	b.n	8007118 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_UART_Receive_DMA+0x36>
 800704e:	2302      	movs	r3, #2
 8007050:	e062      	b.n	8007118 <HAL_UART_Receive_DMA+0xfc>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2222      	movs	r2, #34	; 0x22
 8007074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800707c:	2b00      	cmp	r3, #0
 800707e:	d02c      	beq.n	80070da <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007084:	4a26      	ldr	r2, [pc, #152]	; (8007120 <HAL_UART_Receive_DMA+0x104>)
 8007086:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800708c:	4a25      	ldr	r2, [pc, #148]	; (8007124 <HAL_UART_Receive_DMA+0x108>)
 800708e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007094:	4a24      	ldr	r2, [pc, #144]	; (8007128 <HAL_UART_Receive_DMA+0x10c>)
 8007096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800709c:	2200      	movs	r2, #0
 800709e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3324      	adds	r3, #36	; 0x24
 80070aa:	4619      	mov	r1, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	461a      	mov	r2, r3
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	f7fc feb2 	bl	8003e1c <HAL_DMA_Start_IT>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2210      	movs	r2, #16
 80070c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e01e      	b.n	8007118 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0201 	orr.w	r2, r2, #1
 8007100:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007110:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e000      	b.n	8007118 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8007116:	2302      	movs	r3, #2
  }
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	08007d7f 	.word	0x08007d7f
 8007124:	08007de9 	.word	0x08007de9
 8007128:	08007e05 	.word	0x08007e05

0800712c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007152:	4013      	ands	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d118      	bne.n	800718e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d013      	beq.n	800718e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 8145 	beq.w	800740e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
      }
      return;
 800718c:	e13f      	b.n	800740e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80e8 	beq.w	8007366 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4ba1      	ldr	r3, [pc, #644]	; (8007420 <HAL_UART_IRQHandler+0x2f4>)
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	4ba0      	ldr	r3, [pc, #640]	; (8007424 <HAL_UART_IRQHandler+0x2f8>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80dd 	beq.w	8007366 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d010      	beq.n	80071d8 <HAL_UART_IRQHandler+0xac>
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2201      	movs	r2, #1
 80071c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ce:	f043 0201 	orr.w	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d010      	beq.n	8007204 <HAL_UART_IRQHandler+0xd8>
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2202      	movs	r2, #2
 80071f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fa:	f043 0204 	orr.w	r2, r3, #4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	d010      	beq.n	8007230 <HAL_UART_IRQHandler+0x104>
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2204      	movs	r2, #4
 800721e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007226:	f043 0202 	orr.w	r2, r3, #2
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d015      	beq.n	8007266 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4b76      	ldr	r3, [pc, #472]	; (8007420 <HAL_UART_IRQHandler+0x2f4>)
 8007248:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2208      	movs	r2, #8
 8007254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725c:	f043 0208 	orr.w	r2, r3, #8
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800726c:	2b00      	cmp	r3, #0
 800726e:	d011      	beq.n	8007294 <HAL_UART_IRQHandler+0x168>
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728a:	f043 0220 	orr.w	r2, r3, #32
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 80b9 	beq.w	8007412 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d004      	beq.n	80072ee <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d031      	beq.n	8007352 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fcea 	bl	8007cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fe:	2b40      	cmp	r3, #64	; 0x40
 8007300:	d123      	bne.n	800734a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007310:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007316:	2b00      	cmp	r3, #0
 8007318:	d013      	beq.n	8007342 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800731e:	4a42      	ldr	r2, [pc, #264]	; (8007428 <HAL_UART_IRQHandler+0x2fc>)
 8007320:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007326:	4618      	mov	r0, r3
 8007328:	f7fc fdf3 	bl	8003f12 <HAL_DMA_Abort_IT>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d017      	beq.n	8007362 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007340:	e00f      	b.n	8007362 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fa fa8c 	bl	8001860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007348:	e00b      	b.n	8007362 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7fa fa88 	bl	8001860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007350:	e007      	b.n	8007362 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fa fa84 	bl	8001860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007360:	e057      	b.n	8007412 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007362:	bf00      	nop
    return;
 8007364:	e055      	b.n	8007412 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <HAL_UART_IRQHandler+0x260>
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d008      	beq.n	800738c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fdad 	bl	8007ee4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800738a:	e045      	b.n	8007418 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007392:	2b00      	cmp	r3, #0
 8007394:	d012      	beq.n	80073bc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d031      	beq.n	8007416 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
    }
    return;
 80073ba:	e02c      	b.n	8007416 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d008      	beq.n	80073d8 <HAL_UART_IRQHandler+0x2ac>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fd6d 	bl	8007eb0 <UART_EndTransmit_IT>
    return;
 80073d6:	e01f      	b.n	8007418 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d008      	beq.n	80073f4 <HAL_UART_IRQHandler+0x2c8>
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fd8d 	bl	8007f0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073f2:	e011      	b.n	8007418 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00c      	beq.n	8007418 <HAL_UART_IRQHandler+0x2ec>
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	da09      	bge.n	8007418 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fd77 	bl	8007ef8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800740a:	bf00      	nop
 800740c:	e004      	b.n	8007418 <HAL_UART_IRQHandler+0x2ec>
      return;
 800740e:	bf00      	nop
 8007410:	e002      	b.n	8007418 <HAL_UART_IRQHandler+0x2ec>
    return;
 8007412:	bf00      	nop
 8007414:	e000      	b.n	8007418 <HAL_UART_IRQHandler+0x2ec>
    return;
 8007416:	bf00      	nop
  }
}
 8007418:	3720      	adds	r7, #32
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	10000001 	.word	0x10000001
 8007424:	04000120 	.word	0x04000120
 8007428:	08007e85 	.word	0x08007e85

0800742c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007468:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800746c:	b088      	sub	sp, #32
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	4313      	orrs	r3, r2
 800748c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	4313      	orrs	r3, r2
 8007496:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4bb0      	ldr	r3, [pc, #704]	; (8007760 <UART_SetConfig+0x2f8>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	69f9      	ldr	r1, [r7, #28]
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4aa5      	ldr	r2, [pc, #660]	; (8007764 <UART_SetConfig+0x2fc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	4313      	orrs	r3, r2
 80074da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80074e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	69f9      	ldr	r1, [r7, #28]
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	f023 010f 	bic.w	r1, r3, #15
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a96      	ldr	r2, [pc, #600]	; (8007768 <UART_SetConfig+0x300>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d121      	bne.n	8007558 <UART_SetConfig+0xf0>
 8007514:	4b95      	ldr	r3, [pc, #596]	; (800776c <UART_SetConfig+0x304>)
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b03      	cmp	r3, #3
 8007520:	d816      	bhi.n	8007550 <UART_SetConfig+0xe8>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <UART_SetConfig+0xc0>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007539 	.word	0x08007539
 800752c:	08007545 	.word	0x08007545
 8007530:	0800753f 	.word	0x0800753f
 8007534:	0800754b 	.word	0x0800754b
 8007538:	2301      	movs	r3, #1
 800753a:	76fb      	strb	r3, [r7, #27]
 800753c:	e0be      	b.n	80076bc <UART_SetConfig+0x254>
 800753e:	2302      	movs	r3, #2
 8007540:	76fb      	strb	r3, [r7, #27]
 8007542:	e0bb      	b.n	80076bc <UART_SetConfig+0x254>
 8007544:	2304      	movs	r3, #4
 8007546:	76fb      	strb	r3, [r7, #27]
 8007548:	e0b8      	b.n	80076bc <UART_SetConfig+0x254>
 800754a:	2308      	movs	r3, #8
 800754c:	76fb      	strb	r3, [r7, #27]
 800754e:	e0b5      	b.n	80076bc <UART_SetConfig+0x254>
 8007550:	2310      	movs	r3, #16
 8007552:	76fb      	strb	r3, [r7, #27]
 8007554:	bf00      	nop
 8007556:	e0b1      	b.n	80076bc <UART_SetConfig+0x254>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a84      	ldr	r2, [pc, #528]	; (8007770 <UART_SetConfig+0x308>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d134      	bne.n	80075cc <UART_SetConfig+0x164>
 8007562:	4b82      	ldr	r3, [pc, #520]	; (800776c <UART_SetConfig+0x304>)
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007568:	f003 030c 	and.w	r3, r3, #12
 800756c:	2b0c      	cmp	r3, #12
 800756e:	d829      	bhi.n	80075c4 <UART_SetConfig+0x15c>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0x110>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	080075ad 	.word	0x080075ad
 800757c:	080075c5 	.word	0x080075c5
 8007580:	080075c5 	.word	0x080075c5
 8007584:	080075c5 	.word	0x080075c5
 8007588:	080075b9 	.word	0x080075b9
 800758c:	080075c5 	.word	0x080075c5
 8007590:	080075c5 	.word	0x080075c5
 8007594:	080075c5 	.word	0x080075c5
 8007598:	080075b3 	.word	0x080075b3
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075c5 	.word	0x080075c5
 80075a8:	080075bf 	.word	0x080075bf
 80075ac:	2300      	movs	r3, #0
 80075ae:	76fb      	strb	r3, [r7, #27]
 80075b0:	e084      	b.n	80076bc <UART_SetConfig+0x254>
 80075b2:	2302      	movs	r3, #2
 80075b4:	76fb      	strb	r3, [r7, #27]
 80075b6:	e081      	b.n	80076bc <UART_SetConfig+0x254>
 80075b8:	2304      	movs	r3, #4
 80075ba:	76fb      	strb	r3, [r7, #27]
 80075bc:	e07e      	b.n	80076bc <UART_SetConfig+0x254>
 80075be:	2308      	movs	r3, #8
 80075c0:	76fb      	strb	r3, [r7, #27]
 80075c2:	e07b      	b.n	80076bc <UART_SetConfig+0x254>
 80075c4:	2310      	movs	r3, #16
 80075c6:	76fb      	strb	r3, [r7, #27]
 80075c8:	bf00      	nop
 80075ca:	e077      	b.n	80076bc <UART_SetConfig+0x254>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a68      	ldr	r2, [pc, #416]	; (8007774 <UART_SetConfig+0x30c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d120      	bne.n	8007618 <UART_SetConfig+0x1b0>
 80075d6:	4b65      	ldr	r3, [pc, #404]	; (800776c <UART_SetConfig+0x304>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075e0:	2b10      	cmp	r3, #16
 80075e2:	d00f      	beq.n	8007604 <UART_SetConfig+0x19c>
 80075e4:	2b10      	cmp	r3, #16
 80075e6:	d802      	bhi.n	80075ee <UART_SetConfig+0x186>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <UART_SetConfig+0x190>
 80075ec:	e010      	b.n	8007610 <UART_SetConfig+0x1a8>
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d005      	beq.n	80075fe <UART_SetConfig+0x196>
 80075f2:	2b30      	cmp	r3, #48	; 0x30
 80075f4:	d009      	beq.n	800760a <UART_SetConfig+0x1a2>
 80075f6:	e00b      	b.n	8007610 <UART_SetConfig+0x1a8>
 80075f8:	2300      	movs	r3, #0
 80075fa:	76fb      	strb	r3, [r7, #27]
 80075fc:	e05e      	b.n	80076bc <UART_SetConfig+0x254>
 80075fe:	2302      	movs	r3, #2
 8007600:	76fb      	strb	r3, [r7, #27]
 8007602:	e05b      	b.n	80076bc <UART_SetConfig+0x254>
 8007604:	2304      	movs	r3, #4
 8007606:	76fb      	strb	r3, [r7, #27]
 8007608:	e058      	b.n	80076bc <UART_SetConfig+0x254>
 800760a:	2308      	movs	r3, #8
 800760c:	76fb      	strb	r3, [r7, #27]
 800760e:	e055      	b.n	80076bc <UART_SetConfig+0x254>
 8007610:	2310      	movs	r3, #16
 8007612:	76fb      	strb	r3, [r7, #27]
 8007614:	bf00      	nop
 8007616:	e051      	b.n	80076bc <UART_SetConfig+0x254>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a56      	ldr	r2, [pc, #344]	; (8007778 <UART_SetConfig+0x310>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d120      	bne.n	8007664 <UART_SetConfig+0x1fc>
 8007622:	4b52      	ldr	r3, [pc, #328]	; (800776c <UART_SetConfig+0x304>)
 8007624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007628:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800762c:	2b40      	cmp	r3, #64	; 0x40
 800762e:	d00f      	beq.n	8007650 <UART_SetConfig+0x1e8>
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d802      	bhi.n	800763a <UART_SetConfig+0x1d2>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <UART_SetConfig+0x1dc>
 8007638:	e010      	b.n	800765c <UART_SetConfig+0x1f4>
 800763a:	2b80      	cmp	r3, #128	; 0x80
 800763c:	d005      	beq.n	800764a <UART_SetConfig+0x1e2>
 800763e:	2bc0      	cmp	r3, #192	; 0xc0
 8007640:	d009      	beq.n	8007656 <UART_SetConfig+0x1ee>
 8007642:	e00b      	b.n	800765c <UART_SetConfig+0x1f4>
 8007644:	2300      	movs	r3, #0
 8007646:	76fb      	strb	r3, [r7, #27]
 8007648:	e038      	b.n	80076bc <UART_SetConfig+0x254>
 800764a:	2302      	movs	r3, #2
 800764c:	76fb      	strb	r3, [r7, #27]
 800764e:	e035      	b.n	80076bc <UART_SetConfig+0x254>
 8007650:	2304      	movs	r3, #4
 8007652:	76fb      	strb	r3, [r7, #27]
 8007654:	e032      	b.n	80076bc <UART_SetConfig+0x254>
 8007656:	2308      	movs	r3, #8
 8007658:	76fb      	strb	r3, [r7, #27]
 800765a:	e02f      	b.n	80076bc <UART_SetConfig+0x254>
 800765c:	2310      	movs	r3, #16
 800765e:	76fb      	strb	r3, [r7, #27]
 8007660:	bf00      	nop
 8007662:	e02b      	b.n	80076bc <UART_SetConfig+0x254>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a3e      	ldr	r2, [pc, #248]	; (8007764 <UART_SetConfig+0x2fc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d124      	bne.n	80076b8 <UART_SetConfig+0x250>
 800766e:	4b3f      	ldr	r3, [pc, #252]	; (800776c <UART_SetConfig+0x304>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767c:	d012      	beq.n	80076a4 <UART_SetConfig+0x23c>
 800767e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007682:	d802      	bhi.n	800768a <UART_SetConfig+0x222>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d007      	beq.n	8007698 <UART_SetConfig+0x230>
 8007688:	e012      	b.n	80076b0 <UART_SetConfig+0x248>
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768e:	d006      	beq.n	800769e <UART_SetConfig+0x236>
 8007690:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007694:	d009      	beq.n	80076aa <UART_SetConfig+0x242>
 8007696:	e00b      	b.n	80076b0 <UART_SetConfig+0x248>
 8007698:	2300      	movs	r3, #0
 800769a:	76fb      	strb	r3, [r7, #27]
 800769c:	e00e      	b.n	80076bc <UART_SetConfig+0x254>
 800769e:	2302      	movs	r3, #2
 80076a0:	76fb      	strb	r3, [r7, #27]
 80076a2:	e00b      	b.n	80076bc <UART_SetConfig+0x254>
 80076a4:	2304      	movs	r3, #4
 80076a6:	76fb      	strb	r3, [r7, #27]
 80076a8:	e008      	b.n	80076bc <UART_SetConfig+0x254>
 80076aa:	2308      	movs	r3, #8
 80076ac:	76fb      	strb	r3, [r7, #27]
 80076ae:	e005      	b.n	80076bc <UART_SetConfig+0x254>
 80076b0:	2310      	movs	r3, #16
 80076b2:	76fb      	strb	r3, [r7, #27]
 80076b4:	bf00      	nop
 80076b6:	e001      	b.n	80076bc <UART_SetConfig+0x254>
 80076b8:	2310      	movs	r3, #16
 80076ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a28      	ldr	r2, [pc, #160]	; (8007764 <UART_SetConfig+0x2fc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	f040 80a1 	bne.w	800780a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076c8:	7efb      	ldrb	r3, [r7, #27]
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d823      	bhi.n	8007716 <UART_SetConfig+0x2ae>
 80076ce:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0x26c>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	08007717 	.word	0x08007717
 80076dc:	08007701 	.word	0x08007701
 80076e0:	08007717 	.word	0x08007717
 80076e4:	08007707 	.word	0x08007707
 80076e8:	08007717 	.word	0x08007717
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007717 	.word	0x08007717
 80076f4:	0800770f 	.word	0x0800770f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076f8:	f7fe f828 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 80076fc:	6178      	str	r0, [r7, #20]
        break;
 80076fe:	e00f      	b.n	8007720 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007700:	4b1e      	ldr	r3, [pc, #120]	; (800777c <UART_SetConfig+0x314>)
 8007702:	617b      	str	r3, [r7, #20]
        break;
 8007704:	e00c      	b.n	8007720 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007706:	f7fd ffb3 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 800770a:	6178      	str	r0, [r7, #20]
        break;
 800770c:	e008      	b.n	8007720 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007712:	617b      	str	r3, [r7, #20]
        break;
 8007714:	e004      	b.n	8007720 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	76bb      	strb	r3, [r7, #26]
        break;
 800771e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8130 	beq.w	8007988 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	4a14      	ldr	r2, [pc, #80]	; (8007780 <UART_SetConfig+0x318>)
 800772e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007732:	461a      	mov	r2, r3
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	fbb3 f3f2 	udiv	r3, r3, r2
 800773a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	4613      	mov	r3, r2
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	4413      	add	r3, r2
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	429a      	cmp	r2, r3
 800774a:	d305      	bcc.n	8007758 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	429a      	cmp	r2, r3
 8007756:	d915      	bls.n	8007784 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	76bb      	strb	r3, [r7, #26]
 800775c:	e114      	b.n	8007988 <UART_SetConfig+0x520>
 800775e:	bf00      	nop
 8007760:	cfff69f3 	.word	0xcfff69f3
 8007764:	40008000 	.word	0x40008000
 8007768:	40013800 	.word	0x40013800
 800776c:	40021000 	.word	0x40021000
 8007770:	40004400 	.word	0x40004400
 8007774:	40004800 	.word	0x40004800
 8007778:	40004c00 	.word	0x40004c00
 800777c:	00f42400 	.word	0x00f42400
 8007780:	0800840c 	.word	0x0800840c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	4618      	mov	r0, r3
 8007788:	f04f 0100 	mov.w	r1, #0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	4a87      	ldr	r2, [pc, #540]	; (80079b0 <UART_SetConfig+0x548>)
 8007792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007796:	b29b      	uxth	r3, r3
 8007798:	f04f 0400 	mov.w	r4, #0
 800779c:	461a      	mov	r2, r3
 800779e:	4623      	mov	r3, r4
 80077a0:	f7f8 fd3a 	bl	8000218 <__aeabi_uldivmod>
 80077a4:	4603      	mov	r3, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	4619      	mov	r1, r3
 80077aa:	4622      	mov	r2, r4
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	f04f 0400 	mov.w	r4, #0
 80077b4:	0214      	lsls	r4, r2, #8
 80077b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80077ba:	020b      	lsls	r3, r1, #8
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6852      	ldr	r2, [r2, #4]
 80077c0:	0852      	lsrs	r2, r2, #1
 80077c2:	4611      	mov	r1, r2
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	eb13 0b01 	adds.w	fp, r3, r1
 80077cc:	eb44 0c02 	adc.w	ip, r4, r2
 80077d0:	4658      	mov	r0, fp
 80077d2:	4661      	mov	r1, ip
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f04f 0400 	mov.w	r4, #0
 80077dc:	461a      	mov	r2, r3
 80077de:	4623      	mov	r3, r4
 80077e0:	f7f8 fd1a 	bl	8000218 <__aeabi_uldivmod>
 80077e4:	4603      	mov	r3, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f0:	d308      	bcc.n	8007804 <UART_SetConfig+0x39c>
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f8:	d204      	bcs.n	8007804 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	60da      	str	r2, [r3, #12]
 8007802:	e0c1      	b.n	8007988 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	76bb      	strb	r3, [r7, #26]
 8007808:	e0be      	b.n	8007988 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007812:	d164      	bne.n	80078de <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8007814:	7efb      	ldrb	r3, [r7, #27]
 8007816:	2b08      	cmp	r3, #8
 8007818:	d827      	bhi.n	800786a <UART_SetConfig+0x402>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <UART_SetConfig+0x3b8>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007845 	.word	0x08007845
 8007824:	0800784d 	.word	0x0800784d
 8007828:	08007855 	.word	0x08007855
 800782c:	0800786b 	.word	0x0800786b
 8007830:	0800785b 	.word	0x0800785b
 8007834:	0800786b 	.word	0x0800786b
 8007838:	0800786b 	.word	0x0800786b
 800783c:	0800786b 	.word	0x0800786b
 8007840:	08007863 	.word	0x08007863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007844:	f7fd ff82 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8007848:	6178      	str	r0, [r7, #20]
        break;
 800784a:	e013      	b.n	8007874 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784c:	f7fd ff94 	bl	8005778 <HAL_RCC_GetPCLK2Freq>
 8007850:	6178      	str	r0, [r7, #20]
        break;
 8007852:	e00f      	b.n	8007874 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007854:	4b57      	ldr	r3, [pc, #348]	; (80079b4 <UART_SetConfig+0x54c>)
 8007856:	617b      	str	r3, [r7, #20]
        break;
 8007858:	e00c      	b.n	8007874 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800785a:	f7fd ff09 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 800785e:	6178      	str	r0, [r7, #20]
        break;
 8007860:	e008      	b.n	8007874 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007866:	617b      	str	r3, [r7, #20]
        break;
 8007868:	e004      	b.n	8007874 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	76bb      	strb	r3, [r7, #26]
        break;
 8007872:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8086 	beq.w	8007988 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	4a4b      	ldr	r2, [pc, #300]	; (80079b0 <UART_SetConfig+0x548>)
 8007882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007886:	461a      	mov	r2, r3
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	fbb3 f3f2 	udiv	r3, r3, r2
 800788e:	005a      	lsls	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	441a      	add	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	2b0f      	cmp	r3, #15
 80078a8:	d916      	bls.n	80078d8 <UART_SetConfig+0x470>
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d212      	bcs.n	80078d8 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f023 030f 	bic.w	r3, r3, #15
 80078ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	89fb      	ldrh	r3, [r7, #14]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	89fa      	ldrh	r2, [r7, #14]
 80078d4:	60da      	str	r2, [r3, #12]
 80078d6:	e057      	b.n	8007988 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	76bb      	strb	r3, [r7, #26]
 80078dc:	e054      	b.n	8007988 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078de:	7efb      	ldrb	r3, [r7, #27]
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d828      	bhi.n	8007936 <UART_SetConfig+0x4ce>
 80078e4:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <UART_SetConfig+0x484>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	08007911 	.word	0x08007911
 80078f0:	08007919 	.word	0x08007919
 80078f4:	08007921 	.word	0x08007921
 80078f8:	08007937 	.word	0x08007937
 80078fc:	08007927 	.word	0x08007927
 8007900:	08007937 	.word	0x08007937
 8007904:	08007937 	.word	0x08007937
 8007908:	08007937 	.word	0x08007937
 800790c:	0800792f 	.word	0x0800792f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fd ff1c 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8007914:	6178      	str	r0, [r7, #20]
        break;
 8007916:	e013      	b.n	8007940 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007918:	f7fd ff2e 	bl	8005778 <HAL_RCC_GetPCLK2Freq>
 800791c:	6178      	str	r0, [r7, #20]
        break;
 800791e:	e00f      	b.n	8007940 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007920:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <UART_SetConfig+0x54c>)
 8007922:	617b      	str	r3, [r7, #20]
        break;
 8007924:	e00c      	b.n	8007940 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007926:	f7fd fea3 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 800792a:	6178      	str	r0, [r7, #20]
        break;
 800792c:	e008      	b.n	8007940 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007932:	617b      	str	r3, [r7, #20]
        break;
 8007934:	e004      	b.n	8007940 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	76bb      	strb	r3, [r7, #26]
        break;
 800793e:	bf00      	nop
    }

    if (pclk != 0U)
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d020      	beq.n	8007988 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	4a19      	ldr	r2, [pc, #100]	; (80079b0 <UART_SetConfig+0x548>)
 800794c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007950:	461a      	mov	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	fbb3 f2f2 	udiv	r2, r3, r2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	441a      	add	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	b29b      	uxth	r3, r3
 800796a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d908      	bls.n	8007984 <UART_SetConfig+0x51c>
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007978:	d204      	bcs.n	8007984 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	e001      	b.n	8007988 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80079a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80079b0:	0800840c 	.word	0x0800840c
 80079b4:	00f42400 	.word	0x00f42400

080079b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01a      	beq.n	8007ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab6:	d10a      	bne.n	8007ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	605a      	str	r2, [r3, #4]
  }
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b0c:	f7fa fcc8 	bl	80024a0 <HAL_GetTick>
 8007b10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d10e      	bne.n	8007b3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f82c 	bl	8007b8c <UART_WaitOnFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e022      	b.n	8007b84 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d10e      	bne.n	8007b6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f816 	bl	8007b8c <UART_WaitOnFlagUntilTimeout>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e00c      	b.n	8007b84 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b9c:	e062      	b.n	8007c64 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d05e      	beq.n	8007c64 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba6:	f7fa fc7b 	bl	80024a0 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d302      	bcc.n	8007bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d11d      	bne.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007bca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0201 	bic.w	r2, r2, #1
 8007bda:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e045      	b.n	8007c84 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d02e      	beq.n	8007c64 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c14:	d126      	bne.n	8007c64 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c2e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0201 	bic.w	r2, r2, #1
 8007c3e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e00f      	b.n	8007c84 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69da      	ldr	r2, [r3, #28]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	bf0c      	ite	eq
 8007c74:	2301      	moveq	r3, #1
 8007c76:	2300      	movne	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d08d      	beq.n	8007b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007ca2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007cb2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007cde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d114      	bne.n	8007d54 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d40:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d50:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d52:	e002      	b.n	8007d5a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7f9 ff91 	bl	8001c7c <HAL_UART_TxCpltCallback>
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff fb5b 	bl	800742c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d11f      	bne.n	8007dda <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007db0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff fb30 	bl	8007440 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007de0:	bf00      	nop
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f7ff fb2c 	bl	8007454 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfc:	bf00      	nop
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e10:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e18:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2c:	2b80      	cmp	r3, #128	; 0x80
 8007e2e:	d109      	bne.n	8007e44 <UART_DMAError+0x40>
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b21      	cmp	r3, #33	; 0x21
 8007e34:	d106      	bne.n	8007e44 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007e3e:	6978      	ldr	r0, [r7, #20]
 8007e40:	f7ff ff24 	bl	8007c8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b40      	cmp	r3, #64	; 0x40
 8007e50:	d109      	bne.n	8007e66 <UART_DMAError+0x62>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b22      	cmp	r3, #34	; 0x22
 8007e56:	d106      	bne.n	8007e66 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007e60:	6978      	ldr	r0, [r7, #20]
 8007e62:	f7ff ff31 	bl	8007cc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6c:	f043 0210 	orr.w	r2, r3, #16
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e76:	6978      	ldr	r0, [r7, #20]
 8007e78:	f7f9 fcf2 	bl	8001860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e7c:	bf00      	nop
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7f9 fcdc 	bl	8001860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea8:	bf00      	nop
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7f9 fed0 	bl	8001c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e027      	b.n	8007f86 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2224      	movs	r2, #36	; 0x24
 8007f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0201 	bic.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e02d      	b.n	8008006 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2224      	movs	r2, #36	; 0x24
 8007fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0201 	bic.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f850 	bl	800808c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008022:	2302      	movs	r3, #2
 8008024:	e02d      	b.n	8008082 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2224      	movs	r2, #36	; 0x24
 8008032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0201 	bic.w	r2, r2, #1
 800804c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f812 	bl	800808c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2220      	movs	r2, #32
 8008074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b089      	sub	sp, #36	; 0x24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008094:	4a2f      	ldr	r2, [pc, #188]	; (8008154 <UARTEx_SetNbDataToProcess+0xc8>)
 8008096:	f107 0314 	add.w	r3, r7, #20
 800809a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800809e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80080a2:	4a2d      	ldr	r2, [pc, #180]	; (8008158 <UARTEx_SetNbDataToProcess+0xcc>)
 80080a4:	f107 030c 	add.w	r3, r7, #12
 80080a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080ac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d108      	bne.n	80080ca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080c8:	e03d      	b.n	8008146 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080ca:	2308      	movs	r3, #8
 80080cc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080ce:	2308      	movs	r3, #8
 80080d0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	0e5b      	lsrs	r3, r3, #25
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	0f5b      	lsrs	r3, r3, #29
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080f2:	7fbb      	ldrb	r3, [r7, #30]
 80080f4:	7f3a      	ldrb	r2, [r7, #28]
 80080f6:	f107 0120 	add.w	r1, r7, #32
 80080fa:	440a      	add	r2, r1
 80080fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008104:	7f3a      	ldrb	r2, [r7, #28]
 8008106:	f107 0120 	add.w	r1, r7, #32
 800810a:	440a      	add	r2, r1
 800810c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008110:	fb93 f3f2 	sdiv	r3, r3, r2
 8008114:	b29a      	uxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800811c:	7ffb      	ldrb	r3, [r7, #31]
 800811e:	7f7a      	ldrb	r2, [r7, #29]
 8008120:	f107 0120 	add.w	r1, r7, #32
 8008124:	440a      	add	r2, r1
 8008126:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800812a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800812e:	7f7a      	ldrb	r2, [r7, #29]
 8008130:	f107 0120 	add.w	r1, r7, #32
 8008134:	440a      	add	r2, r1
 8008136:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800813a:	fb93 f3f2 	sdiv	r3, r3, r2
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008146:	bf00      	nop
 8008148:	3724      	adds	r7, #36	; 0x24
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	080081e4 	.word	0x080081e4
 8008158:	080081ec 	.word	0x080081ec

0800815c <__libc_init_array>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4e0d      	ldr	r6, [pc, #52]	; (8008194 <__libc_init_array+0x38>)
 8008160:	4c0d      	ldr	r4, [pc, #52]	; (8008198 <__libc_init_array+0x3c>)
 8008162:	1ba4      	subs	r4, r4, r6
 8008164:	10a4      	asrs	r4, r4, #2
 8008166:	2500      	movs	r5, #0
 8008168:	42a5      	cmp	r5, r4
 800816a:	d109      	bne.n	8008180 <__libc_init_array+0x24>
 800816c:	4e0b      	ldr	r6, [pc, #44]	; (800819c <__libc_init_array+0x40>)
 800816e:	4c0c      	ldr	r4, [pc, #48]	; (80081a0 <__libc_init_array+0x44>)
 8008170:	f000 f82c 	bl	80081cc <_init>
 8008174:	1ba4      	subs	r4, r4, r6
 8008176:	10a4      	asrs	r4, r4, #2
 8008178:	2500      	movs	r5, #0
 800817a:	42a5      	cmp	r5, r4
 800817c:	d105      	bne.n	800818a <__libc_init_array+0x2e>
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008184:	4798      	blx	r3
 8008186:	3501      	adds	r5, #1
 8008188:	e7ee      	b.n	8008168 <__libc_init_array+0xc>
 800818a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800818e:	4798      	blx	r3
 8008190:	3501      	adds	r5, #1
 8008192:	e7f2      	b.n	800817a <__libc_init_array+0x1e>
 8008194:	0800842c 	.word	0x0800842c
 8008198:	0800842c 	.word	0x0800842c
 800819c:	0800842c 	.word	0x0800842c
 80081a0:	08008430 	.word	0x08008430

080081a4 <memcpy>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	1e43      	subs	r3, r0, #1
 80081a8:	440a      	add	r2, r1
 80081aa:	4291      	cmp	r1, r2
 80081ac:	d100      	bne.n	80081b0 <memcpy+0xc>
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081b8:	e7f7      	b.n	80081aa <memcpy+0x6>

080081ba <memset>:
 80081ba:	4402      	add	r2, r0
 80081bc:	4603      	mov	r3, r0
 80081be:	4293      	cmp	r3, r2
 80081c0:	d100      	bne.n	80081c4 <memset+0xa>
 80081c2:	4770      	bx	lr
 80081c4:	f803 1b01 	strb.w	r1, [r3], #1
 80081c8:	e7f9      	b.n	80081be <memset+0x4>
	...

080081cc <_init>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr

080081d8 <_fini>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	bf00      	nop
 80081dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081de:	bc08      	pop	{r3}
 80081e0:	469e      	mov	lr, r3
 80081e2:	4770      	bx	lr
