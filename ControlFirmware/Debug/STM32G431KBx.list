
STM32G431KBx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a108  0800a108  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800a108  0800a108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a110  0800a110  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a110  0800a110  0001a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800a118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003560  20000030  0800a148  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003590  0800a148  00023590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d862  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a21  00000000  00000000  0003d8c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  000412e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  00042b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022682  00000000  00000000  00044170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000155c9  00000000  00000000  000667f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddc7b  00000000  00000000  0007bdbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159a36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006618  00000000  00000000  00159ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009eb0 	.word	0x08009eb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	08009eb0 	.word	0x08009eb0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <query_position_sensor>:
static float last_setpoint_velocity_dps = 0.0f;
static bool entering_state = true;


float query_position_sensor()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
	// read input position sensor
	//position_input_adc = read_adc(&hadc2,ADC_CHANNEL_10,ADC_SAMPLETIME_47CYCLES_5);
	uint16_t const min_position_adc = MAKE_SHORT(regs[REG_MIN_POSITION_ADC_L],regs[REG_MIN_POSITION_ADC_H]);
 800051e:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <query_position_sensor+0xc0>)
 8000520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	b21a      	sxth	r2, r3
 8000528:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <query_position_sensor+0xc0>)
 800052a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800052e:	b21b      	sxth	r3, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	b21b      	sxth	r3, r3
 8000534:	817b      	strh	r3, [r7, #10]
	uint16_t const max_position_adc = MAKE_SHORT(regs[REG_MAX_POSITION_ADC_L],regs[REG_MAX_POSITION_ADC_H]);
 8000536:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <query_position_sensor+0xc0>)
 8000538:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800053c:	021b      	lsls	r3, r3, #8
 800053e:	b21a      	sxth	r2, r3
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <query_position_sensor+0xc0>)
 8000542:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000546:	b21b      	sxth	r3, r3
 8000548:	4313      	orrs	r3, r2
 800054a:	b21b      	sxth	r3, r3
 800054c:	813b      	strh	r3, [r7, #8]
	//bool const position_input_adc_valid = (position_input_adc>=min_position_adc) && (position_input_adc<=max_position_adc);

	// compute present position in deg and apply scale and inversion
	float const max_rotation_deg = (float)(regs[REG_MAX_ROTATION_DEG]);
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <query_position_sensor+0xc0>)
 8000550:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000554:	ee07 3a90 	vmov	s15, r3
 8000558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800055c:	edc7 7a01 	vstr	s15, [r7, #4]
	float present_position_deg_unfiltered = fmap((float)position_input_adc,(float)min_position_adc,(float)max_position_adc,0.0f,max_rotation_deg);
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <query_position_sensor+0xc4>)
 8000562:	edd3 7a00 	vldr	s15, [r3]
 8000566:	897b      	ldrh	r3, [r7, #10]
 8000568:	ee07 3a10 	vmov	s14, r3
 800056c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000570:	893b      	ldrh	r3, [r7, #8]
 8000572:	ee06 3a90 	vmov	s13, r3
 8000576:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800057a:	ed97 2a01 	vldr	s4, [r7, #4]
 800057e:	eddf 1a18 	vldr	s3, [pc, #96]	; 80005e0 <query_position_sensor+0xc8>
 8000582:	eeb0 1a66 	vmov.f32	s2, s13
 8000586:	eef0 0a47 	vmov.f32	s1, s14
 800058a:	eeb0 0a67 	vmov.f32	s0, s15
 800058e:	f001 fffa 	bl	8002586 <fmap>
 8000592:	ed87 0a03 	vstr	s0, [r7, #12]
	float const inv_rotation_sensor = regs[REG_INV_ROTATION_SENSOR] > 0 ? -1.0f : 0.0f;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <query_position_sensor+0xc0>)
 8000598:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <query_position_sensor+0x8c>
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <query_position_sensor+0xcc>)
 80005a2:	e001      	b.n	80005a8 <query_position_sensor+0x90>
 80005a4:	f04f 0300 	mov.w	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
	if(inv_rotation_sensor<0)
 80005aa:	edd7 7a00 	vldr	s15, [r7]
 80005ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b6:	d507      	bpl.n	80005c8 <query_position_sensor+0xb0>
	{
		present_position_deg_unfiltered =  max_rotation_deg-present_position_deg_unfiltered;
 80005b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80005bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80005c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005c4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return present_position_deg_unfiltered;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	ee07 3a90 	vmov	s15, r3
}
 80005ce:	eeb0 0a67 	vmov.f32	s0, s15
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	20000054 	.word	0x20000054
 80005e0:	00000000 	.word	0x00000000
 80005e4:	bf800000 	.word	0xbf800000

080005e8 <APP_Control_Reset>:


void APP_Control_Reset()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	// reset
	entering_state = true;
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <APP_Control_Reset+0x94>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
	counter = 0;
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <APP_Control_Reset+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
	pid_reset(&pid_position);
 80005f8:	4822      	ldr	r0, [pc, #136]	; (8000684 <APP_Control_Reset+0x9c>)
 80005fa:	f002 f80a 	bl	8002612 <pid_reset>
	pid_reset(&pid_current);
 80005fe:	4822      	ldr	r0, [pc, #136]	; (8000688 <APP_Control_Reset+0xa0>)
 8000600:	f002 f807 	bl	8002612 <pid_reset>
	setpoint_pwm = 0.0f;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <APP_Control_Reset+0xa4>)
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
	setpoint_current_ma = 0.0f;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <APP_Control_Reset+0xa8>)
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
	setpoint_acceleration_dpss = 0.0f;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <APP_Control_Reset+0xac>)
 8000616:	f04f 0200 	mov.w	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
	setpoint_velocity_dps = 0.0f;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <APP_Control_Reset+0xb0>)
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
	last_setpoint_velocity_dps = 0.0f;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <APP_Control_Reset+0xb4>)
 8000626:	f04f 0200 	mov.w	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
	setpoint_position_deg = present_position_deg;
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <APP_Control_Reset+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <APP_Control_Reset+0xbc>)
 8000632:	6013      	str	r3, [r2, #0]
	// when re-entering in the control mode 'position', avoid glitch from past goal position
	regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <APP_Control_Reset+0xb8>)
 8000636:	edd3 7a00 	vldr	s15, [r3]
 800063a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800063e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000646:	ee17 3a90 	vmov	r3, s15
 800064a:	b21b      	sxth	r3, r3
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <APP_Control_Reset+0xc0>)
 8000650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <APP_Control_Reset+0xb8>)
 8000656:	edd3 7a00 	vldr	s15, [r3]
 800065a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800065e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000666:	ee17 3a90 	vmov	r3, s15
 800066a:	b21b      	sxth	r3, r3
 800066c:	121b      	asrs	r3, r3, #8
 800066e:	b21b      	sxth	r3, r3
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <APP_Control_Reset+0xc0>)
 8000674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000000 	.word	0x20000000
 8000680:	20000060 	.word	0x20000060
 8000684:	20000064 	.word	0x20000064
 8000688:	20000070 	.word	0x20000070
 800068c:	2000008c 	.word	0x2000008c
 8000690:	20000090 	.word	0x20000090
 8000694:	20000094 	.word	0x20000094
 8000698:	20000098 	.word	0x20000098
 800069c:	200000a8 	.word	0x200000a8
 80006a0:	2000007c 	.word	0x2000007c
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	200000dc 	.word	0x200000dc

080006ac <APP_Control_Init>:

void APP_Control_Init()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	// start aMPOP
	HAL_OPAMP_Start(&hopamp1);
 80006b0:	4816      	ldr	r0, [pc, #88]	; (800070c <APP_Control_Init+0x60>)
 80006b2:	f005 ff45 	bl	8006540 <HAL_OPAMP_Start>
	// start adc conv trigger
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 80006b6:	2203      	movs	r2, #3
 80006b8:	4915      	ldr	r1, [pc, #84]	; (8000710 <APP_Control_Init+0x64>)
 80006ba:	4816      	ldr	r0, [pc, #88]	; (8000714 <APP_Control_Init+0x68>)
 80006bc:	f003 fd8c 	bl	80041d8 <HAL_ADC_Start_DMA>

	// motor Hi-Z
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_COAST);
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <APP_Control_Init+0x6c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2200      	movs	r2, #0
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_COAST);
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <APP_Control_Init+0x6c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38
	// motor init
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_1);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <APP_Control_Init+0x6c>)
 80006d4:	f007 f85a 	bl	800778c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_2);
 80006d8:	2104      	movs	r1, #4
 80006da:	480f      	ldr	r0, [pc, #60]	; (8000718 <APP_Control_Init+0x6c>)
 80006dc:	f007 f856 	bl	800778c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start(&htim15);
 80006e0:	480e      	ldr	r0, [pc, #56]	; (800071c <APP_Control_Init+0x70>)
 80006e2:	f006 ff8f 	bl	8007604 <HAL_TIM_Base_Start>

	// first position update, force goal at present position to avoid mechanical glicth at startup
	present_position_deg = query_position_sensor();
 80006e6:	f7ff ff17 	bl	8000518 <query_position_sensor>
 80006ea:	eef0 7a40 	vmov.f32	s15, s0
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <APP_Control_Init+0x74>)
 80006f0:	edc3 7a00 	vstr	s15, [r3]
	last_present_position_deg = present_position_deg;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <APP_Control_Init+0x74>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <APP_Control_Init+0x78>)
 80006fa:	6013      	str	r3, [r2, #0]

	// defaut control mode and reset
	current_control_mode = REG_CONTROL_MODE_POSITION;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <APP_Control_Init+0x7c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	APP_Control_Reset();
 8000702:	f7ff ff71 	bl	80005e8 <APP_Control_Reset>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000258 	.word	0x20000258
 8000710:	2000004c 	.word	0x2000004c
 8000714:	20000294 	.word	0x20000294
 8000718:	200001c0 	.word	0x200001c0
 800071c:	2000020c 	.word	0x2000020c
 8000720:	2000007c 	.word	0x2000007c
 8000724:	200000a4 	.word	0x200000a4
 8000728:	2000005c 	.word	0x2000005c

0800072c <APP_Control_Process>:


void APP_Control_Process()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	ed2d 8b02 	vpush	{d8}
 8000732:	b0a6      	sub	sp, #152	; 0x98
 8000734:	af00      	add	r7, sp, #0
	uint16_t current_time = __HAL_TIM_GET_COUNTER(&htim15);
 8000736:	4bb4      	ldr	r3, [pc, #720]	; (8000a08 <APP_Control_Process+0x2dc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	// wait for period
	if(current_time<period_us)
 8000740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000744:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000748:	4293      	cmp	r3, r2
 800074a:	f0c0 86f7 	bcc.w	800153c <APP_Control_Process+0xe10>
		return;
	__HAL_TIM_SET_COUNTER(&htim15,(current_time-period_us));
 800074e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000756:	1a9a      	subs	r2, r3, r2
 8000758:	4bab      	ldr	r3, [pc, #684]	; (8000a08 <APP_Control_Process+0x2dc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	625a      	str	r2, [r3, #36]	; 0x24

	// read position and filter
	float const present_position_deg = query_position_sensor();
 800075e:	f7ff fedb 	bl	8000518 <query_position_sensor>
 8000762:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

	// compute present speed in dps, present position derivative
	float present_speed_dps_unfiltered = (present_position_deg - last_present_position_deg)*LOOP_FREQUENCY_HZ;
 8000766:	4ba9      	ldr	r3, [pc, #676]	; (8000a0c <APP_Control_Process+0x2e0>)
 8000768:	edd3 7a00 	vldr	s15, [r3]
 800076c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8000770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000774:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000a10 <APP_Control_Process+0x2e4>
 8000778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800077c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	last_present_position_deg =  present_position_deg;
 8000780:	4aa2      	ldr	r2, [pc, #648]	; (8000a0c <APP_Control_Process+0x2e0>)
 8000782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000786:	6013      	str	r3, [r2, #0]
	present_velocity_dps = ALPHA_VELOCITY * present_speed_dps_unfiltered + (1.0f-ALPHA_VELOCITY)*present_velocity_dps;
 8000788:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800078c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8000a14 <APP_Control_Process+0x2e8>
 8000790:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000794:	4ba0      	ldr	r3, [pc, #640]	; (8000a18 <APP_Control_Process+0x2ec>)
 8000796:	edd3 7a00 	vldr	s15, [r3]
 800079a:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8000a1c <APP_Control_Process+0x2f0>
 800079e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a6:	4b9c      	ldr	r3, [pc, #624]	; (8000a18 <APP_Control_Process+0x2ec>)
 80007a8:	edc3 7a00 	vstr	s15, [r3]

	// torque enable logic
	bool torque_enable = (regs[REG_TORQUE_ENABLE]!=0) && (regs[REG_HARDWARE_ERROR_STATUS]==0);
 80007ac:	4b9c      	ldr	r3, [pc, #624]	; (8000a20 <APP_Control_Process+0x2f4>)
 80007ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <APP_Control_Process+0x98>
 80007b6:	4b9a      	ldr	r3, [pc, #616]	; (8000a20 <APP_Control_Process+0x2f4>)
 80007b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d101      	bne.n	80007c4 <APP_Control_Process+0x98>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <APP_Control_Process+0x9a>
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80007ca:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	if(torque_enable)
 80007d6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f000 84fc 	beq.w	80011d8 <APP_Control_Process+0xaac>
	{
		// modes & transitions
		// compute setpoint_pwm
		switch(current_control_mode)
 80007e0:	4b90      	ldr	r3, [pc, #576]	; (8000a24 <APP_Control_Process+0x2f8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	f200 849b 	bhi.w	8001120 <APP_Control_Process+0x9f4>
 80007ea:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <APP_Control_Process+0xc4>)
 80007ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f0:	08000805 	.word	0x08000805
 80007f4:	08000a49 	.word	0x08000a49
 80007f8:	08000d75 	.word	0x08000d75
 80007fc:	08000e2d 	.word	0x08000e2d
 8000800:	08001019 	.word	0x08001019
		{
		// Simple PID from position to pwm
		// Mg92 Kp = 400 Ki = 20 Kd = 400
		case REG_CONTROL_MODE_POSITION:
			if(entering_state)
 8000804:	4b88      	ldr	r3, [pc, #544]	; (8000a28 <APP_Control_Process+0x2fc>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d040      	beq.n	800088e <APP_Control_Process+0x162>
			{
				entering_state = false;
 800080c:	4b86      	ldr	r3, [pc, #536]	; (8000a28 <APP_Control_Process+0x2fc>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000812:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000816:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800081a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800081e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000822:	ee17 3a90 	vmov	r3, s15
 8000826:	b21b      	sxth	r3, r3
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b7d      	ldr	r3, [pc, #500]	; (8000a20 <APP_Control_Process+0x2f4>)
 800082c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000830:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000834:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800083c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000840:	ee17 3a90 	vmov	r3, s15
 8000844:	b21b      	sxth	r3, r3
 8000846:	121b      	asrs	r3, r3, #8
 8000848:	b21b      	sxth	r3, r3
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b74      	ldr	r3, [pc, #464]	; (8000a20 <APP_Control_Process+0x2f4>)
 800084e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000852:	4b73      	ldr	r3, [pc, #460]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000854:	7e9a      	ldrb	r2, [r3, #26]
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000858:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 800085c:	4b70      	ldr	r3, [pc, #448]	; (8000a20 <APP_Control_Process+0x2f4>)
 800085e:	7eda      	ldrb	r2, [r3, #27]
 8000860:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000862:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8000866:	4b6e      	ldr	r3, [pc, #440]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 800086e:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8000876:	4b6a      	ldr	r3, [pc, #424]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 800087e:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 8000886:	4a69      	ldr	r2, [pc, #420]	; (8000a2c <APP_Control_Process+0x300>)
 8000888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800088c:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 800088e:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000890:	7c5b      	ldrb	r3, [r3, #17]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	4a62      	ldr	r2, [pc, #392]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000896:	7c12      	ldrb	r2, [r2, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 80008a6:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <APP_Control_Process+0x2f4>)
 80008a8:	7cdb      	ldrb	r3, [r3, #19]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	4a5c      	ldr	r2, [pc, #368]	; (8000a20 <APP_Control_Process+0x2f4>)
 80008ae:	7c92      	ldrb	r2, [r2, #18]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 80008be:	4b58      	ldr	r3, [pc, #352]	; (8000a20 <APP_Control_Process+0x2f4>)
 80008c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	4a56      	ldr	r2, [pc, #344]	; (8000a20 <APP_Control_Process+0x2f4>)
 80008c8:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 80008cc:	4313      	orrs	r3, r2
 80008ce:	ee07 3a90 	vmov	s15, r3
 80008d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000a30 <APP_Control_Process+0x304>
 80008da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 80008e2:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 80008e6:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80008ea:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80008ee:	f001 fe21 	bl	8002534 <fconstrain>
 80008f2:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 80008f6:	4a4d      	ldr	r2, [pc, #308]	; (8000a2c <APP_Control_Process+0x300>)
 80008f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fa:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 80008fc:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <APP_Control_Process+0x300>)
 80008fe:	ed93 7a00 	vldr	s14, [r3]
 8000902:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800090a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				// compute pwm setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 800090e:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000910:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	4a42      	ldr	r2, [pc, #264]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000918:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800091c:	4313      	orrs	r3, r2
 800091e:	ee07 3a90 	vmov	s15, r3
 8000922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000926:	eddf 6a43 	vldr	s13, [pc, #268]	; 8000a34 <APP_Control_Process+0x308>
 800092a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800092e:	edc7 7a08 	vstr	s15, [r7, #32]
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 8000932:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000934:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	4a39      	ldr	r2, [pc, #228]	; (8000a20 <APP_Control_Process+0x2f4>)
 800093c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8000940:	4313      	orrs	r3, r2
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094a:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000a10 <APP_Control_Process+0x2e4>
 800094e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000952:	edc7 7a07 	vstr	s15, [r7, #28]
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000958:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	4a30      	ldr	r2, [pc, #192]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000960:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8000964:	4313      	orrs	r3, r2
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800096e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000976:	edc7 7a06 	vstr	s15, [r7, #24]
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <APP_Control_Process+0x2f4>)
 800097c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <APP_Control_Process+0x2f4>)
 8000984:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8000988:	4313      	orrs	r3, r2
 800098a:	ee07 3a90 	vmov	s15, r3
 800098e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000992:	edc7 7a05 	vstr	s15, [r7, #20]
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp(
 8000996:	eddf 2a1f 	vldr	s5, [pc, #124]	; 8000a14 <APP_Control_Process+0x2e8>
 800099a:	ed97 2a05 	vldr	s4, [r7, #20]
 800099e:	edd7 1a06 	vldr	s3, [r7, #24]
 80009a2:	ed97 1a07 	vldr	s2, [r7, #28]
 80009a6:	edd7 0a08 	vldr	s1, [r7, #32]
 80009aa:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80009ae:	4822      	ldr	r0, [pc, #136]	; (8000a38 <APP_Control_Process+0x30c>)
 80009b0:	f001 fe45 	bl	800263e <pid_process_antiwindup_clamp>
 80009b4:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 80009b8:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000a14 <APP_Control_Process+0x2e8>
 80009bc:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										pwm_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <APP_Control_Process+0x310>)
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000a1c <APP_Control_Process+0x2f0>
 80009ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 80009ce:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <APP_Control_Process+0x310>)
 80009d4:	edc3 7a00 	vstr	s15, [r3]
			}
			// unused setpoints zero
			setpoint_velocity_dps = 0.0f;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <APP_Control_Process+0x314>)
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
			setpoint_current_ma = 0.0f;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <APP_Control_Process+0x318>)
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION)
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <APP_Control_Process+0x2f4>)
 80009ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 838d 	beq.w	800110e <APP_Control_Process+0x9e2>
			{
				APP_Control_Reset();
 80009f4:	f7ff fdf8 	bl	80005e8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <APP_Control_Process+0x2f4>)
 80009fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <APP_Control_Process+0x2f8>)
 8000a02:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a04:	e383      	b.n	800110e <APP_Control_Process+0x9e2>
 8000a06:	bf00      	nop
 8000a08:	2000020c 	.word	0x2000020c
 8000a0c:	200000a4 	.word	0x200000a4
 8000a10:	447a0000 	.word	0x447a0000
 8000a14:	3df5c28f 	.word	0x3df5c28f
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	3f6147ae 	.word	0x3f6147ae
 8000a20:	200000dc 	.word	0x200000dc
 8000a24:	2000005c 	.word	0x2000005c
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	3dcccccd 	.word	0x3dcccccd
 8000a34:	42c80000 	.word	0x42c80000
 8000a38:	20000064 	.word	0x20000064
 8000a3c:	2000008c 	.word	0x2000008c
 8000a40:	20000098 	.word	0x20000098
 8000a44:	20000090 	.word	0x20000090


		case REG_CONTROL_MODE_POSITION_TORQUE:
			if(entering_state)
 8000a48:	4bb9      	ldr	r3, [pc, #740]	; (8000d30 <APP_Control_Process+0x604>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d042      	beq.n	8000ad6 <APP_Control_Process+0x3aa>
			{
				entering_state = false;
 8000a50:	4bb7      	ldr	r3, [pc, #732]	; (8000d30 <APP_Control_Process+0x604>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000a56:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000a5a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a66:	ee17 3a90 	vmov	r3, s15
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4bb1      	ldr	r3, [pc, #708]	; (8000d34 <APP_Control_Process+0x608>)
 8000a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000a74:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000a78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a84:	ee17 3a90 	vmov	r3, s15
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	121b      	asrs	r3, r3, #8
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4ba8      	ldr	r3, [pc, #672]	; (8000d34 <APP_Control_Process+0x608>)
 8000a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 8000a96:	4ba7      	ldr	r3, [pc, #668]	; (8000d34 <APP_Control_Process+0x608>)
 8000a98:	7e1a      	ldrb	r2, [r3, #24]
 8000a9a:	4ba6      	ldr	r3, [pc, #664]	; (8000d34 <APP_Control_Process+0x608>)
 8000a9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8000aa0:	4ba4      	ldr	r3, [pc, #656]	; (8000d34 <APP_Control_Process+0x608>)
 8000aa2:	7e5a      	ldrb	r2, [r3, #25]
 8000aa4:	4ba3      	ldr	r3, [pc, #652]	; (8000d34 <APP_Control_Process+0x608>)
 8000aa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000aaa:	4ba2      	ldr	r3, [pc, #648]	; (8000d34 <APP_Control_Process+0x608>)
 8000aac:	7e9a      	ldrb	r2, [r3, #26]
 8000aae:	4ba1      	ldr	r3, [pc, #644]	; (8000d34 <APP_Control_Process+0x608>)
 8000ab0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000ab4:	4b9f      	ldr	r3, [pc, #636]	; (8000d34 <APP_Control_Process+0x608>)
 8000ab6:	7eda      	ldrb	r2, [r3, #27]
 8000ab8:	4b9e      	ldr	r3, [pc, #632]	; (8000d34 <APP_Control_Process+0x608>)
 8000aba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0.0f;
 8000abe:	4b9d      	ldr	r3, [pc, #628]	; (8000d34 <APP_Control_Process+0x608>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0.0f;
 8000ac6:	4b9b      	ldr	r3, [pc, #620]	; (8000d34 <APP_Control_Process+0x608>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 8000ace:	4a9a      	ldr	r2, [pc, #616]	; (8000d38 <APP_Control_Process+0x60c>)
 8000ad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ad4:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 8000ad6:	4b97      	ldr	r3, [pc, #604]	; (8000d34 <APP_Control_Process+0x608>)
 8000ad8:	7c5b      	ldrb	r3, [r3, #17]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	4a95      	ldr	r2, [pc, #596]	; (8000d34 <APP_Control_Process+0x608>)
 8000ade:	7c12      	ldrb	r2, [r2, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aea:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 8000aee:	4b91      	ldr	r3, [pc, #580]	; (8000d34 <APP_Control_Process+0x608>)
 8000af0:	7cdb      	ldrb	r3, [r3, #19]
 8000af2:	021b      	lsls	r3, r3, #8
 8000af4:	4a8f      	ldr	r2, [pc, #572]	; (8000d34 <APP_Control_Process+0x608>)
 8000af6:	7c92      	ldrb	r2, [r2, #18]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	ee07 3a90 	vmov	s15, r3
 8000afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b02:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 8000b06:	4b8b      	ldr	r3, [pc, #556]	; (8000d34 <APP_Control_Process+0x608>)
 8000b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	4a89      	ldr	r2, [pc, #548]	; (8000d34 <APP_Control_Process+0x608>)
 8000b10:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8000b14:	4313      	orrs	r3, r2
 8000b16:	ee07 3a90 	vmov	s15, r3
 8000b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1e:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000d3c <APP_Control_Process+0x610>
 8000b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b26:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 8000b2a:	ed97 1a18 	vldr	s2, [r7, #96]	; 0x60
 8000b2e:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 8000b32:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8000b36:	f001 fcfd 	bl	8002534 <fconstrain>
 8000b3a:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 8000b3e:	4a7e      	ldr	r2, [pc, #504]	; (8000d38 <APP_Control_Process+0x60c>)
 8000b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b42:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 8000b44:	4b7c      	ldr	r3, [pc, #496]	; (8000d38 <APP_Control_Process+0x60c>)
 8000b46:	ed93 7a00 	vldr	s14, [r3]
 8000b4a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b52:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				// compute current setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8000b56:	4b77      	ldr	r3, [pc, #476]	; (8000d34 <APP_Control_Process+0x608>)
 8000b58:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	4a75      	ldr	r2, [pc, #468]	; (8000d34 <APP_Control_Process+0x608>)
 8000b60:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8000b64:	4313      	orrs	r3, r2
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b6e:	eddf 6a74 	vldr	s13, [pc, #464]	; 8000d40 <APP_Control_Process+0x614>
 8000b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b76:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 8000b7a:	4b6e      	ldr	r3, [pc, #440]	; (8000d34 <APP_Control_Process+0x608>)
 8000b7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	4a6c      	ldr	r2, [pc, #432]	; (8000d34 <APP_Control_Process+0x608>)
 8000b84:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b92:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8000d44 <APP_Control_Process+0x618>
 8000b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b9a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 8000b9e:	4b65      	ldr	r3, [pc, #404]	; (8000d34 <APP_Control_Process+0x608>)
 8000ba0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	4a63      	ldr	r2, [pc, #396]	; (8000d34 <APP_Control_Process+0x608>)
 8000ba8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8000bac:	4313      	orrs	r3, r2
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8000bc2:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <APP_Control_Process+0x608>)
 8000bc4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	4a5a      	ldr	r2, [pc, #360]	; (8000d34 <APP_Control_Process+0x608>)
 8000bcc:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	ee07 3a90 	vmov	s15, r3
 8000bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bda:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp(
 8000bde:	eddf 2a5a 	vldr	s5, [pc, #360]	; 8000d48 <APP_Control_Process+0x61c>
 8000be2:	ed97 2a12 	vldr	s4, [r7, #72]	; 0x48
 8000be6:	edd7 1a13 	vldr	s3, [r7, #76]	; 0x4c
 8000bea:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8000bee:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8000bf2:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8000bf6:	4855      	ldr	r0, [pc, #340]	; (8000d4c <APP_Control_Process+0x620>)
 8000bf8:	f001 fd21 	bl	800263e <pid_process_antiwindup_clamp>
 8000bfc:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 8000c00:	eddf 7a53 	vldr	s15, [pc, #332]	; 8000d50 <APP_Control_Process+0x624>
 8000c04:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										current_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 8000c08:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <APP_Control_Process+0x628>)
 8000c0a:	edd3 7a00 	vldr	s15, [r3]
 8000c0e:	eddf 6a52 	vldr	s13, [pc, #328]	; 8000d58 <APP_Control_Process+0x62c>
 8000c12:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8000c16:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <APP_Control_Process+0x628>)
 8000c1c:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_current_ma_on;
 8000c20:	4b4c      	ldr	r3, [pc, #304]	; (8000d54 <APP_Control_Process+0x628>)
 8000c22:	ed93 7a00 	vldr	s14, [r3]
 8000c26:	4b4d      	ldr	r3, [pc, #308]	; (8000d5c <APP_Control_Process+0x630>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c30:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 8000c34:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <APP_Control_Process+0x608>)
 8000c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <APP_Control_Process+0x608>)
 8000c3e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000c42:	4313      	orrs	r3, r2
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c4c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000d44 <APP_Control_Process+0x618>
 8000c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c54:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 8000c58:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <APP_Control_Process+0x608>)
 8000c5a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <APP_Control_Process+0x608>)
 8000c62:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8000c66:	4313      	orrs	r3, r2
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c70:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000d40 <APP_Control_Process+0x614>
 8000c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <APP_Control_Process+0x608>)
 8000c7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <APP_Control_Process+0x608>)
 8000c86:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c94:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000d40 <APP_Control_Process+0x614>
 8000c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c9c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <APP_Control_Process+0x608>)
 8000ca2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <APP_Control_Process+0x608>)
 8000caa:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_current_kff * setpoint_current_ma +
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <APP_Control_Process+0x628>)
 8000cbe:	ed93 7a00 	vldr	s14, [r3]
 8000cc2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cc6:	ee27 8a27 	vmul.f32	s16, s14, s15
								pid_process_antiwindup_clamp(
 8000cca:	eddf 2a25 	vldr	s5, [pc, #148]	; 8000d60 <APP_Control_Process+0x634>
 8000cce:	ed97 2a0d 	vldr	s4, [r7, #52]	; 0x34
 8000cd2:	eddf 1a23 	vldr	s3, [pc, #140]	; 8000d60 <APP_Control_Process+0x634>
 8000cd6:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8000cda:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 8000cde:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8000ce2:	4820      	ldr	r0, [pc, #128]	; (8000d64 <APP_Control_Process+0x638>)
 8000ce4:	f001 fcab 	bl	800263e <pid_process_antiwindup_clamp>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
								pid_current_kff * setpoint_current_ma +
 8000cec:	ee78 7a27 	vadd.f32	s15, s16, s15
						ALPHA_PWM_SETPOINT * (
 8000cf0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000d48 <APP_Control_Process+0x61c>
 8000cf4:	ee27 7a87 	vmul.f32	s14, s15, s14
										0.0f,
										pwm_limit,
										0.0f
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <APP_Control_Process+0x63c>)
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000d6c <APP_Control_Process+0x640>
 8000d02:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8000d06:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <APP_Control_Process+0x63c>)
 8000d0c:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION_TORQUE)
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <APP_Control_Process+0x608>)
 8000d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	f000 81fb 	beq.w	8001112 <APP_Control_Process+0x9e6>
			{
				APP_Control_Reset();
 8000d1c:	f7ff fc64 	bl	80005e8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <APP_Control_Process+0x608>)
 8000d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <APP_Control_Process+0x644>)
 8000d2a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d2c:	e1f1      	b.n	8001112 <APP_Control_Process+0x9e6>
 8000d2e:	bf00      	nop
 8000d30:	20000000 	.word	0x20000000
 8000d34:	200000dc 	.word	0x200000dc
 8000d38:	2000009c 	.word	0x2000009c
 8000d3c:	3dcccccd 	.word	0x3dcccccd
 8000d40:	42c80000 	.word	0x42c80000
 8000d44:	447a0000 	.word	0x447a0000
 8000d48:	3df5c28f 	.word	0x3df5c28f
 8000d4c:	20000064 	.word	0x20000064
 8000d50:	3f75c28f 	.word	0x3f75c28f
 8000d54:	20000090 	.word	0x20000090
 8000d58:	3d23d710 	.word	0x3d23d710
 8000d5c:	20000084 	.word	0x20000084
 8000d60:	00000000 	.word	0x00000000
 8000d64:	20000070 	.word	0x20000070
 8000d68:	2000008c 	.word	0x2000008c
 8000d6c:	3f6147ae 	.word	0x3f6147ae
 8000d70:	2000005c 	.word	0x2000005c


		case REG_CONTROL_MODE_POSITION_PROFIL:
			if(entering_state)
 8000d74:	4b9b      	ldr	r3, [pc, #620]	; (8000fe4 <APP_Control_Process+0x8b8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d044      	beq.n	8000e06 <APP_Control_Process+0x6da>
			{
				entering_state = false;
 8000d7c:	4b99      	ldr	r3, [pc, #612]	; (8000fe4 <APP_Control_Process+0x8b8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000d82:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000d86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d92:	ee17 3a90 	vmov	r3, s15
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b93      	ldr	r3, [pc, #588]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000da0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000da4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db0:	ee17 3a90 	vmov	r3, s15
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	121b      	asrs	r3, r3, #8
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b8a      	ldr	r3, [pc, #552]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 8000dc2:	4b89      	ldr	r3, [pc, #548]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000dc4:	7d1a      	ldrb	r2, [r3, #20]
 8000dc6:	4b88      	ldr	r3, [pc, #544]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 8000dcc:	4b86      	ldr	r3, [pc, #536]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000dce:	7d5a      	ldrb	r2, [r3, #21]
 8000dd0:	4b85      	ldr	r3, [pc, #532]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 8000dd6:	4b84      	ldr	r3, [pc, #528]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000dd8:	7e1a      	ldrb	r2, [r3, #24]
 8000dda:	4b83      	ldr	r3, [pc, #524]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8000de0:	4b81      	ldr	r3, [pc, #516]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000de2:	7e5a      	ldrb	r2, [r3, #25]
 8000de4:	4b80      	ldr	r3, [pc, #512]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000de6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000dea:	4b7f      	ldr	r3, [pc, #508]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000dec:	7e9a      	ldrb	r2, [r3, #26]
 8000dee:	4b7e      	ldr	r3, [pc, #504]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000df0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000df4:	4b7c      	ldr	r3, [pc, #496]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000df6:	7eda      	ldrb	r2, [r3, #27]
 8000df8:	4b7b      	ldr	r3, [pc, #492]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000dfa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 8000dfe:	4a7b      	ldr	r2, [pc, #492]	; (8000fec <APP_Control_Process+0x8c0>)
 8000e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e04:	6013      	str	r3, [r2, #0]
//				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
//				setpoint_pwm = ALPHA_PWM_SETPOINT * ( pid_current_kff * setpoint_current_ma +	pid_process(&pid_current,error_current,pid_current_kp,pid_current_ki,0.0f,LIMIT_PID_CURRENT_WINDUP) ) + (1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
//				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
//				setpoint_pwm = fconstrain(setpoint_pwm,-pwm_limit,pwm_limit);
//			}
			setpoint_pwm = 0.0f;
 8000e06:	4b7a      	ldr	r3, [pc, #488]	; (8000ff0 <APP_Control_Process+0x8c4>)
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION)
 8000e0e:	4b76      	ldr	r3, [pc, #472]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 817e 	beq.w	8001116 <APP_Control_Process+0x9ea>
			{
				APP_Control_Reset();
 8000e1a:	f7ff fbe5 	bl	80005e8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000e1e:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <APP_Control_Process+0x8c8>)
 8000e28:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e2a:	e174      	b.n	8001116 <APP_Control_Process+0x9ea>
		case REG_CONTROL_MODE_CURRENT:
			if(entering_state)
 8000e2c:	4b6d      	ldr	r3, [pc, #436]	; (8000fe4 <APP_Control_Process+0x8b8>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d03c      	beq.n	8000eae <APP_Control_Process+0x782>
			{
				entering_state = false;
 8000e34:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <APP_Control_Process+0x8b8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8000e3a:	4b6b      	ldr	r3, [pc, #428]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8000e42:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000e4a:	4b67      	ldr	r3, [pc, #412]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e4c:	7e9a      	ldrb	r2, [r3, #26]
 8000e4e:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e50:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000e54:	4b64      	ldr	r3, [pc, #400]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e56:	7eda      	ldrb	r2, [r3, #27]
 8000e58:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e5a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000e5e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000e62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e6e:	ee17 3a90 	vmov	r3, s15
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000e7c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000e80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8c:	ee17 3a90 	vmov	r3, s15
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	121b      	asrs	r3, r3, #8
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b53      	ldr	r3, [pc, #332]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8000e9e:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8000ea6:	4b50      	ldr	r3, [pc, #320]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			{
				float const goal_current = (int16_t)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8000eae:	4b4e      	ldr	r3, [pc, #312]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000eb0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	4b4b      	ldr	r3, [pc, #300]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000eba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ecc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				//float const current_limit = (float)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
				//setpoint_current_ma = fconstrain(goal_current,-current_limit,current_limit);
				setpoint_current_ma = goal_current;
 8000ed0:	4a49      	ldr	r2, [pc, #292]	; (8000ff8 <APP_Control_Process+0x8cc>)
 8000ed2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ed4:	6013      	str	r3, [r2, #0]
				// compute current error
				float const error_current = setpoint_current_ma - present_current_ma_on;
 8000ed6:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <APP_Control_Process+0x8cc>)
 8000ed8:	ed93 7a00 	vldr	s14, [r3]
 8000edc:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <APP_Control_Process+0x8d0>)
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/100.0f;
 8000eea:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	4a3d      	ldr	r2, [pc, #244]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000ef4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f02:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001000 <APP_Control_Process+0x8d4>
 8000f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/1000.0f;
 8000f0e:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000f10:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000f18:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f26:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001004 <APP_Control_Process+0x8d8>
 8000f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8000f32:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000f34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	4a2b      	ldr	r2, [pc, #172]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000f3c:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000f40:	4313      	orrs	r3, r2
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f4a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001000 <APP_Control_Process+0x8d4>
 8000f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f52:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000f58:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000f60:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8000f64:	4313      	orrs	r3, r2
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_current_kff * setpoint_current_ma +
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <APP_Control_Process+0x8cc>)
 8000f74:	ed93 7a00 	vldr	s14, [r3]
 8000f78:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000f7c:	ee27 8a27 	vmul.f32	s16, s14, s15
								pid_process_antiwindup_clamp(
 8000f80:	eddf 2a21 	vldr	s5, [pc, #132]	; 8001008 <APP_Control_Process+0x8dc>
 8000f84:	ed97 2a1a 	vldr	s4, [r7, #104]	; 0x68
 8000f88:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8001008 <APP_Control_Process+0x8dc>
 8000f8c:	ed97 1a1c 	vldr	s2, [r7, #112]	; 0x70
 8000f90:	edd7 0a1d 	vldr	s1, [r7, #116]	; 0x74
 8000f94:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8000f98:	481c      	ldr	r0, [pc, #112]	; (800100c <APP_Control_Process+0x8e0>)
 8000f9a:	f001 fb50 	bl	800263e <pid_process_antiwindup_clamp>
 8000f9e:	eef0 7a40 	vmov.f32	s15, s0
								pid_current_kff * setpoint_current_ma +
 8000fa2:	ee78 7a27 	vadd.f32	s15, s16, s15
						ALPHA_PWM_SETPOINT * (
 8000fa6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001010 <APP_Control_Process+0x8e4>
 8000faa:	ee27 7a87 	vmul.f32	s14, s15, s14
										0.0f,
										pwm_limit,
										0.0f
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <APP_Control_Process+0x8c4>)
 8000fb0:	edd3 7a00 	vldr	s15, [r3]
 8000fb4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001014 <APP_Control_Process+0x8e8>
 8000fb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8000fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <APP_Control_Process+0x8c4>)
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_CURRENT)
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	f000 80a4 	beq.w	800111a <APP_Control_Process+0x9ee>
			{
				APP_Control_Reset();
 8000fd2:	f7ff fb09 	bl	80005e8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <APP_Control_Process+0x8bc>)
 8000fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <APP_Control_Process+0x8c8>)
 8000fe0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000fe2:	e09a      	b.n	800111a <APP_Control_Process+0x9ee>
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	200000dc 	.word	0x200000dc
 8000fec:	2000009c 	.word	0x2000009c
 8000ff0:	2000008c 	.word	0x2000008c
 8000ff4:	2000005c 	.word	0x2000005c
 8000ff8:	20000090 	.word	0x20000090
 8000ffc:	20000084 	.word	0x20000084
 8001000:	42c80000 	.word	0x42c80000
 8001004:	447a0000 	.word	0x447a0000
 8001008:	00000000 	.word	0x00000000
 800100c:	20000070 	.word	0x20000070
 8001010:	3df5c28f 	.word	0x3df5c28f
 8001014:	3f6147ae 	.word	0x3f6147ae
		case REG_CONTROL_MODE_PWM:
			if(entering_state)
 8001018:	4b68      	ldr	r3, [pc, #416]	; (80011bc <APP_Control_Process+0xa90>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d03a      	beq.n	8001096 <APP_Control_Process+0x96a>
			{
				entering_state = false;
 8001020:	4b66      	ldr	r3, [pc, #408]	; (80011bc <APP_Control_Process+0xa90>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = 0;
 8001026:	4b66      	ldr	r3, [pc, #408]	; (80011c0 <APP_Control_Process+0xa94>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = 0;
 800102e:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <APP_Control_Process+0xa94>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001036:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800103a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001046:	ee17 3a90 	vmov	r3, s15
 800104a:	b21b      	sxth	r3, r3
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b5c      	ldr	r3, [pc, #368]	; (80011c0 <APP_Control_Process+0xa94>)
 8001050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001054:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001058:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800105c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001064:	ee17 3a90 	vmov	r3, s15
 8001068:	b21b      	sxth	r3, r3
 800106a:	121b      	asrs	r3, r3, #8
 800106c:	b21b      	sxth	r3, r3
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <APP_Control_Process+0xa94>)
 8001072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001076:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <APP_Control_Process+0xa94>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 800107e:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <APP_Control_Process+0xa94>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <APP_Control_Process+0xa94>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <APP_Control_Process+0xa94>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			}
			// compute pwm setpoint from goal pwm
			{
				float const goal_pwm = (int16_t)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001096:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <APP_Control_Process+0xa94>)
 8001098:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <APP_Control_Process+0xa94>)
 80010a2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_MAX_PWM_100_L],regs[REG_MAX_PWM_100_H]));
 80010b8:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <APP_Control_Process+0xa94>)
 80010ba:	7edb      	ldrb	r3, [r3, #27]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	4a40      	ldr	r2, [pc, #256]	; (80011c0 <APP_Control_Process+0xa94>)
 80010c0:	7e92      	ldrb	r2, [r2, #26]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010cc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
				setpoint_pwm = fconstrain(goal_pwm,-pwm_limit,pwm_limit);
 80010d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80010d4:	eef1 7a67 	vneg.f32	s15, s15
 80010d8:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 80010dc:	eef0 0a67 	vmov.f32	s1, s15
 80010e0:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 80010e4:	f001 fa26 	bl	8002534 <fconstrain>
 80010e8:	eef0 7a40 	vmov.f32	s15, s0
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <APP_Control_Process+0xa98>)
 80010ee:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_PWM)
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <APP_Control_Process+0xa94>)
 80010f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d010      	beq.n	800111e <APP_Control_Process+0x9f2>
			{
				APP_Control_Reset();
 80010fc:	f7ff fa74 	bl	80005e8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <APP_Control_Process+0xa94>)
 8001102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001106:	461a      	mov	r2, r3
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <APP_Control_Process+0xa9c>)
 800110a:	601a      	str	r2, [r3, #0]
			}
			break;
 800110c:	e007      	b.n	800111e <APP_Control_Process+0x9f2>
			break;
 800110e:	bf00      	nop
 8001110:	e006      	b.n	8001120 <APP_Control_Process+0x9f4>
			break;
 8001112:	bf00      	nop
 8001114:	e004      	b.n	8001120 <APP_Control_Process+0x9f4>
			break;
 8001116:	bf00      	nop
 8001118:	e002      	b.n	8001120 <APP_Control_Process+0x9f4>
			break;
 800111a:	bf00      	nop
 800111c:	e000      	b.n	8001120 <APP_Control_Process+0x9f4>
			break;
 800111e:	bf00      	nop
		}

		// common
		float const pwm_inv = regs[REG_INV_ROTATION_MOTOR] > 0 ? -1.0f : 1.0f;
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <APP_Control_Process+0xa94>)
 8001122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <APP_Control_Process+0xa02>
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <APP_Control_Process+0xaa0>)
 800112c:	e001      	b.n	8001132 <APP_Control_Process+0xa06>
 800112e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001132:	613b      	str	r3, [r7, #16]
		float pwm = pwm_inv * setpoint_pwm;
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <APP_Control_Process+0xa98>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ed97 7a04 	vldr	s14, [r7, #16]
 800113e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001142:	edc7 7a03 	vstr	s15, [r7, #12]

		// apply pwm
		if(pwm>0.0f)
 8001146:	edd7 7a03 	vldr	s15, [r7, #12]
 800114a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	dd11      	ble.n	8001178 <APP_Control_Process+0xa4c>
		{
			//__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm);
			//__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_COAST);
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE);
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <APP_Control_Process+0xaa4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2263      	movs	r2, #99	; 0x63
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE-pwm);
 800115c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80011d4 <APP_Control_Process+0xaa8>
 8001160:	edd7 7a03 	vldr	s15, [r7, #12]
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <APP_Control_Process+0xaa4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001170:	ee17 2a90 	vmov	r2, s15
 8001174:	639a      	str	r2, [r3, #56]	; 0x38
 8001176:	e039      	b.n	80011ec <APP_Control_Process+0xac0>


		}
		else if(pwm<0.0f)
 8001178:	edd7 7a03 	vldr	s15, [r7, #12]
 800117c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d511      	bpl.n	80011aa <APP_Control_Process+0xa7e>
		{
			//__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_COAST);
			//__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,-pwm);
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE+pwm);
 8001186:	edd7 7a03 	vldr	s15, [r7, #12]
 800118a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80011d4 <APP_Control_Process+0xaa8>
 800118e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <APP_Control_Process+0xaa4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119a:	ee17 2a90 	vmov	r2, s15
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE);
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <APP_Control_Process+0xaa4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2263      	movs	r2, #99	; 0x63
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
 80011a8:	e020      	b.n	80011ec <APP_Control_Process+0xac0>
		}
		else
		{
			// motor brake
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE);
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <APP_Control_Process+0xaa4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2263      	movs	r2, #99	; 0x63
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE);
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <APP_Control_Process+0xaa4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2263      	movs	r2, #99	; 0x63
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
 80011ba:	e017      	b.n	80011ec <APP_Control_Process+0xac0>
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200000dc 	.word	0x200000dc
 80011c4:	2000008c 	.word	0x2000008c
 80011c8:	2000005c 	.word	0x2000005c
 80011cc:	bf800000 	.word	0xbf800000
 80011d0:	200001c0 	.word	0x200001c0
 80011d4:	42c60000 	.word	0x42c60000
		}
	}
	else
	{
		APP_Control_Reset();
 80011d8:	f7ff fa06 	bl	80005e8 <APP_Control_Reset>
		// motor brake
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE);
 80011dc:	4bc0      	ldr	r3, [pc, #768]	; (80014e0 <APP_Control_Process+0xdb4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2263      	movs	r2, #99	; 0x63
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE);
 80011e4:	4bbe      	ldr	r3, [pc, #760]	; (80014e0 <APP_Control_Process+0xdb4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2263      	movs	r2, #99	; 0x63
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// live update of RAM regs
	regs[REG_PRESENT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(present_position_deg*10.0f));
 80011ec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80011f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fc:	ee17 3a90 	vmov	r3, s15
 8001200:	b29b      	uxth	r3, r3
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4bb7      	ldr	r3, [pc, #732]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001206:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(present_position_deg*10.0f));
 800120a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800120e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	b29b      	uxth	r3, r3
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4baf      	ldr	r3, [pc, #700]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001228:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	regs[REG_PRESENT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)present_velocity_dps);
 800122c:	4bae      	ldr	r3, [pc, #696]	; (80014e8 <APP_Control_Process+0xdbc>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001236:	ee17 3a90 	vmov	r3, s15
 800123a:	b21b      	sxth	r3, r3
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4ba9      	ldr	r3, [pc, #676]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001240:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)present_velocity_dps);
 8001244:	4ba8      	ldr	r3, [pc, #672]	; (80014e8 <APP_Control_Process+0xdbc>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124e:	ee17 3a90 	vmov	r3, s15
 8001252:	b21b      	sxth	r3, r3
 8001254:	121b      	asrs	r3, r3, #8
 8001256:	b21b      	sxth	r3, r3
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4ba2      	ldr	r3, [pc, #648]	; (80014e4 <APP_Control_Process+0xdb8>)
 800125c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	regs[REG_PRESENT_CURRENT_MA_L] = LOW_BYTE((int16_t)present_current_ma_on);
 8001260:	4ba2      	ldr	r3, [pc, #648]	; (80014ec <APP_Control_Process+0xdc0>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126a:	ee17 3a90 	vmov	r3, s15
 800126e:	b21b      	sxth	r3, r3
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b9c      	ldr	r3, [pc, #624]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = HIGH_BYTE((int16_t)present_current_ma_on);
 8001278:	4b9c      	ldr	r3, [pc, #624]	; (80014ec <APP_Control_Process+0xdc0>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001282:	ee17 3a90 	vmov	r3, s15
 8001286:	b21b      	sxth	r3, r3
 8001288:	121b      	asrs	r3, r3, #8
 800128a:	b21b      	sxth	r3, r3
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b95      	ldr	r3, [pc, #596]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001290:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	regs[REG_PRESENT_VOLTAGE] = (uint8_t)(voltage_input_adc/4096.0f*3.3f*24.2f/2.2f*10.0f*VOLTAGE_CALIBRATION);
 8001294:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <APP_Control_Process+0xdc4>)
 8001296:	ed93 7a00 	vldr	s14, [r3]
 800129a:	eddf 6a96 	vldr	s13, [pc, #600]	; 80014f4 <APP_Control_Process+0xdc8>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80014f8 <APP_Control_Process+0xdcc>
 80012a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012aa:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80014fc <APP_Control_Process+0xdd0>
 80012ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012b2:	eddf 6a93 	vldr	s13, [pc, #588]	; 8001500 <APP_Control_Process+0xdd4>
 80012b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c2:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001504 <APP_Control_Process+0xdd8>
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80012d2:	793b      	ldrb	r3, [r7, #4]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b83      	ldr	r3, [pc, #524]	; (80014e4 <APP_Control_Process+0xdb8>)
 80012d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 80012dc:	4b81      	ldr	r3, [pc, #516]	; (80014e4 <APP_Control_Process+0xdb8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	float moving_threshold = regs[REG_MOVING_THRESHOLD_DPS];
 80012e4:	4b7f      	ldr	r3, [pc, #508]	; (80014e4 <APP_Control_Process+0xdb8>)
 80012e6:	7fdb      	ldrb	r3, [r3, #31]
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f0:	edc7 7a02 	vstr	s15, [r7, #8]
	regs[REG_MOVING] = ( fabs(present_velocity_dps) > moving_threshold ) ? 1 : 0;
 80012f4:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <APP_Control_Process+0xdbc>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	eef0 7ae7 	vabs.f32	s15, s15
 80012fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	bf4c      	ite	mi
 800130c:	2301      	movmi	r3, #1
 800130e:	2300      	movpl	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001316:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 800131a:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <APP_Control_Process+0xddc>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132c:	ee17 3a90 	vmov	r3, s15
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b6b      	ldr	r3, [pc, #428]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001336:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <APP_Control_Process+0xddc>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134c:	ee17 3a90 	vmov	r3, s15
 8001350:	b29b      	uxth	r3, r3
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	b29b      	uxth	r3, r3
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b62      	ldr	r3, [pc, #392]	; (80014e4 <APP_Control_Process+0xdb8>)
 800135a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	//regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)setpoint_velocity_dps);
	//regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)setpoint_velocity_dps);
	regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)pid_position.err_integral);
 800135e:	4b6b      	ldr	r3, [pc, #428]	; (800150c <APP_Control_Process+0xde0>)
 8001360:	edd3 7a01 	vldr	s15, [r3, #4]
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	ee17 3a90 	vmov	r3, s15
 800136c:	b21b      	sxth	r3, r3
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b5c      	ldr	r3, [pc, #368]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001372:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)pid_position.err_integral);
 8001376:	4b65      	ldr	r3, [pc, #404]	; (800150c <APP_Control_Process+0xde0>)
 8001378:	edd3 7a01 	vldr	s15, [r3, #4]
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 3a90 	vmov	r3, s15
 8001384:	b21b      	sxth	r3, r3
 8001386:	121b      	asrs	r3, r3, #8
 8001388:	b21b      	sxth	r3, r3
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <APP_Control_Process+0xdb8>)
 800138e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	regs[REG_SETPOINT_CURRENT_MA_L] = LOW_BYTE((int16_t)setpoint_current_ma);
 8001392:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <APP_Control_Process+0xde4>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139c:	ee17 3a90 	vmov	r3, s15
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <APP_Control_Process+0xdb8>)
 80013a6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = HIGH_BYTE((int16_t)setpoint_current_ma);
 80013aa:	4b59      	ldr	r3, [pc, #356]	; (8001510 <APP_Control_Process+0xde4>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b4:	ee17 3a90 	vmov	r3, s15
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	121b      	asrs	r3, r3, #8
 80013bc:	b21b      	sxth	r3, r3
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <APP_Control_Process+0xdb8>)
 80013c2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	regs[REG_SETPOINT_PWM_100_L] = LOW_BYTE((int16_t)setpoint_pwm);
 80013c6:	4b53      	ldr	r3, [pc, #332]	; (8001514 <APP_Control_Process+0xde8>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d0:	ee17 3a90 	vmov	r3, s15
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <APP_Control_Process+0xdb8>)
 80013da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = HIGH_BYTE((int16_t)setpoint_pwm);
 80013de:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <APP_Control_Process+0xde8>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e8:	ee17 3a90 	vmov	r3, s15
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	121b      	asrs	r3, r3, #8
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <APP_Control_Process+0xdb8>)
 80013f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	regs[POSITION_INPUT_ADC_L] = LOW_BYTE((uint16_t)position_input_adc);
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <APP_Control_Process+0xdec>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001404:	ee17 3a90 	vmov	r3, s15
 8001408:	b29b      	uxth	r3, r3
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <APP_Control_Process+0xdb8>)
 800140e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[POSITION_INPUT_ADC_H] = HIGH_BYTE((uint16_t)position_input_adc);
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <APP_Control_Process+0xdec>)
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141c:	ee17 3a90 	vmov	r3, s15
 8001420:	b29b      	uxth	r3, r3
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	b29b      	uxth	r3, r3
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <APP_Control_Process+0xdb8>)
 800142a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

	regs[CURRENT_INPUT_ADC_L] = LOW_BYTE((uint16_t)motor_current_input_adc);
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <APP_Control_Process+0xdf0>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001436:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[CURRENT_INPUT_ADC_H] = HIGH_BYTE((uint16_t)motor_current_input_adc);
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <APP_Control_Process+0xdf0>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001446:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	regs[PRESENT_CURRENT_ON_L] = LOW_BYTE((int16_t)present_current_ma_on);
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <APP_Control_Process+0xdc0>)
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 3a90 	vmov	r3, s15
 8001458:	b21b      	sxth	r3, r3
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <APP_Control_Process+0xdb8>)
 800145e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[PRESENT_CURRENT_ON_H] = HIGH_BYTE((int16_t)present_current_ma_on);
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <APP_Control_Process+0xdc0>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146c:	ee17 3a90 	vmov	r3, s15
 8001470:	b21b      	sxth	r3, r3
 8001472:	121b      	asrs	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <APP_Control_Process+0xdb8>)
 800147a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

	regs[PRESENT_CURRENT_OFF_L] = LOW_BYTE((int16_t)present_current_ma_off);
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <APP_Control_Process+0xdf4>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001488:	ee17 3a90 	vmov	r3, s15
 800148c:	b21b      	sxth	r3, r3
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <APP_Control_Process+0xdb8>)
 8001492:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[PRESENT_CURRENT_OFF_H] = HIGH_BYTE((int16_t)present_current_ma_off);
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <APP_Control_Process+0xdf4>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a0:	ee17 3a90 	vmov	r3, s15
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	121b      	asrs	r3, r3, #8
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <APP_Control_Process+0xdb8>)
 80014ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	regs[REG_EST_CURRENT_SENSE_B_L] = LOW_BYTE((uint16_t)b);
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <APP_Control_Process+0xdf8>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014bc:	ee17 3a90 	vmov	r3, s15
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <APP_Control_Process+0xdb8>)
 80014c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	regs[REG_EST_CURRENT_SENSE_B_H] = HIGH_BYTE((uint16_t)b);
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <APP_Control_Process+0xdf8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d4:	ee17 3a90 	vmov	r3, s15
 80014d8:	b29b      	uxth	r3, r3
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	e023      	b.n	8001528 <APP_Control_Process+0xdfc>
 80014e0:	200001c0 	.word	0x200001c0
 80014e4:	200000dc 	.word	0x200000dc
 80014e8:	20000080 	.word	0x20000080
 80014ec:	20000084 	.word	0x20000084
 80014f0:	20000058 	.word	0x20000058
 80014f4:	45800000 	.word	0x45800000
 80014f8:	40533333 	.word	0x40533333
 80014fc:	41c1999a 	.word	0x41c1999a
 8001500:	400ccccd 	.word	0x400ccccd
 8001504:	3f8a3d71 	.word	0x3f8a3d71
 8001508:	2000009c 	.word	0x2000009c
 800150c:	20000064 	.word	0x20000064
 8001510:	20000090 	.word	0x20000090
 8001514:	2000008c 	.word	0x2000008c
 8001518:	20000054 	.word	0x20000054
 800151c:	20000052 	.word	0x20000052
 8001520:	20000088 	.word	0x20000088
 8001524:	200000a0 	.word	0x200000a0
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <APP_Control_Process+0xe1c>)
 800152c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
// steps
	++counter;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <APP_Control_Process+0xe20>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <APP_Control_Process+0xe20>)
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e000      	b.n	800153e <APP_Control_Process+0xe12>
		return;
 800153c:	bf00      	nop
}
 800153e:	3798      	adds	r7, #152	; 0x98
 8001540:	46bd      	mov	sp, r7
 8001542:	ecbd 8b02 	vpop	{d8}
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200000dc 	.word	0x200000dc
 800154c:	20000060 	.word	0x20000060

08001550 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a94      	ldr	r2, [pc, #592]	; (80017ac <HAL_ADC_ConvCpltCallback+0x25c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	f040 8121 	bne.w	80017a4 <HAL_ADC_ConvCpltCallback+0x254>
	{
		motor_current_input_adc = ADC_DMA[0];
 8001562:	4b93      	ldr	r3, [pc, #588]	; (80017b0 <HAL_ADC_ConvCpltCallback+0x260>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b92      	ldr	r3, [pc, #584]	; (80017b4 <HAL_ADC_ConvCpltCallback+0x264>)
 800156a:	801a      	strh	r2, [r3, #0]
		position_input_adc = ALPHA_POSITION * (float)(ADC_DMA[1]) + (1.0f-ALPHA_POSITION) * position_input_adc;
 800156c:	4b90      	ldr	r3, [pc, #576]	; (80017b0 <HAL_ADC_ConvCpltCallback+0x260>)
 800156e:	885b      	ldrh	r3, [r3, #2]
 8001570:	b29b      	uxth	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80017b8 <HAL_ADC_ConvCpltCallback+0x268>
 800157e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001582:	4b8e      	ldr	r3, [pc, #568]	; (80017bc <HAL_ADC_ConvCpltCallback+0x26c>)
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80017c0 <HAL_ADC_ConvCpltCallback+0x270>
 800158c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_ADC_ConvCpltCallback+0x26c>)
 8001596:	edc3 7a00 	vstr	s15, [r3]
		voltage_input_adc = ALPHA_VOLTAGE * (float)(ADC_DMA[2]) + (1.0f-ALPHA_VOLTAGE) * voltage_input_adc;
 800159a:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <HAL_ADC_ConvCpltCallback+0x260>)
 800159c:	889b      	ldrh	r3, [r3, #4]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80017b8 <HAL_ADC_ConvCpltCallback+0x268>
 80015ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b0:	4b84      	ldr	r3, [pc, #528]	; (80017c4 <HAL_ADC_ConvCpltCallback+0x274>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eddf 6a82 	vldr	s13, [pc, #520]	; 80017c0 <HAL_ADC_ConvCpltCallback+0x270>
 80015ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c2:	4b80      	ldr	r3, [pc, #512]	; (80017c4 <HAL_ADC_ConvCpltCallback+0x274>)
 80015c4:	edc3 7a00 	vstr	s15, [r3]

		// motor current is always positive in FORWARD and REVERSE drive phase (unipolar current sensing),
		// get sign from PWM setpoint
		float const pwm_sign = ( setpoint_pwm < 0.0f ) ? -1.0f : 1.0f;
 80015c8:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x278>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	d501      	bpl.n	80015dc <HAL_ADC_ConvCpltCallback+0x8c>
 80015d8:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <HAL_ADC_ConvCpltCallback+0x27c>)
 80015da:	e001      	b.n	80015e0 <HAL_ADC_ConvCpltCallback+0x90>
 80015dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015e0:	61fb      	str	r3, [r7, #28]
		float const pwm_ratio = fabsf(setpoint_pwm)/100.0f;
 80015e2:	4b79      	ldr	r3, [pc, #484]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x278>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	eeb0 7ae7 	vabs.f32	s14, s15
 80015ec:	eddf 6a78 	vldr	s13, [pc, #480]	; 80017d0 <HAL_ADC_ConvCpltCallback+0x280>
 80015f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f4:	edc7 7a06 	vstr	s15, [r7, #24]
		float const pwm_ratio_inv = 0.99f-pwm_ratio;
 80015f8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80017d4 <HAL_ADC_ConvCpltCallback+0x284>
 80015fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001604:	edc7 7a05 	vstr	s15, [r7, #20]
		// motor current cannot be estimated if pulse is too short for ADC conversion delay
		bool pwm_too_small = pwm_ratio < 0.02f;
 8001608:	edd7 7a06 	vldr	s15, [r7, #24]
 800160c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80017d8 <HAL_ADC_ConvCpltCallback+0x288>
 8001610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	bf4c      	ite	mi
 800161a:	2301      	movmi	r3, #1
 800161c:	2300      	movpl	r3, #0
 800161e:	74fb      	strb	r3, [r7, #19]

		// instant motor current = ( ADC - b ) / a
		float const a = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_A_L],regs[REG_CAL_CURRENT_SENSE_A_H]));
 8001620:	4b6e      	ldr	r3, [pc, #440]	; (80017dc <HAL_ADC_ConvCpltCallback+0x28c>)
 8001622:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <HAL_ADC_ConvCpltCallback+0x28c>)
 800162a:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800162e:	4313      	orrs	r3, r2
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001638:	edc7 7a03 	vstr	s15, [r7, #12]
		// init b value from EEPROM
		if(b==0)
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x290>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d10e      	bne.n	800166a <HAL_ADC_ConvCpltCallback+0x11a>
		{
			b = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_B_L],regs[REG_CAL_CURRENT_SENSE_B_H]));
 800164c:	4b63      	ldr	r3, [pc, #396]	; (80017dc <HAL_ADC_ConvCpltCallback+0x28c>)
 800164e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	4a61      	ldr	r2, [pc, #388]	; (80017dc <HAL_ADC_ConvCpltCallback+0x28c>)
 8001656:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800165a:	4313      	orrs	r3, r2
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001664:	4b5e      	ldr	r3, [pc, #376]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x290>)
 8001666:	edc3 7a00 	vstr	s15, [r3]
		// when PWM is ON, TIMER COUNTER is 0
		// when PWM is OFF, TIMER COUNTER is 99

		// in DRIVE phase
		// PWM is ON
		if(__HAL_TIM_GET_COUNTER(&htim4) > 50)
 800166a:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <HAL_ADC_ConvCpltCallback+0x294>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	2b32      	cmp	r3, #50	; 0x32
 8001672:	d93a      	bls.n	80016ea <HAL_ADC_ConvCpltCallback+0x19a>
		{
			if(pwm_too_small)
 8001674:	7cfb      	ldrb	r3, [r7, #19]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00a      	beq.n	8001690 <HAL_ADC_ConvCpltCallback+0x140>
			{
				// We suppose that average current is very low ==> zero
				present_current_ma_on = (1.0f - ALPHA_CURRENT_SENSE)*present_current_ma_on;
 800167a:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <HAL_ADC_ConvCpltCallback+0x298>)
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80017c0 <HAL_ADC_ConvCpltCallback+0x270>
 8001684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <HAL_ADC_ConvCpltCallback+0x298>)
 800168a:	edc3 7a00 	vstr	s15, [r3]
 800168e:	e084      	b.n	800179a <HAL_ADC_ConvCpltCallback+0x24a>
			}
			else
			{
				present_current_ma_on = (1.0f - ALPHA_CURRENT_SENSE)*present_current_ma_on + ALPHA_CURRENT_SENSE * (float)((int16_t)motor_current_input_adc-b)/a*1000.0f*pwm_sign*pwm_ratio;
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <HAL_ADC_ConvCpltCallback+0x298>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80017c0 <HAL_ADC_ConvCpltCallback+0x270>
 800169a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800169e:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <HAL_ADC_ConvCpltCallback+0x264>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x290>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016b6:	eddf 6a40 	vldr	s13, [pc, #256]	; 80017b8 <HAL_ADC_ConvCpltCallback+0x268>
 80016ba:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80016be:	edd7 6a03 	vldr	s13, [r7, #12]
 80016c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016c6:	eddf 6a49 	vldr	s13, [pc, #292]	; 80017ec <HAL_ADC_ConvCpltCallback+0x29c>
 80016ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80016d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_ADC_ConvCpltCallback+0x298>)
 80016e4:	edc3 7a00 	vstr	s15, [r3]
 80016e8:	e057      	b.n	800179a <HAL_ADC_ConvCpltCallback+0x24a>
		// in COAST phase
		// PWM is OFF
		else
		{
			// self-calibrate ADC offset (b)
			if(setpoint_pwm==0.0f)
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x278>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f8:	d115      	bne.n	8001726 <HAL_ADC_ConvCpltCallback+0x1d6>
			{
				b = ALPHA_B * (float)motor_current_input_adc + (1.0f-ALPHA_B)*b;
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_ADC_ConvCpltCallback+0x264>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001706:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80017f0 <HAL_ADC_ConvCpltCallback+0x2a0>
 800170a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x290>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	eddf 6a37 	vldr	s13, [pc, #220]	; 80017f4 <HAL_ADC_ConvCpltCallback+0x2a4>
 8001718:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x290>)
 8001722:	edc3 7a00 	vstr	s15, [r3]
			}

			if(pwm_too_small)
 8001726:	7cfb      	ldrb	r3, [r7, #19]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00a      	beq.n	8001742 <HAL_ADC_ConvCpltCallback+0x1f2>
			{
				// We suppose that average current is very low ==> zero
				present_current_ma_off = (1.0f - ALPHA_CURRENT_SENSE)*present_current_ma_off;
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80017c0 <HAL_ADC_ConvCpltCallback+0x270>
 8001736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800173c:	edc3 7a00 	vstr	s15, [r3]
 8001740:	e02b      	b.n	800179a <HAL_ADC_ConvCpltCallback+0x24a>
			}
			else
			{
				present_current_ma_off = (1.0f - ALPHA_CURRENT_SENSE)*present_current_ma_off + ALPHA_CURRENT_SENSE * (float)((int16_t)motor_current_input_adc-b)/a*1000.0f*pwm_sign*pwm_ratio_inv;
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80017c0 <HAL_ADC_ConvCpltCallback+0x270>
 800174c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_ADC_ConvCpltCallback+0x264>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b21b      	sxth	r3, r3
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x290>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001768:	eddf 6a13 	vldr	s13, [pc, #76]	; 80017b8 <HAL_ADC_ConvCpltCallback+0x268>
 800176c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8001770:	edd7 6a03 	vldr	s13, [r7, #12]
 8001774:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001778:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80017ec <HAL_ADC_ConvCpltCallback+0x29c>
 800177c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001780:	edd7 7a07 	vldr	s15, [r7, #28]
 8001784:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001788:	edd7 7a05 	vldr	s15, [r7, #20]
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		// restart adc conv trigger
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 800179a:	2203      	movs	r2, #3
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <HAL_ADC_ConvCpltCallback+0x260>)
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <HAL_ADC_ConvCpltCallback+0x25c>)
 80017a0:	f002 fd1a 	bl	80041d8 <HAL_ADC_Start_DMA>
//		if(__HAL_TIM_GET_COUNTER(&htim4) < 50)
//		{
//			position_input_adc = ALPHA_POSITION * HAL_ADC_GetValue(&hadc2) + (1.0f-ALPHA_POSITION) * position_input_adc;
//		}
//	}
}
 80017a4:	bf00      	nop
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000294 	.word	0x20000294
 80017b0:	2000004c 	.word	0x2000004c
 80017b4:	20000052 	.word	0x20000052
 80017b8:	3d4ccccd 	.word	0x3d4ccccd
 80017bc:	20000054 	.word	0x20000054
 80017c0:	3f733333 	.word	0x3f733333
 80017c4:	20000058 	.word	0x20000058
 80017c8:	2000008c 	.word	0x2000008c
 80017cc:	bf800000 	.word	0xbf800000
 80017d0:	42c80000 	.word	0x42c80000
 80017d4:	3f7d70a4 	.word	0x3f7d70a4
 80017d8:	3ca3d70a 	.word	0x3ca3d70a
 80017dc:	200000dc 	.word	0x200000dc
 80017e0:	200000a0 	.word	0x200000a0
 80017e4:	200001c0 	.word	0x200001c0
 80017e8:	20000084 	.word	0x20000084
 80017ec:	447a0000 	.word	0x447a0000
 80017f0:	3a83126f 	.word	0x3a83126f
 80017f4:	3f7fbe77 	.word	0x3f7fbe77
 80017f8:	20000088 	.word	0x20000088

080017fc <factory_reset_eeprom_regs>:
#include "stm32g4xx_hal.h"

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 8001800:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001802:	225c      	movs	r2, #92	; 0x5c
 8001804:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 8001806:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001808:	2200      	movs	r2, #0
 800180a:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 800180c:	4b5c      	ldr	r3, [pc, #368]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800180e:	2200      	movs	r2, #0
 8001810:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 8001812:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001814:	2201      	movs	r2, #1
 8001816:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800181a:	2203      	movs	r2, #3
 800181c:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 800181e:	4b58      	ldr	r3, [pc, #352]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001820:	2200      	movs	r2, #0
 8001822:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8001824:	4b56      	ldr	r3, [pc, #344]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001826:	221e      	movs	r2, #30
 8001828:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 800182a:	4b55      	ldr	r3, [pc, #340]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800182c:	2200      	movs	r2, #0
 800182e:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001832:	2296      	movs	r2, #150	; 0x96
 8001834:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8001836:	4b52      	ldr	r3, [pc, #328]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001838:	2200      	movs	r2, #0
 800183a:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800183e:	2220      	movs	r2, #32
 8001840:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8001842:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001844:	2203      	movs	r2, #3
 8001846:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8001848:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800184a:	2240      	movs	r2, #64	; 0x40
 800184c:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001850:	221f      	movs	r2, #31
 8001852:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8001854:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001856:	22fa      	movs	r2, #250	; 0xfa
 8001858:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 800185a:	4b49      	ldr	r3, [pc, #292]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800185c:	2200      	movs	r2, #0
 800185e:	765a      	strb	r2, [r3, #25]
	regs[REG_MAX_PWM_100_L] = LOW_BYTE(REG_MAX_PWM_100_VALUE);
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001862:	2232      	movs	r2, #50	; 0x32
 8001864:	769a      	strb	r2, [r3, #26]
	regs[REG_MAX_PWM_100_H] = HIGH_BYTE(REG_MAX_PWM_100_VALUE);
 8001866:	4b46      	ldr	r3, [pc, #280]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001868:	2200      	movs	r2, #0
 800186a:	76da      	strb	r2, [r3, #27]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 800186c:	4b44      	ldr	r3, [pc, #272]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800186e:	223c      	movs	r2, #60	; 0x3c
 8001870:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 8001872:	4b43      	ldr	r3, [pc, #268]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001874:	222d      	movs	r2, #45	; 0x2d
 8001876:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 8001878:	4b41      	ldr	r3, [pc, #260]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800187a:	225f      	movs	r2, #95	; 0x5f
 800187c:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 800187e:	4b40      	ldr	r3, [pc, #256]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001880:	2205      	movs	r2, #5
 8001882:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 8001884:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001886:	2202      	movs	r2, #2
 8001888:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 800188c:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001896:	2224      	movs	r2, #36	; 0x24
 8001898:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_MIN_POSITION_ADC_L] = LOW_BYTE(REG_MIN_POSITION_ADC_VALUE);
 800189c:	4b38      	ldr	r3, [pc, #224]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800189e:	2232      	movs	r2, #50	; 0x32
 80018a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MIN_POSITION_ADC_H] = HIGH_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MAX_POSITION_ADC_L] = LOW_BYTE(REG_MAX_POSITION_ADC_VALUE);
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018ae:	226e      	movs	r2, #110	; 0x6e
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MAX_POSITION_ADC_H] = HIGH_BYTE(REG_MAX_POSITION_ADC_VALUE);
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018b6:	220f      	movs	r2, #15
 80018b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_MAX_ROTATION_DEG] = REG_MAX_ROTATION_DEG_VALUE;
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018be:	22b4      	movs	r2, #180	; 0xb4
 80018c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	regs[REG_INV_ROTATION_MOTOR] = REG_INV_ROTATION_MOTOR_VALUE;
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	regs[REG_INV_ROTATION_SENSOR] = REG_INV_ROTATION_SENSOR_VALUE;
 80018cc:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018d6:	22d0      	movs	r2, #208	; 0xd0
 80018d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018de:	2207      	movs	r2, #7
 80018e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018e6:	2228      	movs	r2, #40	; 0x28
 80018e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018f6:	22d0      	movs	r2, #208	; 0xd0
 80018f8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 80018fe:	2207      	movs	r2, #7
 8001900:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	regs[REG_PID_CURRENT_KP_L] = LOW_BYTE(REG_PID_CURRENT_KP_VALUE);
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001926:	22e8      	movs	r2, #232	; 0xe8
 8001928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_CURRENT_KP_H] = HIGH_BYTE(REG_PID_CURRENT_KP_VALUE);
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800192e:	2203      	movs	r2, #3
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_CURRENT_KI_L] = LOW_BYTE(REG_PID_CURRENT_KI_VALUE);
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_CURRENT_KI_H] = HIGH_BYTE(REG_PID_CURRENT_KI_VALUE);
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_CURRENT_KFF_L] = LOW_BYTE(REG_PID_CURRENT_KFF_VALUE);
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001946:	220a      	movs	r2, #10
 8001948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_CURRENT_KFF_VALUE);
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_CAL_CURRENT_SENSE_A_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_CAL_CURRENT_SENSE_A_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800195e:	2207      	movs	r2, #7
 8001960:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_CAL_CURRENT_SENSE_B_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001966:	22b5      	movs	r2, #181	; 0xb5
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_CAL_CURRENT_SENSE_B_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 800196e:	2204      	movs	r2, #4
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 8001974:	2140      	movs	r1, #64	; 0x40
 8001976:	4802      	ldr	r0, [pc, #8]	; (8001980 <factory_reset_eeprom_regs+0x184>)
 8001978:	f000 f8ce 	bl	8001b18 <eeprom_store>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200000dc 	.word	0x200000dc

08001984 <load_eeprom_regs>:


void load_eeprom_regs()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 8001988:	2140      	movs	r1, #64	; 0x40
 800198a:	4802      	ldr	r0, [pc, #8]	; (8001994 <load_eeprom_regs+0x10>)
 800198c:	f000 f8b2 	bl	8001af4 <eeprom_restore>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200000dc 	.word	0x200000dc

08001998 <store_eeprom_regs>:

void store_eeprom_regs()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	4802      	ldr	r0, [pc, #8]	; (80019a8 <store_eeprom_regs+0x10>)
 80019a0:	f000 f8ba 	bl	8001b18 <eeprom_store>
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200000dc 	.word	0x200000dc

080019ac <reset_ram_regs>:

void reset_ram_regs()
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

	regs[REG_TORQUE_ENABLE] = 0; 	// OFF
 80019b0:	4b46      	ldr	r3, [pc, #280]	; (8001acc <reset_ram_regs+0x120>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_LED] = 0;				// OFF
 80019b8:	4b44      	ldr	r3, [pc, #272]	; (8001acc <reset_ram_regs+0x120>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_CONTROL_MODE] = 1;		// POSITION CONTROL
 80019c0:	4b42      	ldr	r3, [pc, #264]	; (8001acc <reset_ram_regs+0x120>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	regs[REG_GOAL_POSITION_DEG_L] = 0;
 80019c8:	4b40      	ldr	r3, [pc, #256]	; (8001acc <reset_ram_regs+0x120>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = 0;
 80019d0:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <reset_ram_regs+0x120>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <reset_ram_regs+0x120>)
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 80019e0:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <reset_ram_regs+0x120>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_GOAL_CURRENT_MA_L] = 0;
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <reset_ram_regs+0x120>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_GOAL_CURRENT_MA_H] = 0;
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <reset_ram_regs+0x120>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_GOAL_PWM_100_L] = 0;
 80019f8:	4b34      	ldr	r3, [pc, #208]	; (8001acc <reset_ram_regs+0x120>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	regs[REG_GOAL_PWM_100_H] = 0;
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <reset_ram_regs+0x120>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	regs[REG_PRESENT_POSITION_DEG_L] = 0;
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <reset_ram_regs+0x120>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = 0;
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <reset_ram_regs+0x120>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_PRESENT_VELOCITY_DPS_L] = 0;
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <reset_ram_regs+0x120>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = 0;
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <reset_ram_regs+0x120>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_PRESENT_CURRENT_MA_L] = 0;
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <reset_ram_regs+0x120>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = 0;
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <reset_ram_regs+0x120>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_PRESENT_VOLTAGE] = 0;
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <reset_ram_regs+0x120>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <reset_ram_regs+0x120>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	regs[REG_MOVING] = 0;
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <reset_ram_regs+0x120>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = 0;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <reset_ram_regs+0x120>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = 0;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <reset_ram_regs+0x120>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	regs[REG_SETPOINT_VELOCITY_DPS_L] = 0;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <reset_ram_regs+0x120>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = 0;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <reset_ram_regs+0x120>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	regs[REG_SETPOINT_CURRENT_MA_L] = 0;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <reset_ram_regs+0x120>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = 0;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <reset_ram_regs+0x120>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	regs[REG_SETPOINT_PWM_100_L] = 0;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <reset_ram_regs+0x120>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = 0;
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <reset_ram_regs+0x120>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	regs[POSITION_INPUT_ADC_L] = 0;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <reset_ram_regs+0x120>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[POSITION_INPUT_ADC_H] = 0;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <reset_ram_regs+0x120>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	regs[CURRENT_INPUT_ADC_L] = 0;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <reset_ram_regs+0x120>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[CURRENT_INPUT_ADC_H] = 0;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <reset_ram_regs+0x120>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	regs[REG_PROTOCOL_CRC_FAIL] = 0;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <reset_ram_regs+0x120>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	regs[REG_HARDWARE_ERROR_STATUS] = 0;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <reset_ram_regs+0x120>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200000dc 	.word	0x200000dc

08001ad0 <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <eeprom_empty+0x20>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	0801f800 	.word	0x0801f800

08001af4 <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <eeprom_restore+0x20>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f008 f9bf 	bl	8009e88 <memcpy>
	return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	0801f800 	.word	0x0801f800

08001b18 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b08d      	sub	sp, #52	; 0x34
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8001b22:	f004 f873 	bl	8005c0c <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	233f      	movs	r3, #63	; 0x3f
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	2301      	movs	r3, #1
 8001b34:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001b3a:	f107 0210 	add.w	r2, r7, #16
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 f955 	bl	8005df4 <HAL_FLASHEx_Erase>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 8001b50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 8001b58:	f004 f87a 	bl	8005c50 <HAL_FLASH_Lock>
			return result;
 8001b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b60:	e03b      	b.n	8001bda <eeprom_store+0xc2>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001b62:	a422      	add	r4, pc, #136	; (adr r4, 8001bec <eeprom_store+0xd4>)
 8001b64:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b68:	e9c7 3402 	strd	r3, r4, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b70:	e02c      	b.n	8001bcc <eeprom_store+0xb4>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	18d1      	adds	r1, r2, r3
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f008 f982 	bl	8009e88 <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 8001b84:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <eeprom_store+0xd0>)
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	18d1      	adds	r1, r2, r3
 8001b8a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4623      	mov	r3, r4
 8001b92:	2000      	movs	r0, #0
 8001b94:	f003 ffe4 	bl	8005b60 <HAL_FLASH_Program>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 8001b9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00f      	beq.n	8001bc6 <eeprom_store+0xae>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001ba6:	f004 f86d 	bl	8005c84 <HAL_FLASH_GetError>
 8001baa:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <eeprom_store+0xa4>
				{
					HAL_FLASH_Lock();
 8001bb2:	f004 f84d 	bl	8005c50 <HAL_FLASH_Lock>
					return error;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e00e      	b.n	8001bda <eeprom_store+0xc2>
				}
				HAL_FLASH_Lock();
 8001bbc:	f004 f848 	bl	8005c50 <HAL_FLASH_Lock>
				return result;
 8001bc0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001bc4:	e009      	b.n	8001bda <eeprom_store+0xc2>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	3308      	adds	r3, #8
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3ce      	bcc.n	8001b72 <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001bd4:	f004 f83c 	bl	8005c50 <HAL_FLASH_Lock>
	return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3734      	adds	r7, #52	; 0x34
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd90      	pop	{r4, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	0801f800 	.word	0x0801f800
 8001bec:	deadbeef 	.word	0xdeadbeef
 8001bf0:	00000000 	.word	0x00000000

08001bf4 <stop_blinking>:
static uint32_t last_state_change_time[LED_COUNT]; // ms

/* Private functions ---------------------------------------------------------*/

void stop_blinking(int id)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    blinkin_period[id]=0;
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <stop_blinking+0x3c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2100      	movs	r1, #0
 8001c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_counter[id]=0;
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <stop_blinking+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_infinite[id]=false;
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <stop_blinking+0x44>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=0;
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <stop_blinking+0x48>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	200000ac 	.word	0x200000ac
 8001c34:	200000b0 	.word	0x200000b0
 8001c38:	200000b4 	.word	0x200000b4
 8001c3c:	200000b8 	.word	0x200000b8

08001c40 <HAL_Led_Init>:

/* HAL functions ---------------------------------------------------------*/

void HAL_Led_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
    // Init private data & ALL OFF
    int id = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	e00d      	b.n	8001c6c <HAL_Led_Init+0x2c>
    {
        stop_blinking(id);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffcf 	bl	8001bf4 <stop_blinking>
        HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8001c56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fb85 	bl	8006370 <HAL_GPIO_WritePin>
    for(id=0;id<LED_COUNT;++id)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	ddee      	ble.n	8001c50 <HAL_Led_Init+0x10>
    }
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_Led_Process>:

void HAL_Led_Process(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
    uint32_t const current_time = HAL_GetTick();
 8001c82:	f001 feb3 	bl	80039ec <HAL_GetTick>
 8001c86:	6038      	str	r0, [r7, #0]
    int id = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	e058      	b.n	8001d44 <HAL_Led_Process+0xc8>
    {
        // have to blink ?
        if( blinkin_period[id]!=0 )
 8001c92:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <HAL_Led_Process+0xd8>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d04f      	beq.n	8001d3e <HAL_Led_Process+0xc2>
        {
            // is it time to blink ?
            if( current_time >= last_state_change_time[id]+blinkin_period[id] )
 8001c9e:	4a2e      	ldr	r2, [pc, #184]	; (8001d58 <HAL_Led_Process+0xdc>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	492b      	ldr	r1, [pc, #172]	; (8001d54 <HAL_Led_Process+0xd8>)
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cae:	4413      	add	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d343      	bcc.n	8001d3e <HAL_Led_Process+0xc2>
            {
                // blink
                if(HAL_GPIO_ReadPin(hal_led_id_to_port[id],hal_led_id_to_pin[id])==GPIO_PIN_RESET)
 8001cb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 fb3d 	bl	8006340 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d108      	bne.n	8001cde <HAL_Led_Process+0x62>
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8001ccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 fb4a 	bl	8006370 <HAL_GPIO_WritePin>
 8001cdc:	e007      	b.n	8001cee <HAL_Led_Process+0x72>
                else
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001cde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 fb41 	bl	8006370 <HAL_GPIO_WritePin>
                // next time
                last_state_change_time[id]+=blinkin_period[id];
 8001cee:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <HAL_Led_Process+0xdc>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	4917      	ldr	r1, [pc, #92]	; (8001d54 <HAL_Led_Process+0xd8>)
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cfe:	441a      	add	r2, r3
 8001d00:	4915      	ldr	r1, [pc, #84]	; (8001d58 <HAL_Led_Process+0xdc>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if(!blinkin_infinite[id])
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_Led_Process+0xe0>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d011      	beq.n	8001d3e <HAL_Led_Process+0xc2>
                {
                    --blinkin_counter[id];
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_Led_Process+0xe4>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <HAL_Led_Process+0xe4>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if(blinkin_counter[id]==0)
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_Led_Process+0xe4>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <HAL_Led_Process+0xc2>
                    {
                        stop_blinking(id);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff5b 	bl	8001bf4 <stop_blinking>
    for(id=0;id<LED_COUNT;++id)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3301      	adds	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	dda3      	ble.n	8001c92 <HAL_Led_Process+0x16>
            }
            // else don't change led state
        }
        // else don't change led state
    }
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200000ac 	.word	0x200000ac
 8001d58:	200000b8 	.word	0x200000b8
 8001d5c:	200000b4 	.word	0x200000b4
 8001d60:	200000b0 	.word	0x200000b0

08001d64 <HAL_Led_Set>:

void HAL_Led_Set(int id)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff41 	bl	8001bf4 <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001d72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 faf7 	bl	8006370 <HAL_GPIO_WritePin>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_Led_Reset>:

void HAL_Led_Reset(int id)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff2e 	bl	8001bf4 <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8001d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da0:	2201      	movs	r2, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 fae4 	bl	8006370 <HAL_GPIO_WritePin>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_Led_Blink>:
    else
        return LED_OFF;
}

void HAL_Led_Blink(int id, int times, int period_ms)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
    blinkin_period[id]=period_ms;
 8001dbc:	4917      	ldr	r1, [pc, #92]	; (8001e1c <HAL_Led_Blink+0x6c>)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    blinkin_counter[id]=times!=0?times*2-1:0;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_Led_Blink+0x24>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_Led_Blink+0x26>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	4912      	ldr	r1, [pc, #72]	; (8001e20 <HAL_Led_Blink+0x70>)
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    blinkin_infinite[id]=(times==0);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2d9      	uxtb	r1, r3
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_Led_Blink+0x74>)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	460a      	mov	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=HAL_GetTick();
 8001df4:	f001 fdfa 	bl	80039ec <HAL_GetTick>
 8001df8:	4601      	mov	r1, r0
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_Led_Blink+0x78>)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // ON at once
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001e02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 faaf 	bl	8006370 <HAL_GPIO_WritePin>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200000ac 	.word	0x200000ac
 8001e20:	200000b0 	.word	0x200000b0
 8001e24:	200000b4 	.word	0x200000b4
 8001e28:	200000b8 	.word	0x200000b8

08001e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e32:	f001 fd76 	bl	8003922 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e36:	f000 f86b 	bl	8001f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3a:	f000 faf9 	bl	8002430 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e3e:	f000 fabd 	bl	80023bc <MX_DMA_Init>
  MX_TIM4_Init();
 8001e42:	f000 f997 	bl	8002174 <MX_TIM4_Init>
  MX_TIM15_Init();
 8001e46:	f000 fa19 	bl	800227c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001e4a:	f000 fa69 	bl	8002320 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001e4e:	f000 f8c9 	bl	8001fe4 <MX_ADC1_Init>
  MX_OPAMP1_Init();
 8001e52:	f000 f961 	bl	8002118 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Led_Init();
 8001e56:	f7ff fef3 	bl	8001c40 <HAL_Led_Init>
  HAL_Led_Blink(LED0,10,150);
 8001e5a:	2296      	movs	r2, #150	; 0x96
 8001e5c:	210a      	movs	r1, #10
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff ffa6 	bl	8001db0 <HAL_Led_Blink>
  HAL_Serial_Init_Half_Duplex(
 8001e64:	2300      	movs	r3, #0
 8001e66:	9303      	str	r3, [sp, #12]
 8001e68:	2310      	movs	r3, #16
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <main+0xd4>)
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2300      	movs	r3, #0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e7c:	4921      	ldr	r1, [pc, #132]	; (8001f04 <main+0xd8>)
 8001e7e:	4822      	ldr	r0, [pc, #136]	; (8001f08 <main+0xdc>)
 8001e80:	f000 ffe0 	bl	8002e44 <HAL_Serial_Init_Half_Duplex>
	GPIO_PIN_RESET,
	UART2_DIR_RX_GPIO_Port,
	UART2_DIR_RX_Pin,
	GPIO_PIN_RESET
	);
	if(eeprom_empty())
 8001e84:	f7ff fe24 	bl	8001ad0 <eeprom_empty>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <main+0x66>
		factory_reset_eeprom_regs();
 8001e8e:	f7ff fcb5 	bl	80017fc <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8001e92:	f7ff fd77 	bl	8001984 <load_eeprom_regs>
	reset_ram_regs();
 8001e96:	f7ff fd89 	bl	80019ac <reset_ram_regs>
	APP_Control_Init();
 8001e9a:	f7fe fc07 	bl	80006ac <APP_Control_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start_time = HAL_GetTick();
 8001e9e:	f001 fda5 	bl	80039ec <HAL_GetTick>
 8001ea2:	6078      	str	r0, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle LED
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8001ea4:	f001 fda2 	bl	80039ec <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d910      	bls.n	8001ed6 <main+0xaa>
	{
		if(regs[REG_LED]==0)
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <main+0xe0>)
 8001eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <main+0x9a>
		{
			HAL_Led_Reset(LED0);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff ff63 	bl	8001d8a <HAL_Led_Reset>
 8001ec4:	e007      	b.n	8001ed6 <main+0xaa>
		}
		else if(regs[REG_LED]==1)
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <main+0xe0>)
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <main+0xaa>
		{
			HAL_Led_Set(LED0);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff ff47 	bl	8001d64 <HAL_Led_Set>
		}
	}
	HAL_Led_Process();
 8001ed6:	f7ff fed1 	bl	8001c7c <HAL_Led_Process>

	// Handle communication
	while(HAL_Serial_Available(&serial))
 8001eda:	e008      	b.n	8001eee <main+0xc2>
	{
	  char c = HAL_Serial_GetChar(&serial);
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <main+0xd8>)
 8001ede:	f001 f877 	bl	8002fd0 <HAL_Serial_GetChar>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	70fb      	strb	r3, [r7, #3]
	  packet_handler(c);
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fe41 	bl	8002b70 <packet_handler>
	while(HAL_Serial_Available(&serial))
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <main+0xd8>)
 8001ef0:	f001 f83e 	bl	8002f70 <HAL_Serial_Available>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <main+0xb0>
	}

	// regulation
	APP_Control_Process();
 8001efa:	f7fe fc17 	bl	800072c <APP_Control_Process>
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8001efe:	e7d1      	b.n	8001ea4 <main+0x78>
 8001f00:	48000400 	.word	0x48000400
 8001f04:	20000360 	.word	0x20000360
 8001f08:	20002c68 	.word	0x20002c68
 8001f0c:	200000dc 	.word	0x200000dc

08001f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0a4      	sub	sp, #144	; 0x90
 8001f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f1a:	2238      	movs	r2, #56	; 0x38
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f007 ffbd 	bl	8009e9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f34:	463b      	mov	r3, r7
 8001f36:	2244      	movs	r2, #68	; 0x44
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f007 ffaf 	bl	8009e9e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f44:	f004 fb2e 	bl	80065a4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f52:	2340      	movs	r3, #64	; 0x40
 8001f54:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f56:	2302      	movs	r3, #2
 8001f58:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001f62:	234b      	movs	r3, #75	; 0x4b
 8001f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f74:	2302      	movs	r3, #2
 8001f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 fbc4 	bl	800670c <HAL_RCC_OscConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001f8a:	f000 facf 	bl	800252c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8e:	230f      	movs	r3, #15
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f92:	2303      	movs	r3, #3
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fa2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 fec7 	bl	8006d3c <HAL_RCC_ClockConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001fb4:	f000 faba 	bl	800252c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001fb8:	f248 0302 	movw	r3, #32770	; 0x8002
 8001fbc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001fc2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc8:	463b      	mov	r3, r7
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 f8d2 	bl	8007174 <HAL_RCCEx_PeriphCLKConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001fd6:	f000 faa9 	bl	800252c <Error_Handler>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3790      	adds	r7, #144	; 0x90
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f007 ff4e 	bl	8009e9e <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <MX_ADC1_Init+0x124>)
 8002004:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002008:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800200a:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <MX_ADC1_Init+0x124>)
 800200c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <MX_ADC1_Init+0x124>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002018:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <MX_ADC1_Init+0x124>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <MX_ADC1_Init+0x124>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002024:	4b38      	ldr	r3, [pc, #224]	; (8002108 <MX_ADC1_Init+0x124>)
 8002026:	2201      	movs	r2, #1
 8002028:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <MX_ADC1_Init+0x124>)
 800202c:	2208      	movs	r2, #8
 800202e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <MX_ADC1_Init+0x124>)
 8002032:	2200      	movs	r2, #0
 8002034:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <MX_ADC1_Init+0x124>)
 8002038:	2200      	movs	r2, #0
 800203a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <MX_ADC1_Init+0x124>)
 800203e:	2203      	movs	r2, #3
 8002040:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <MX_ADC1_Init+0x124>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800204a:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <MX_ADC1_Init+0x124>)
 800204c:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <MX_ADC1_Init+0x124>)
 8002054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <MX_ADC1_Init+0x124>)
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <MX_ADC1_Init+0x124>)
 8002064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002068:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800206a:	4b27      	ldr	r3, [pc, #156]	; (8002108 <MX_ADC1_Init+0x124>)
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002072:	4825      	ldr	r0, [pc, #148]	; (8002108 <MX_ADC1_Init+0x124>)
 8002074:	f001 ff28 	bl	8003ec8 <HAL_ADC_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800207e:	f000 fa55 	bl	800252c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208a:	4619      	mov	r1, r3
 800208c:	481e      	ldr	r0, [pc, #120]	; (8002108 <MX_ADC1_Init+0x124>)
 800208e:	f003 f8c5 	bl	800521c <HAL_ADCEx_MultiModeConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002098:	f000 fa48 	bl	800252c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_ADC1_Init+0x128>)
 800209e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020a0:	2306      	movs	r3, #6
 80020a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80020a4:	2303      	movs	r3, #3
 80020a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020a8:	237f      	movs	r3, #127	; 0x7f
 80020aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020ac:	2304      	movs	r3, #4
 80020ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	4619      	mov	r1, r3
 80020b8:	4813      	ldr	r0, [pc, #76]	; (8002108 <MX_ADC1_Init+0x124>)
 80020ba:	f002 fb79 	bl	80047b0 <HAL_ADC_ConfigChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80020c4:	f000 fa32 	bl	800252c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <MX_ADC1_Init+0x12c>)
 80020ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020cc:	230c      	movs	r3, #12
 80020ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <MX_ADC1_Init+0x124>)
 80020d6:	f002 fb6b 	bl	80047b0 <HAL_ADC_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80020e0:	f000 fa24 	bl	800252c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MX_ADC1_Init+0x130>)
 80020e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020e8:	2312      	movs	r3, #18
 80020ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_ADC1_Init+0x124>)
 80020f2:	f002 fb5d 	bl	80047b0 <HAL_ADC_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80020fc:	f000 fa16 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	3730      	adds	r7, #48	; 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000294 	.word	0x20000294
 800210c:	b6902000 	.word	0xb6902000
 8002110:	3ef08000 	.word	0x3ef08000
 8002114:	2a000400 	.word	0x2a000400

08002118 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <MX_OPAMP1_Init+0x54>)
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <MX_OPAMP1_Init+0x58>)
 8002120:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <MX_OPAMP1_Init+0x54>)
 8002124:	2200      	movs	r2, #0
 8002126:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <MX_OPAMP1_Init+0x54>)
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_OPAMP1_Init+0x54>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <MX_OPAMP1_Init+0x54>)
 8002136:	2201      	movs	r2, #1
 8002138:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_OPAMP1_Init+0x54>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <MX_OPAMP1_Init+0x54>)
 8002142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_8_OR_MINUS_7;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <MX_OPAMP1_Init+0x54>)
 800214a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_OPAMP1_Init+0x54>)
 8002152:	2200      	movs	r2, #0
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_OPAMP1_Init+0x54>)
 8002158:	f004 f922 	bl	80063a0 <HAL_OPAMP_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8002162:	f000 f9e3 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000258 	.word	0x20000258
 8002170:	40010300 	.word	0x40010300

08002174 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08e      	sub	sp, #56	; 0x38
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021a6:	4b33      	ldr	r3, [pc, #204]	; (8002274 <MX_TIM4_Init+0x100>)
 80021a8:	4a33      	ldr	r2, [pc, #204]	; (8002278 <MX_TIM4_Init+0x104>)
 80021aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 37;
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <MX_TIM4_Init+0x100>)
 80021ae:	2225      	movs	r2, #37	; 0x25
 80021b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b30      	ldr	r3, [pc, #192]	; (8002274 <MX_TIM4_Init+0x100>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <MX_TIM4_Init+0x100>)
 80021ba:	2263      	movs	r2, #99	; 0x63
 80021bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <MX_TIM4_Init+0x100>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <MX_TIM4_Init+0x100>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021ca:	482a      	ldr	r0, [pc, #168]	; (8002274 <MX_TIM4_Init+0x100>)
 80021cc:	f005 f9c2 	bl	8007554 <HAL_TIM_Base_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80021d6:	f000 f9a9 	bl	800252c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e4:	4619      	mov	r1, r3
 80021e6:	4823      	ldr	r0, [pc, #140]	; (8002274 <MX_TIM4_Init+0x100>)
 80021e8:	f005 fea6 	bl	8007f38 <HAL_TIM_ConfigClockSource>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80021f2:	f000 f99b 	bl	800252c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021f6:	481f      	ldr	r0, [pc, #124]	; (8002274 <MX_TIM4_Init+0x100>)
 80021f8:	f005 fa66 	bl	80076c8 <HAL_TIM_PWM_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002202:	f000 f993 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002206:	2320      	movs	r3, #32
 8002208:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	4817      	ldr	r0, [pc, #92]	; (8002274 <MX_TIM4_Init+0x100>)
 8002216:	f006 fbdb 	bl	80089d0 <HAL_TIMEx_MasterConfigSynchronization>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002220:	f000 f984 	bl	800252c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002224:	2360      	movs	r3, #96	; 0x60
 8002226:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002234:	463b      	mov	r3, r7
 8002236:	2200      	movs	r2, #0
 8002238:	4619      	mov	r1, r3
 800223a:	480e      	ldr	r0, [pc, #56]	; (8002274 <MX_TIM4_Init+0x100>)
 800223c:	f005 fd6c 	bl	8007d18 <HAL_TIM_PWM_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002246:	f000 f971 	bl	800252c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	2204      	movs	r2, #4
 8002252:	4619      	mov	r1, r3
 8002254:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_TIM4_Init+0x100>)
 8002256:	f005 fd5f 	bl	8007d18 <HAL_TIM_PWM_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002260:	f000 f964 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <MX_TIM4_Init+0x100>)
 8002266:	f001 f9bb 	bl	80035e0 <HAL_TIM_MspPostInit>

}
 800226a:	bf00      	nop
 800226c:	3738      	adds	r7, #56	; 0x38
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200001c0 	.word	0x200001c0
 8002278:	40000800 	.word	0x40000800

0800227c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MX_TIM15_Init+0x9c>)
 800229c:	4a1f      	ldr	r2, [pc, #124]	; (800231c <MX_TIM15_Init+0xa0>)
 800229e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 149;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <MX_TIM15_Init+0x9c>)
 80022a2:	2295      	movs	r2, #149	; 0x95
 80022a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_TIM15_Init+0x9c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_TIM15_Init+0x9c>)
 80022ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_TIM15_Init+0x9c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_TIM15_Init+0x9c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_TIM15_Init+0x9c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80022c6:	4814      	ldr	r0, [pc, #80]	; (8002318 <MX_TIM15_Init+0x9c>)
 80022c8:	f005 f944 	bl	8007554 <HAL_TIM_Base_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80022d2:	f000 f92b 	bl	800252c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	4619      	mov	r1, r3
 80022e2:	480d      	ldr	r0, [pc, #52]	; (8002318 <MX_TIM15_Init+0x9c>)
 80022e4:	f005 fe28 	bl	8007f38 <HAL_TIM_ConfigClockSource>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80022ee:	f000 f91d 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <MX_TIM15_Init+0x9c>)
 8002300:	f006 fb66 	bl	80089d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800230a:	f000 f90f 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000020c 	.word	0x2000020c
 800231c:	40014000 	.word	0x40014000

08002320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002324:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 8002326:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <MX_USART2_UART_Init+0x94>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <MX_USART2_UART_Init+0x98>)
 800232e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 8002344:	220c      	movs	r2, #12
 8002346:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 8002350:	2200      	movs	r2, #0
 8002352:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 8002356:	2200      	movs	r2, #0
 8002358:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002366:	4812      	ldr	r0, [pc, #72]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 8002368:	f006 fbfa 	bl	8008b60 <HAL_UART_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002372:	f000 f8db 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002376:	2100      	movs	r1, #0
 8002378:	480d      	ldr	r0, [pc, #52]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 800237a:	f007 fc7c 	bl	8009c76 <HAL_UARTEx_SetTxFifoThreshold>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8002384:	f000 f8d2 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002388:	2100      	movs	r1, #0
 800238a:	4809      	ldr	r0, [pc, #36]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 800238c:	f007 fcb1 	bl	8009cf2 <HAL_UARTEx_SetRxFifoThreshold>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8002396:	f000 f8c9 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_USART2_UART_Init+0x90>)
 800239c:	f007 fc32 	bl	8009c04 <HAL_UARTEx_DisableFifoMode>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80023a6:	f000 f8c1 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20002c68 	.word	0x20002c68
 80023b4:	40004400 	.word	0x40004400
 80023b8:	0007a120 	.word	0x0007a120

080023bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <MX_DMA_Init+0x70>)
 80023c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c6:	4a19      	ldr	r2, [pc, #100]	; (800242c <MX_DMA_Init+0x70>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6493      	str	r3, [r2, #72]	; 0x48
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <MX_DMA_Init+0x70>)
 80023d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_DMA_Init+0x70>)
 80023dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <MX_DMA_Init+0x70>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6493      	str	r3, [r2, #72]	; 0x48
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_DMA_Init+0x70>)
 80023e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	200b      	movs	r0, #11
 80023f8:	f003 f89f 	bl	800553a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023fc:	200b      	movs	r0, #11
 80023fe:	f003 f8b6 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	200c      	movs	r0, #12
 8002408:	f003 f897 	bl	800553a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800240c:	200c      	movs	r0, #12
 800240e:	f003 f8ae 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	200d      	movs	r0, #13
 8002418:	f003 f88f 	bl	800553a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800241c:	200d      	movs	r0, #13
 800241e:	f003 f8a6 	bl	800556e <HAL_NVIC_EnableIRQ>

}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000

08002430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <MX_GPIO_Init+0xf4>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	4a36      	ldr	r2, [pc, #216]	; (8002524 <MX_GPIO_Init+0xf4>)
 800244c:	f043 0320 	orr.w	r3, r3, #32
 8002450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <MX_GPIO_Init+0xf4>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <MX_GPIO_Init+0xf4>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4a30      	ldr	r2, [pc, #192]	; (8002524 <MX_GPIO_Init+0xf4>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <MX_GPIO_Init+0xf4>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <MX_GPIO_Init+0xf4>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	4a2a      	ldr	r2, [pc, #168]	; (8002524 <MX_GPIO_Init+0xf4>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <MX_GPIO_Init+0xf4>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|UART2_DIR_TX_Pin, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002498:	f003 ff6a 	bl	8006370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_DIR_RX_GPIO_Port, UART2_DIR_RX_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2110      	movs	r1, #16
 80024a0:	4821      	ldr	r0, [pc, #132]	; (8002528 <MX_GPIO_Init+0xf8>)
 80024a2:	f003 ff65 	bl	8006370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80024a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024ac:	2311      	movs	r3, #17
 80024ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	4619      	mov	r1, r3
 80024be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c2:	f003 fdbb 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_DIR_TX_Pin */
  GPIO_InitStruct.Pin = UART2_DIR_TX_Pin;
 80024c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024cc:	2311      	movs	r3, #17
 80024ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_DIR_TX_GPIO_Port, &GPIO_InitStruct);
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e2:	f003 fdab 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_DIR_RX_Pin */
  GPIO_InitStruct.Pin = UART2_DIR_RX_Pin;
 80024e6:	2310      	movs	r3, #16
 80024e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024ea:	2311      	movs	r3, #17
 80024ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_DIR_RX_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4619      	mov	r1, r3
 80024fc:	480a      	ldr	r0, [pc, #40]	; (8002528 <MX_GPIO_Init+0xf8>)
 80024fe:	f003 fd9d 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8002502:	2320      	movs	r3, #32
 8002504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4619      	mov	r1, r3
 8002514:	4804      	ldr	r0, [pc, #16]	; (8002528 <MX_GPIO_Init+0xf8>)
 8002516:	f003 fd91 	bl	800603c <HAL_GPIO_Init>

}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	48000400 	.word	0x48000400

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002530:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002532:	e7fe      	b.n	8002532 <Error_Handler+0x6>

08002534 <fconstrain>:
    else
        return x;
}

float fconstrain(float x, float min, float max)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	ed87 0a03 	vstr	s0, [r7, #12]
 800253e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002542:	ed87 1a01 	vstr	s2, [r7, #4]
    if(x<min)
 8002546:	ed97 7a03 	vldr	s14, [r7, #12]
 800254a:	edd7 7a02 	vldr	s15, [r7, #8]
 800254e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d501      	bpl.n	800255c <fconstrain+0x28>
        return min;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	e00b      	b.n	8002574 <fconstrain+0x40>
    else if(x>max)
 800255c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002560:	edd7 7a01 	vldr	s15, [r7, #4]
 8002564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	dd01      	ble.n	8002572 <fconstrain+0x3e>
        return max;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	e000      	b.n	8002574 <fconstrain+0x40>
    else
        return x;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	ee07 3a90 	vmov	s15, r3
}
 8002578:	eeb0 0a67 	vmov.f32	s0, s15
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <fmap>:
    else
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float fmap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8002586:	b480      	push	{r7}
 8002588:	b087      	sub	sp, #28
 800258a:	af00      	add	r7, sp, #0
 800258c:	ed87 0a05 	vstr	s0, [r7, #20]
 8002590:	edc7 0a04 	vstr	s1, [r7, #16]
 8002594:	ed87 1a03 	vstr	s2, [r7, #12]
 8002598:	edc7 1a02 	vstr	s3, [r7, #8]
 800259c:	ed87 2a01 	vstr	s4, [r7, #4]
    if(x<=in_min)
 80025a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	d802      	bhi.n	80025b8 <fmap+0x32>
        return out_min;
 80025b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b6:	e025      	b.n	8002604 <fmap+0x7e>
    else if(x>=in_max)
 80025b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80025bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80025c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	db02      	blt.n	80025d0 <fmap+0x4a>
        return out_max;
 80025ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ce:	e019      	b.n	8002604 <fmap+0x7e>
    else
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80025d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80025e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80025ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80025f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002600:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002604:	eeb0 0a67 	vmov.f32	s0, s15
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <pid_reset>:
#include <string.h>
#include <stdbool.h>
#include "math_tool.h"

void pid_reset( pid_context_t * ctx )
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
	ctx->err_last_one = 0.0f;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
	ctx->err_integral = 0.0f;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	605a      	str	r2, [r3, #4]
	ctx->derivative_filtered = 0.0f;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <pid_process_antiwindup_clamp>:
		float ki,
		float kd,
		float output_limit,
		float alpha_derivative
)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b08e      	sub	sp, #56	; 0x38
 8002642:	af00      	add	r7, sp, #0
 8002644:	61f8      	str	r0, [r7, #28]
 8002646:	ed87 0a06 	vstr	s0, [r7, #24]
 800264a:	edc7 0a05 	vstr	s1, [r7, #20]
 800264e:	ed87 1a04 	vstr	s2, [r7, #16]
 8002652:	edc7 1a03 	vstr	s3, [r7, #12]
 8002656:	ed87 2a02 	vstr	s4, [r7, #8]
 800265a:	edc7 2a01 	vstr	s5, [r7, #4]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ed97 7a06 	vldr	s14, [r7, #24]
 8002668:	ee37 7a67 	vsub.f32	s14, s14, s15
 800266c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002678:	edd7 7a01 	vldr	s15, [r7, #4]
 800267c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	edd3 7a02 	vldr	s15, [r3, #8]
 8002686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 800269a:	ed97 7a05 	vldr	s14, [r7, #20]
 800269e:	edd7 7a06 	vldr	s15, [r7, #24]
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80026b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term;
 80026c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 80026da:	edd7 7a02 	vldr	s15, [r7, #8]
 80026de:	eef1 7a67 	vneg.f32	s15, s15
 80026e2:	ed97 1a02 	vldr	s2, [r7, #8]
 80026e6:	eef0 0a67 	vmov.f32	s1, s15
 80026ea:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80026ee:	f7ff ff21 	bl	8002534 <fconstrain>
 80026f2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 80026f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80026fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 8002710:	ed97 7a06 	vldr	s14, [r7, #24]
 8002714:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	bfac      	ite	ge
 8002726:	2301      	movge	r3, #1
 8002728:	2300      	movlt	r3, #0
 800272a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 800272e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <pid_process_antiwindup_clamp+0x104>
 8002736:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <pid_process_antiwindup_clamp+0x104>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <pid_process_antiwindup_clamp+0x106>
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002748:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 8002754:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <pid_process_antiwindup_clamp+0x140>
		ctx->err_integral = ctx->err_integral + ki*error;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	ed93 7a01 	vldr	s14, [r3, #4]
 8002768:	edd7 6a04 	vldr	s13, [r7, #16]
 800276c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	ee07 3a90 	vmov	s15, r3
}
 8002784:	eeb0 0a67 	vmov.f32	s0, s15
 8002788:	3738      	adds	r7, #56	; 0x38
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	80fb      	strh	r3, [r7, #6]
 800279c:	4613      	mov	r3, r2
 800279e:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	81fb      	strh	r3, [r7, #14]
 80027a4:	e019      	b.n	80027da <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	1c59      	adds	r1, r3, #1
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4053      	eors	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	89bb      	ldrh	r3, [r7, #12]
 80027c6:	490a      	ldr	r1, [pc, #40]	; (80027f0 <updateCRC+0x60>)
 80027c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	4053      	eors	r3, r2
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	3301      	adds	r3, #1
 80027d8:	81fb      	strh	r3, [r7, #14]
 80027da:	89fa      	ldrh	r2, [r7, #14]
 80027dc:	88bb      	ldrh	r3, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3e1      	bcc.n	80027a6 <updateCRC+0x16>
  }

  return crc_accum;
 80027e2:	88fb      	ldrh	r3, [r7, #6]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	08009ed8 	.word	0x08009ed8

080027f4 <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <packet_encapsulate+0x84>)
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <packet_encapsulate+0x84>)
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <packet_encapsulate+0x84>)
 800280a:	22fd      	movs	r2, #253	; 0xfd
 800280c:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <packet_encapsulate+0x84>)
 8002810:	2200      	movs	r2, #0
 8002812:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <packet_encapsulate+0x88>)
 8002816:	78da      	ldrb	r2, [r3, #3]
 8002818:	4b17      	ldr	r3, [pc, #92]	; (8002878 <packet_encapsulate+0x84>)
 800281a:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	b29b      	uxth	r3, r3
 8002820:	3302      	adds	r3, #2
 8002822:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <packet_encapsulate+0x84>)
 800282a:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29b      	uxth	r3, r3
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <packet_encapsulate+0x84>)
 8002836:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 8002838:	89fb      	ldrh	r3, [r7, #14]
 800283a:	3305      	adds	r3, #5
 800283c:	b29b      	uxth	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	490d      	ldr	r1, [pc, #52]	; (8002878 <packet_encapsulate+0x84>)
 8002842:	2000      	movs	r0, #0
 8002844:	f7ff ffa4 	bl	8002790 <updateCRC>
 8002848:	4603      	mov	r3, r0
 800284a:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3307      	adds	r3, #7
 8002850:	89ba      	ldrh	r2, [r7, #12]
 8002852:	b2d1      	uxtb	r1, r2
 8002854:	4a08      	ldr	r2, [pc, #32]	; (8002878 <packet_encapsulate+0x84>)
 8002856:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 8002858:	89bb      	ldrh	r3, [r7, #12]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3308      	adds	r3, #8
 8002862:	b2d1      	uxtb	r1, r2
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <packet_encapsulate+0x84>)
 8002866:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3309      	adds	r3, #9
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <packet_encapsulate+0x8c>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20003140 	.word	0x20003140
 800287c:	200000dc 	.word	0x200000dc
 8002880:	200000c4 	.word	0x200000c4

08002884 <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	; 0x30
 8002888:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 800288a:	4b9b      	ldr	r3, [pc, #620]	; (8002af8 <instruction_handler+0x274>)
 800288c:	79db      	ldrb	r3, [r3, #7]
 800288e:	2b06      	cmp	r3, #6
 8002890:	f000 811a 	beq.w	8002ac8 <instruction_handler+0x244>
 8002894:	2b06      	cmp	r3, #6
 8002896:	dc06      	bgt.n	80028a6 <instruction_handler+0x22>
 8002898:	2b02      	cmp	r3, #2
 800289a:	d02b      	beq.n	80028f4 <instruction_handler+0x70>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d070      	beq.n	8002982 <instruction_handler+0xfe>
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d00a      	beq.n	80028ba <instruction_handler+0x36>
 80028a4:	e148      	b.n	8002b38 <instruction_handler+0x2b4>
 80028a6:	2b82      	cmp	r3, #130	; 0x82
 80028a8:	f000 8157 	beq.w	8002b5a <instruction_handler+0x2d6>
 80028ac:	2b83      	cmp	r3, #131	; 0x83
 80028ae:	f000 80b5 	beq.w	8002a1c <instruction_handler+0x198>
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	f000 812a 	beq.w	8002b0c <instruction_handler+0x288>
 80028b8:	e13e      	b.n	8002b38 <instruction_handler+0x2b4>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80028ba:	4b90      	ldr	r3, [pc, #576]	; (8002afc <instruction_handler+0x278>)
 80028bc:	2255      	movs	r2, #85	; 0x55
 80028be:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 80028c0:	4b8e      	ldr	r3, [pc, #568]	; (8002afc <instruction_handler+0x278>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 80028c6:	4b8e      	ldr	r3, [pc, #568]	; (8002b00 <instruction_handler+0x27c>)
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <instruction_handler+0x278>)
 80028cc:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 80028ce:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <instruction_handler+0x27c>)
 80028d0:	785a      	ldrb	r2, [r3, #1]
 80028d2:	4b8a      	ldr	r3, [pc, #552]	; (8002afc <instruction_handler+0x278>)
 80028d4:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 80028d6:	4b8a      	ldr	r3, [pc, #552]	; (8002b00 <instruction_handler+0x27c>)
 80028d8:	789a      	ldrb	r2, [r3, #2]
 80028da:	4b88      	ldr	r3, [pc, #544]	; (8002afc <instruction_handler+0x278>)
 80028dc:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 80028de:	2005      	movs	r0, #5
 80028e0:	f7ff ff88 	bl	80027f4 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80028e4:	4b87      	ldr	r3, [pc, #540]	; (8002b04 <instruction_handler+0x280>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4984      	ldr	r1, [pc, #528]	; (8002afc <instruction_handler+0x278>)
 80028ec:	4886      	ldr	r0, [pc, #536]	; (8002b08 <instruction_handler+0x284>)
 80028ee:	f000 fbbf 	bl	8003070 <HAL_Serial_Write>
		}
		break;
 80028f2:	e133      	b.n	8002b5c <instruction_handler+0x2d8>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80028f4:	4b80      	ldr	r3, [pc, #512]	; (8002af8 <instruction_handler+0x274>)
 80028f6:	7a5b      	ldrb	r3, [r3, #9]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	4b7e      	ldr	r3, [pc, #504]	; (8002af8 <instruction_handler+0x274>)
 80028fe:	7a1b      	ldrb	r3, [r3, #8]
 8002900:	b21b      	sxth	r3, r3
 8002902:	4313      	orrs	r3, r2
 8002904:	b21b      	sxth	r3, r3
 8002906:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 8002908:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <instruction_handler+0x274>)
 800290a:	7adb      	ldrb	r3, [r3, #11]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	b21a      	sxth	r2, r3
 8002910:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <instruction_handler+0x274>)
 8002912:	7a9b      	ldrb	r3, [r3, #10]
 8002914:	b21b      	sxth	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	b21b      	sxth	r3, r3
 800291a:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	2b81      	cmp	r3, #129	; 0x81
 8002920:	d81e      	bhi.n	8002960 <instruction_handler+0xdc>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <instruction_handler+0x278>)
 8002924:	2255      	movs	r2, #85	; 0x55
 8002926:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 8002928:	4b74      	ldr	r3, [pc, #464]	; (8002afc <instruction_handler+0x278>)
 800292a:	2200      	movs	r2, #0
 800292c:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002932:	e00b      	b.n	800294c <instruction_handler+0xc8>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	441a      	add	r2, r3
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	3309      	adds	r3, #9
 800293e:	4970      	ldr	r1, [pc, #448]	; (8002b00 <instruction_handler+0x27c>)
 8002940:	5c89      	ldrb	r1, [r1, r2]
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <instruction_handler+0x278>)
 8002944:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	3301      	adds	r3, #1
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294c:	883b      	ldrh	r3, [r7, #0]
 800294e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002950:	429a      	cmp	r2, r3
 8002952:	d3ef      	bcc.n	8002934 <instruction_handler+0xb0>
				packet_encapsulate(2+length);
 8002954:	883b      	ldrh	r3, [r7, #0]
 8002956:	3302      	adds	r3, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff4b 	bl	80027f4 <packet_encapsulate>
 800295e:	e008      	b.n	8002972 <instruction_handler+0xee>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002960:	4b66      	ldr	r3, [pc, #408]	; (8002afc <instruction_handler+0x278>)
 8002962:	2255      	movs	r2, #85	; 0x55
 8002964:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <instruction_handler+0x278>)
 8002968:	2207      	movs	r2, #7
 800296a:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 800296c:	2002      	movs	r0, #2
 800296e:	f7ff ff41 	bl	80027f4 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002972:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <instruction_handler+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	4960      	ldr	r1, [pc, #384]	; (8002afc <instruction_handler+0x278>)
 800297a:	4863      	ldr	r0, [pc, #396]	; (8002b08 <instruction_handler+0x284>)
 800297c:	f000 fb78 	bl	8003070 <HAL_Serial_Write>
		}
		break;
 8002980:	e0ec      	b.n	8002b5c <instruction_handler+0x2d8>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8002982:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <instruction_handler+0x274>)
 8002984:	7a5b      	ldrb	r3, [r3, #9]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b21a      	sxth	r2, r3
 800298a:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <instruction_handler+0x274>)
 800298c:	7a1b      	ldrb	r3, [r3, #8]
 800298e:	b21b      	sxth	r3, r3
 8002990:	4313      	orrs	r3, r2
 8002992:	b21b      	sxth	r3, r3
 8002994:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 8002996:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <instruction_handler+0x274>)
 8002998:	799b      	ldrb	r3, [r3, #6]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	b21a      	sxth	r2, r3
 800299e:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <instruction_handler+0x274>)
 80029a0:	795b      	ldrb	r3, [r3, #5]
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	4313      	orrs	r3, r2
 80029a6:	b21b      	sxth	r3, r3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b05      	subs	r3, #5
 80029ac:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2b81      	cmp	r3, #129	; 0x81
 80029b2:	d822      	bhi.n	80029fa <instruction_handler+0x176>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 80029b4:	2300      	movs	r3, #0
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b8:	e00c      	b.n	80029d4 <instruction_handler+0x150>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	f103 020a 	add.w	r2, r3, #10
 80029c0:	88f9      	ldrh	r1, [r7, #6]
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	440b      	add	r3, r1
 80029c6:	494c      	ldr	r1, [pc, #304]	; (8002af8 <instruction_handler+0x274>)
 80029c8:	5c89      	ldrb	r1, [r1, r2]
 80029ca:	4a4d      	ldr	r2, [pc, #308]	; (8002b00 <instruction_handler+0x27c>)
 80029cc:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	3301      	adds	r3, #1
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d4:	88bb      	ldrh	r3, [r7, #4]
 80029d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3ee      	bcc.n	80029ba <instruction_handler+0x136>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	2b3f      	cmp	r3, #63	; 0x3f
 80029e0:	d801      	bhi.n	80029e6 <instruction_handler+0x162>
				{
					store_eeprom_regs();
 80029e2:	f7fe ffd9 	bl	8001998 <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80029e6:	4b45      	ldr	r3, [pc, #276]	; (8002afc <instruction_handler+0x278>)
 80029e8:	2255      	movs	r2, #85	; 0x55
 80029ea:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80029ec:	4b43      	ldr	r3, [pc, #268]	; (8002afc <instruction_handler+0x278>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80029f2:	2002      	movs	r0, #2
 80029f4:	f7ff fefe 	bl	80027f4 <packet_encapsulate>
 80029f8:	e008      	b.n	8002a0c <instruction_handler+0x188>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <instruction_handler+0x278>)
 80029fc:	2255      	movs	r2, #85	; 0x55
 80029fe:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 8002a00:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <instruction_handler+0x278>)
 8002a02:	2207      	movs	r2, #7
 8002a04:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8002a06:	2002      	movs	r0, #2
 8002a08:	f7ff fef4 	bl	80027f4 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002a0c:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <instruction_handler+0x280>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	493a      	ldr	r1, [pc, #232]	; (8002afc <instruction_handler+0x278>)
 8002a14:	483c      	ldr	r0, [pc, #240]	; (8002b08 <instruction_handler+0x284>)
 8002a16:	f000 fb2b 	bl	8003070 <HAL_Serial_Write>
		}
		break;
 8002a1a:	e09f      	b.n	8002b5c <instruction_handler+0x2d8>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <instruction_handler+0x274>)
 8002a1e:	799b      	ldrb	r3, [r3, #6]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <instruction_handler+0x274>)
 8002a26:	795b      	ldrb	r3, [r3, #5]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b07      	subs	r3, #7
 8002a32:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <instruction_handler+0x274>)
 8002a36:	7a5b      	ldrb	r3, [r3, #9]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <instruction_handler+0x274>)
 8002a3e:	7a1b      	ldrb	r3, [r3, #8]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <instruction_handler+0x274>)
 8002a4a:	7adb      	ldrb	r3, [r3, #11]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <instruction_handler+0x274>)
 8002a50:	7a92      	ldrb	r2, [r2, #10]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 8002a56:	8bfa      	ldrh	r2, [r7, #30]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 8002a62:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <instruction_handler+0x27c>)
 8002a64:	78db      	ldrb	r3, [r3, #3]
 8002a66:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	e027      	b.n	8002abe <instruction_handler+0x23a>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3301      	adds	r3, #1
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	330c      	adds	r3, #12
 8002a7a:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <instruction_handler+0x274>)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d114      	bne.n	8002ab8 <instruction_handler+0x234>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
 8002a92:	e00d      	b.n	8002ab0 <instruction_handler+0x22c>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	4413      	add	r3, r2
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	8bb9      	ldrh	r1, [r7, #28]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	440b      	add	r3, r1
 8002aa2:	4915      	ldr	r1, [pc, #84]	; (8002af8 <instruction_handler+0x274>)
 8002aa4:	5c89      	ldrb	r1, [r1, r2]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <instruction_handler+0x27c>)
 8002aa8:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	3301      	adds	r3, #1
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d3ed      	bcc.n	8002a94 <instruction_handler+0x210>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	3301      	adds	r3, #1
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	8afb      	ldrh	r3, [r7, #22]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3d3      	bcc.n	8002a6e <instruction_handler+0x1ea>
				}
			}
		}
		break;
 8002ac6:	e049      	b.n	8002b5c <instruction_handler+0x2d8>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 8002ac8:	f7fe fe98 	bl	80017fc <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <instruction_handler+0x278>)
 8002ace:	2255      	movs	r2, #85	; 0x55
 8002ad0:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <instruction_handler+0x278>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8002ad8:	2002      	movs	r0, #2
 8002ada:	f7ff fe8b 	bl	80027f4 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <instruction_handler+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4905      	ldr	r1, [pc, #20]	; (8002afc <instruction_handler+0x278>)
 8002ae6:	4808      	ldr	r0, [pc, #32]	; (8002b08 <instruction_handler+0x284>)
 8002ae8:	f000 fac2 	bl	8003070 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8002aec:	2064      	movs	r0, #100	; 0x64
 8002aee:	f000 ff89 	bl	8003a04 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8002af2:	f002 fd4a 	bl	800558a <HAL_NVIC_SystemReset>
		}
		break;
 8002af6:	e031      	b.n	8002b5c <instruction_handler+0x2d8>
 8002af8:	20002cf4 	.word	0x20002cf4
 8002afc:	20003140 	.word	0x20003140
 8002b00:	200000dc 	.word	0x200000dc
 8002b04:	200000c4 	.word	0x200000c4
 8002b08:	20000360 	.word	0x20000360
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <instruction_handler+0x2e0>)
 8002b0e:	2255      	movs	r2, #85	; 0x55
 8002b10:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <instruction_handler+0x2e0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f7ff fe6b 	bl	80027f4 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <instruction_handler+0x2e4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	490f      	ldr	r1, [pc, #60]	; (8002b64 <instruction_handler+0x2e0>)
 8002b26:	4811      	ldr	r0, [pc, #68]	; (8002b6c <instruction_handler+0x2e8>)
 8002b28:	f000 faa2 	bl	8003070 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8002b2c:	2064      	movs	r0, #100	; 0x64
 8002b2e:	f000 ff69 	bl	8003a04 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8002b32:	f002 fd2a 	bl	800558a <HAL_NVIC_SystemReset>
		}
		break;
 8002b36:	e011      	b.n	8002b5c <instruction_handler+0x2d8>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <instruction_handler+0x2e0>)
 8002b3a:	2255      	movs	r2, #85	; 0x55
 8002b3c:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <instruction_handler+0x2e0>)
 8002b40:	2202      	movs	r2, #2
 8002b42:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7ff fe55 	bl	80027f4 <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <instruction_handler+0x2e4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4904      	ldr	r1, [pc, #16]	; (8002b64 <instruction_handler+0x2e0>)
 8002b52:	4806      	ldr	r0, [pc, #24]	; (8002b6c <instruction_handler+0x2e8>)
 8002b54:	f000 fa8c 	bl	8003070 <HAL_Serial_Write>
		break;
 8002b58:	e000      	b.n	8002b5c <instruction_handler+0x2d8>
		break;
 8002b5a:	bf00      	nop
		// nope
	}
}
 8002b5c:	bf00      	nop
 8002b5e:	3730      	adds	r7, #48	; 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20003140 	.word	0x20003140
 8002b68:	200000c4 	.word	0x200000c4
 8002b6c:	20000360 	.word	0x20000360

08002b70 <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 8002b7a:	4b84      	ldr	r3, [pc, #528]	; (8002d8c <packet_handler+0x21c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b09      	cmp	r3, #9
 8002b80:	f200 8100 	bhi.w	8002d84 <packet_handler+0x214>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <packet_handler+0x1c>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002bb5 	.word	0x08002bb5
 8002b90:	08002bcb 	.word	0x08002bcb
 8002b94:	08002bfb 	.word	0x08002bfb
 8002b98:	08002c17 	.word	0x08002c17
 8002b9c:	08002c33 	.word	0x08002c33
 8002ba0:	08002c55 	.word	0x08002c55
 8002ba4:	08002c63 	.word	0x08002c63
 8002ba8:	08002c9b 	.word	0x08002c9b
 8002bac:	08002cc9 	.word	0x08002cc9
 8002bb0:	08002ce5 	.word	0x08002ce5
	{
	case HEADER1:
		if(c==0xFF)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	2bff      	cmp	r3, #255	; 0xff
 8002bb8:	f040 80e1 	bne.w	8002d7e <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8002bbc:	4a74      	ldr	r2, [pc, #464]	; (8002d90 <packet_handler+0x220>)
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 8002bc2:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <packet_handler+0x21c>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002bc8:	e0d9      	b.n	8002d7e <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	2bff      	cmp	r3, #255	; 0xff
 8002bce:	d106      	bne.n	8002bde <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 8002bd0:	4a6f      	ldr	r2, [pc, #444]	; (8002d90 <packet_handler+0x220>)
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <packet_handler+0x21c>)
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8002bdc:	e0d2      	b.n	8002d84 <packet_handler+0x214>
		else if(c==0xFD)
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2bfd      	cmp	r3, #253	; 0xfd
 8002be2:	d106      	bne.n	8002bf2 <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8002be4:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <packet_handler+0x220>)
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8002bea:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <packet_handler+0x21c>)
 8002bec:	2203      	movs	r2, #3
 8002bee:	701a      	strb	r2, [r3, #0]
		break;
 8002bf0:	e0c8      	b.n	8002d84 <packet_handler+0x214>
			packet_state = HEADER1;
 8002bf2:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <packet_handler+0x21c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
		break;
 8002bf8:	e0c4      	b.n	8002d84 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2bfd      	cmp	r3, #253	; 0xfd
 8002bfe:	d106      	bne.n	8002c0e <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8002c00:	4a63      	ldr	r2, [pc, #396]	; (8002d90 <packet_handler+0x220>)
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8002c06:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <packet_handler+0x21c>)
 8002c08:	2203      	movs	r2, #3
 8002c0a:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002c0c:	e0ba      	b.n	8002d84 <packet_handler+0x214>
			packet_state = HEADER1;
 8002c0e:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <packet_handler+0x21c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
		break;
 8002c14:	e0b6      	b.n	8002d84 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 8002c1c:	4a5c      	ldr	r2, [pc, #368]	; (8002d90 <packet_handler+0x220>)
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 8002c22:	4b5a      	ldr	r3, [pc, #360]	; (8002d8c <packet_handler+0x21c>)
 8002c24:	2204      	movs	r2, #4
 8002c26:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002c28:	e0ac      	b.n	8002d84 <packet_handler+0x214>
			packet_state = HEADER1;
 8002c2a:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <packet_handler+0x21c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
		break;
 8002c30:	e0a8      	b.n	8002d84 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2bfc      	cmp	r3, #252	; 0xfc
 8002c36:	d902      	bls.n	8002c3e <packet_handler+0xce>
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	2bfe      	cmp	r3, #254	; 0xfe
 8002c3c:	d106      	bne.n	8002c4c <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 8002c3e:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <packet_handler+0x220>)
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 8002c44:	4b51      	ldr	r3, [pc, #324]	; (8002d8c <packet_handler+0x21c>)
 8002c46:	2205      	movs	r2, #5
 8002c48:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002c4a:	e09b      	b.n	8002d84 <packet_handler+0x214>
			packet_state = HEADER1;
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <packet_handler+0x21c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
		break;
 8002c52:	e097      	b.n	8002d84 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <packet_handler+0x220>)
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 8002c5a:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <packet_handler+0x21c>)
 8002c5c:	2206      	movs	r2, #6
 8002c5e:	701a      	strb	r2, [r3, #0]
		break;
 8002c60:	e090      	b.n	8002d84 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 8002c62:	4a4b      	ldr	r2, [pc, #300]	; (8002d90 <packet_handler+0x220>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 8002c68:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <packet_handler+0x220>)
 8002c6a:	799b      	ldrb	r3, [r3, #6]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	4a48      	ldr	r2, [pc, #288]	; (8002d90 <packet_handler+0x220>)
 8002c70:	7952      	ldrb	r2, [r2, #5]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	3b02      	subs	r3, #2
 8002c76:	4a47      	ldr	r2, [pc, #284]	; (8002d94 <packet_handler+0x224>)
 8002c78:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 8002c7a:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <packet_handler+0x224>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c82:	d806      	bhi.n	8002c92 <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 8002c84:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <packet_handler+0x21c>)
 8002c86:	2207      	movs	r2, #7
 8002c88:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 8002c8a:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <packet_handler+0x228>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002c90:	e078      	b.n	8002d84 <packet_handler+0x214>
			packet_state = HEADER1;
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <packet_handler+0x21c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
		break;
 8002c98:	e074      	b.n	8002d84 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8002c9a:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <packet_handler+0x228>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	493c      	ldr	r1, [pc, #240]	; (8002d90 <packet_handler+0x220>)
 8002ca0:	79fa      	ldrb	r2, [r7, #7]
 8002ca2:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8002ca4:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <packet_handler+0x228>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a3b      	ldr	r2, [pc, #236]	; (8002d98 <packet_handler+0x228>)
 8002cac:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 8002cae:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <packet_handler+0x224>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	4a37      	ldr	r2, [pc, #220]	; (8002d94 <packet_handler+0x224>)
 8002cb6:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 8002cb8:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <packet_handler+0x224>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d160      	bne.n	8002d82 <packet_handler+0x212>
			packet_state = CRC1;
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <packet_handler+0x21c>)
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	701a      	strb	r2, [r3, #0]
		break;
 8002cc6:	e05c      	b.n	8002d82 <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8002cc8:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <packet_handler+0x228>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4930      	ldr	r1, [pc, #192]	; (8002d90 <packet_handler+0x220>)
 8002cce:	79fa      	ldrb	r2, [r7, #7]
 8002cd0:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <packet_handler+0x228>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4a2f      	ldr	r2, [pc, #188]	; (8002d98 <packet_handler+0x228>)
 8002cda:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <packet_handler+0x21c>)
 8002cde:	2209      	movs	r2, #9
 8002ce0:	701a      	strb	r2, [r3, #0]
		break;
 8002ce2:	e04f      	b.n	8002d84 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <packet_handler+0x228>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4929      	ldr	r1, [pc, #164]	; (8002d90 <packet_handler+0x220>)
 8002cea:	79fa      	ldrb	r2, [r7, #7]
 8002cec:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 8002cee:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <packet_handler+0x228>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <packet_handler+0x220>)
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	b21a      	sxth	r2, r3
 8002cfa:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <packet_handler+0x228>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	4923      	ldr	r1, [pc, #140]	; (8002d90 <packet_handler+0x220>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b21b      	sxth	r3, r3
 8002d0a:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 8002d0c:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <packet_handler+0x228>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	491d      	ldr	r1, [pc, #116]	; (8002d90 <packet_handler+0x220>)
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7ff fd38 	bl	8002790 <updateCRC>
 8002d20:	4603      	mov	r3, r0
 8002d22:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 8002d24:	89ba      	ldrh	r2, [r7, #12]
 8002d26:	89fb      	ldrh	r3, [r7, #14]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d10c      	bne.n	8002d46 <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <packet_handler+0x220>)
 8002d2e:	791a      	ldrb	r2, [r3, #4]
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <packet_handler+0x22c>)
 8002d32:	78db      	ldrb	r3, [r3, #3]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d003      	beq.n	8002d40 <packet_handler+0x1d0>
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <packet_handler+0x220>)
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	2bfe      	cmp	r3, #254	; 0xfe
 8002d3e:	d11a      	bne.n	8002d76 <packet_handler+0x206>
				instruction_handler();
 8002d40:	f7ff fda0 	bl	8002884 <instruction_handler>
 8002d44:	e017      	b.n	8002d76 <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <packet_handler+0x22c>)
 8002d48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <packet_handler+0x22c>)
 8002d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <packet_handler+0x230>)
 8002d58:	2255      	movs	r2, #85	; 0x55
 8002d5a:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <packet_handler+0x230>)
 8002d5e:	2203      	movs	r2, #3
 8002d60:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8002d62:	2002      	movs	r0, #2
 8002d64:	f7ff fd46 	bl	80027f4 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <packet_handler+0x234>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	490c      	ldr	r1, [pc, #48]	; (8002da0 <packet_handler+0x230>)
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <packet_handler+0x238>)
 8002d72:	f000 f97d 	bl	8003070 <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <packet_handler+0x21c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
		break;
 8002d7c:	e002      	b.n	8002d84 <packet_handler+0x214>
		break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <packet_handler+0x214>
		break;
 8002d82:	bf00      	nop
	}
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200000c8 	.word	0x200000c8
 8002d90:	20002cf4 	.word	0x20002cf4
 8002d94:	200000c0 	.word	0x200000c0
 8002d98:	200000bc 	.word	0x200000bc
 8002d9c:	200000dc 	.word	0x200000dc
 8002da0:	20003140 	.word	0x20003140
 8002da4:	200000c4 	.word	0x200000c4
 8002da8:	20000360 	.word	0x20000360

08002dac <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e032      	b.n	8002e22 <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <HAL_UART_ErrorCallback+0x90>)
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d124      	bne.n	8002e18 <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <HAL_UART_ErrorCallback+0x90>)
 8002dd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4917      	ldr	r1, [pc, #92]	; (8002e3c <HAL_UART_ErrorCallback+0x90>)
 8002dde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002de2:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8002de6:	3210      	adds	r2, #16
 8002de8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002dec:	3310      	adds	r3, #16
 8002dee:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <HAL_UART_ErrorCallback+0x90>)
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <HAL_UART_ErrorCallback+0x90>)
 8002e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e06:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002e0a:	3310      	adds	r3, #16
 8002e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e10:	4619      	mov	r1, r3
 8002e12:	f005 ff75 	bl	8008d00 <HAL_UART_Receive_DMA>
		   break;
 8002e16:	e00b      	b.n	8002e30 <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_UART_ErrorCallback+0x8c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_UART_ErrorCallback+0x94>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1c5      	bne.n	8002dbc <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200000d4 	.word	0x200000d4
 8002e3c:	200000cc 	.word	0x200000cc
 8002e40:	200000d0 	.word	0x200000d0

08002e44 <HAL_Serial_Init_Half_Duplex>:
		GPIO_PinState PinState_TX,
		GPIO_TypeDef *GPIOx_RX,
		uint16_t GPIO_Pin_RX,
		GPIO_PinState PinState_RX
)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	807b      	strh	r3, [r7, #2]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8002e52:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <HAL_Serial_Init_Half_Duplex+0x124>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	4943      	ldr	r1, [pc, #268]	; (8002f68 <HAL_Serial_Init_Half_Duplex+0x124>)
 8002e5a:	600a      	str	r2, [r1, #0]
 8002e5c:	4943      	ldr	r1, [pc, #268]	; (8002f6c <HAL_Serial_Init_Half_Duplex+0x128>)
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002e70:	3304      	adds	r3, #4
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002e88:	330c      	adds	r3, #12
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8002e94:	3210      	adds	r2, #16
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002e9c:	3310      	adds	r3, #16
 8002e9e:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002eaa:	3310      	adds	r3, #16
 8002eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f005 ff25 	bl	8008d00 <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = true;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = GPIOx_TX;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ec8:	3318      	adds	r3, #24
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = GPIO_Pin_TX;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ed4:	331c      	adds	r3, #28
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = PinState_TX;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ee0:	331e      	adds	r3, #30
 8002ee2:	7e3a      	ldrb	r2, [r7, #24]
 8002ee4:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = GPIOx_RX;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002eec:	3320      	adds	r3, #32
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = GPIO_Pin_RX;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ef8:	3324      	adds	r3, #36	; 0x24
 8002efa:	8c3a      	ldrh	r2, [r7, #32]
 8002efc:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = PinState_RX;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f04:	3326      	adds	r3, #38	; 0x26
 8002f06:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f0a:	701a      	strb	r2, [r3, #0]
    // TX = OFF
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f12:	3318      	adds	r3, #24
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f1c:	331c      	adds	r3, #28
 8002f1e:	8819      	ldrh	r1, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f26:	331e      	adds	r3, #30
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	f003 fa1b 	bl	8006370 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f40:	3320      	adds	r3, #32
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f4a:	3324      	adds	r3, #36	; 0x24
 8002f4c:	8819      	ldrh	r1, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f54:	3326      	adds	r3, #38	; 0x26
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f003 fa09 	bl	8006370 <HAL_GPIO_WritePin>
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	200000d0 	.word	0x200000d0
 8002f6c:	200000cc 	.word	0x200000cc

08002f70 <HAL_Serial_Available>:

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_Serial_Available+0x14>
        return 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e01f      	b.n	8002fc4 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f8a:	3310      	adds	r3, #16
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	6852      	ldr	r2, [r2, #4]
 8002f96:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fa4:	3310      	adds	r3, #16
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d303      	bcc.n	8002fba <HAL_Serial_Available+0x4a>
        return head-tail;
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	e004      	b.n	8002fc4 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_Serial_GetChar+0x14>
        return 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e03f      	b.n	8003064 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002fea:	3310      	adds	r3, #16
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	6852      	ldr	r2, [r2, #4]
 8002ff6:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8002ffa:	4413      	add	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003004:	3310      	adds	r3, #16
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	429a      	cmp	r2, r3
 8003010:	d027      	beq.n	8003062 <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003018:	3310      	adds	r3, #16
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	1c51      	adds	r1, r2, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003024:	3310      	adds	r3, #16
 8003026:	6019      	str	r1, [r3, #0]
 8003028:	7813      	ldrb	r3, [r2, #0]
 800302a:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003032:	3310      	adds	r3, #16
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800303c:	3310      	adds	r3, #16
 800303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003042:	429a      	cmp	r2, r3
 8003044:	d30b      	bcc.n	800305e <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800304c:	3310      	adds	r3, #16
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800305a:	3310      	adds	r3, #16
 800305c:	601a      	str	r2, [r3, #0]
        return c;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	e000      	b.n	8003064 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_Serial_Write+0x18>
        return 0;
 8003084:	2300      	movs	r3, #0
 8003086:	e09a      	b.n	80031be <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800308e:	3304      	adds	r3, #4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4403      	add	r3, r0
 80030a0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80030a4:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80030ac:	3304      	adds	r3, #4
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	019b      	lsls	r3, r3, #6
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f006 fede 	bl	8009e88 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80030d2:	3304      	adds	r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80030e2:	3304      	adds	r3, #4
 80030e4:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80030ec:	330c      	adds	r3, #12
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d163      	bne.n	80031bc <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80030fa:	330c      	adds	r3, #12
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003106:	3314      	adds	r3, #20
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d028      	beq.n	8003160 <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003114:	3318      	adds	r3, #24
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800311e:	331c      	adds	r3, #28
 8003120:	8819      	ldrh	r1, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003128:	331e      	adds	r3, #30
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	f003 f91f 	bl	8006370 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003138:	3320      	adds	r3, #32
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003142:	3324      	adds	r3, #36	; 0x24
 8003144:	8819      	ldrh	r1, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800314c:	3326      	adds	r3, #38	; 0x26
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	f003 f908 	bl	8006370 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800316a:	3308      	adds	r3, #8
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003182:	3308      	adds	r3, #8
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	019b      	lsls	r3, r3, #6
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003196:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 8003198:	b29b      	uxth	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	4621      	mov	r1, r4
 800319e:	f005 fd2f 	bl	8008c00 <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80031a8:	3308      	adds	r3, #8
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	f003 021f 	and.w	r2, r3, #31
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80031b8:	3308      	adds	r3, #8
 80031ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 80031bc:	687b      	ldr	r3, [r7, #4]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd90      	pop	{r4, r7, pc}
	...

080031c8 <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 80031d0:	4b71      	ldr	r3, [pc, #452]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e0d0      	b.n	800337a <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6f      	ldr	r2, [pc, #444]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 80031de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	f040 80c2 	bne.w	8003370 <HAL_UART_TxCpltCallback+0x1a8>
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6a      	ldr	r2, [pc, #424]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 80031f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80031fa:	330c      	adds	r3, #12
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 80b6 	bne.w	8003370 <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a64      	ldr	r2, [pc, #400]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 800320a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003212:	3304      	adds	r3, #4
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b60      	ldr	r3, [pc, #384]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4960      	ldr	r1, [pc, #384]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 800321c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003220:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003224:	3308      	adds	r3, #8
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d04a      	beq.n	80032c2 <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 800322c:	4b5a      	ldr	r3, [pc, #360]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5a      	ldr	r2, [pc, #360]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 8003236:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8003238:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a57      	ldr	r2, [pc, #348]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 800323e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003242:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a55      	ldr	r2, [pc, #340]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 8003248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003250:	3308      	adds	r3, #8
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	019b      	lsls	r3, r3, #6
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8003260:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a4d      	ldr	r2, [pc, #308]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 8003266:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800326a:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4b      	ldr	r2, [pc, #300]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 8003270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003274:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003278:	3308      	adds	r3, #8
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	019b      	lsls	r3, r3, #6
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800328a:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	4621      	mov	r1, r4
 8003292:	f005 fcb5 	bl	8008c00 <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 8003296:	4b40      	ldr	r3, [pc, #256]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80032a4:	3308      	adds	r3, #8
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	493b      	ldr	r1, [pc, #236]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 80032b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032b4:	f002 021f 	and.w	r2, r2, #31
 80032b8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80032bc:	3308      	adds	r3, #8
 80032be:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 80032c0:	e064      	b.n	800338c <HAL_UART_TxCpltCallback+0x1c4>
				hserial_table[id]->tx_dma = 0;
 80032c2:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a35      	ldr	r2, [pc, #212]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 80032c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032cc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80032d0:	330c      	adds	r3, #12
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 80032d6:	4b30      	ldr	r3, [pc, #192]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a30      	ldr	r2, [pc, #192]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 80032dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80032e4:	3314      	adds	r3, #20
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d04f      	beq.n	800338c <HAL_UART_TxCpltCallback+0x1c4>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80032fa:	3318      	adds	r3, #24
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 8003304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003308:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800330c:	331c      	adds	r3, #28
 800330e:	8819      	ldrh	r1, [r3, #0]
 8003310:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a21      	ldr	r2, [pc, #132]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 8003316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800331e:	331e      	adds	r3, #30
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	f003 f81f 	bl	8006370 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 8003332:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 8003338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003340:	3320      	adds	r3, #32
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 800334a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003352:	3324      	adds	r3, #36	; 0x24
 8003354:	8819      	ldrh	r1, [r3, #0]
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a10      	ldr	r2, [pc, #64]	; (800339c <HAL_UART_TxCpltCallback+0x1d4>)
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003360:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003364:	3326      	adds	r3, #38	; 0x26
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	f003 f801 	bl	8006370 <HAL_GPIO_WritePin>
           break;
 800336e:	e00d      	b.n	800338c <HAL_UART_TxCpltCallback+0x1c4>
    for(id=0;id!=serial_counter;++id)
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <HAL_UART_TxCpltCallback+0x1d0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_UART_TxCpltCallback+0x1d8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	f47f af27 	bne.w	80031d8 <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 800338a:	e000      	b.n	800338e <HAL_UART_TxCpltCallback+0x1c6>
           break;
 800338c:	bf00      	nop
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bd90      	pop	{r4, r7, pc}
 8003396:	bf00      	nop
 8003398:	200000d8 	.word	0x200000d8
 800339c:	200000cc 	.word	0x200000cc
 80033a0:	200000d0 	.word	0x200000d0

080033a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_MspInit+0x44>)
 80033ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ae:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <HAL_MspInit+0x44>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6613      	str	r3, [r2, #96]	; 0x60
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_MspInit+0x44>)
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_MspInit+0x44>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <HAL_MspInit+0x44>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6593      	str	r3, [r2, #88]	; 0x58
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_MspInit+0x44>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80033da:	f003 f987 	bl	80066ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000

080033ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 0314 	add.w	r3, r7, #20
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340c:	d16e      	bne.n	80034ec <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	4a38      	ldr	r2, [pc, #224]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 8003414:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003426:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	4a32      	ldr	r2, [pc, #200]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 800342c:	f043 0320 	orr.w	r3, r3, #32
 8003430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003432:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	4a2c      	ldr	r2, [pc, #176]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_ADC_MspInit+0x108>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003456:	2301      	movs	r3, #1
 8003458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345a:	2303      	movs	r3, #3
 800345c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	4823      	ldr	r0, [pc, #140]	; (80034f8 <HAL_ADC_MspInit+0x10c>)
 800346a:	f002 fde7 	bl	800603c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800346e:	2301      	movs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003472:	2303      	movs	r3, #3
 8003474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347a:	f107 0314 	add.w	r3, r7, #20
 800347e:	4619      	mov	r1, r3
 8003480:	481e      	ldr	r0, [pc, #120]	; (80034fc <HAL_ADC_MspInit+0x110>)
 8003482:	f002 fddb 	bl	800603c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <HAL_ADC_MspInit+0x114>)
 8003488:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <HAL_ADC_MspInit+0x118>)
 800348a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <HAL_ADC_MspInit+0x114>)
 800348e:	2205      	movs	r2, #5
 8003490:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_ADC_MspInit+0x114>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_ADC_MspInit+0x114>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_ADC_MspInit+0x114>)
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034a4:	4b16      	ldr	r3, [pc, #88]	; (8003500 <HAL_ADC_MspInit+0x114>)
 80034a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_ADC_MspInit+0x114>)
 80034ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_ADC_MspInit+0x114>)
 80034b6:	2220      	movs	r2, #32
 80034b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_ADC_MspInit+0x114>)
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034c0:	480f      	ldr	r0, [pc, #60]	; (8003500 <HAL_ADC_MspInit+0x114>)
 80034c2:	f002 f873 	bl	80055ac <HAL_DMA_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80034cc:	f7ff f82e 	bl	800252c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <HAL_ADC_MspInit+0x114>)
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_ADC_MspInit+0x114>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80034dc:	2200      	movs	r2, #0
 80034de:	2100      	movs	r1, #0
 80034e0:	2012      	movs	r0, #18
 80034e2:	f002 f82a 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80034e6:	2012      	movs	r0, #18
 80034e8:	f002 f841 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034ec:	bf00      	nop
 80034ee:	3728      	adds	r7, #40	; 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	48001400 	.word	0x48001400
 80034fc:	48000400 	.word	0x48000400
 8003500:	20002c08 	.word	0x20002c08
 8003504:	40020030 	.word	0x40020030

08003508 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0f      	ldr	r2, [pc, #60]	; (8003564 <HAL_OPAMP_MspInit+0x5c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d118      	bne.n	800355c <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352a:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <HAL_OPAMP_MspInit+0x60>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <HAL_OPAMP_MspInit+0x60>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003536:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_OPAMP_MspInit+0x60>)
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003542:	230a      	movs	r3, #10
 8003544:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003546:	2303      	movs	r3, #3
 8003548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	4619      	mov	r1, r3
 8003554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003558:	f002 fd70 	bl	800603c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 800355c:	bf00      	nop
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40010300 	.word	0x40010300
 8003568:	40021000 	.word	0x40021000

0800356c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <HAL_TIM_Base_MspInit+0x68>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d114      	bne.n	80035a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800357e:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <HAL_TIM_Base_MspInit+0x6c>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <HAL_TIM_Base_MspInit+0x6c>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6593      	str	r3, [r2, #88]	; 0x58
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_TIM_Base_MspInit+0x6c>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2100      	movs	r1, #0
 800359a:	201e      	movs	r0, #30
 800359c:	f001 ffcd 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035a0:	201e      	movs	r0, #30
 80035a2:	f001 ffe4 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80035a6:	e010      	b.n	80035ca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <HAL_TIM_Base_MspInit+0x70>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10b      	bne.n	80035ca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_TIM_Base_MspInit+0x6c>)
 80035b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <HAL_TIM_Base_MspInit+0x6c>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6613      	str	r3, [r2, #96]	; 0x60
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_TIM_Base_MspInit+0x6c>)
 80035c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40014000 	.word	0x40014000

080035e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_TIM_MspPostInit+0x64>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d11b      	bne.n	800363a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_TIM_MspPostInit+0x68>)
 8003604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <HAL_TIM_MspPostInit+0x68>)
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_TIM_MspPostInit+0x68>)
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800361a:	23c0      	movs	r3, #192	; 0xc0
 800361c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800362a:	2302      	movs	r3, #2
 800362c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	4619      	mov	r1, r3
 8003634:	4805      	ldr	r0, [pc, #20]	; (800364c <HAL_TIM_MspPostInit+0x6c>)
 8003636:	f002 fd01 	bl	800603c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40000800 	.word	0x40000800
 8003648:	40021000 	.word	0x40021000
 800364c:	48000400 	.word	0x48000400

08003650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a53      	ldr	r2, [pc, #332]	; (80037bc <HAL_UART_MspInit+0x16c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f040 80a0 	bne.w	80037b4 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003674:	4b52      	ldr	r3, [pc, #328]	; (80037c0 <HAL_UART_MspInit+0x170>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	4a51      	ldr	r2, [pc, #324]	; (80037c0 <HAL_UART_MspInit+0x170>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367e:	6593      	str	r3, [r2, #88]	; 0x58
 8003680:	4b4f      	ldr	r3, [pc, #316]	; (80037c0 <HAL_UART_MspInit+0x170>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <HAL_UART_MspInit+0x170>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <HAL_UART_MspInit+0x170>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003698:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_UART_MspInit+0x170>)
 800369a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a4:	4b46      	ldr	r3, [pc, #280]	; (80037c0 <HAL_UART_MspInit+0x170>)
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	4a45      	ldr	r2, [pc, #276]	; (80037c0 <HAL_UART_MspInit+0x170>)
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_UART_MspInit+0x170>)
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036ce:	2307      	movs	r3, #7
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	4619      	mov	r1, r3
 80036d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036dc:	f002 fcae 	bl	800603c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036e0:	2308      	movs	r3, #8
 80036e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2302      	movs	r3, #2
 80036e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ec:	2300      	movs	r3, #0
 80036ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036f0:	2307      	movs	r3, #7
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4619      	mov	r1, r3
 80036fa:	4832      	ldr	r0, [pc, #200]	; (80037c4 <HAL_UART_MspInit+0x174>)
 80036fc:	f002 fc9e 	bl	800603c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003700:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_UART_MspInit+0x178>)
 8003702:	4a32      	ldr	r2, [pc, #200]	; (80037cc <HAL_UART_MspInit+0x17c>)
 8003704:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003706:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <HAL_UART_MspInit+0x178>)
 8003708:	221a      	movs	r2, #26
 800370a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800370c:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <HAL_UART_MspInit+0x178>)
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_UART_MspInit+0x178>)
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_UART_MspInit+0x178>)
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_UART_MspInit+0x178>)
 8003720:	2200      	movs	r2, #0
 8003722:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003724:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_UART_MspInit+0x178>)
 8003726:	2200      	movs	r2, #0
 8003728:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800372a:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_UART_MspInit+0x178>)
 800372c:	2220      	movs	r2, #32
 800372e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <HAL_UART_MspInit+0x178>)
 8003732:	2200      	movs	r2, #0
 8003734:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003736:	4824      	ldr	r0, [pc, #144]	; (80037c8 <HAL_UART_MspInit+0x178>)
 8003738:	f001 ff38 	bl	80055ac <HAL_DMA_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8003742:	f7fe fef3 	bl	800252c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_UART_MspInit+0x178>)
 800374a:	679a      	str	r2, [r3, #120]	; 0x78
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_UART_MspInit+0x178>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003752:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <HAL_UART_MspInit+0x180>)
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_UART_MspInit+0x184>)
 8003756:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_UART_MspInit+0x180>)
 800375a:	221b      	movs	r2, #27
 800375c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HAL_UART_MspInit+0x180>)
 8003760:	2210      	movs	r2, #16
 8003762:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_UART_MspInit+0x180>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_UART_MspInit+0x180>)
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_UART_MspInit+0x180>)
 8003772:	2200      	movs	r2, #0
 8003774:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_UART_MspInit+0x180>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_UART_MspInit+0x180>)
 800377e:	2200      	movs	r2, #0
 8003780:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_UART_MspInit+0x180>)
 8003784:	2200      	movs	r2, #0
 8003786:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003788:	4811      	ldr	r0, [pc, #68]	; (80037d0 <HAL_UART_MspInit+0x180>)
 800378a:	f001 ff0f 	bl	80055ac <HAL_DMA_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8003794:	f7fe feca 	bl	800252c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_UART_MspInit+0x180>)
 800379c:	675a      	str	r2, [r3, #116]	; 0x74
 800379e:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <HAL_UART_MspInit+0x180>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	2026      	movs	r0, #38	; 0x26
 80037aa:	f001 fec6 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037ae:	2026      	movs	r0, #38	; 0x26
 80037b0:	f001 fedd 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037b4:	bf00      	nop
 80037b6:	3728      	adds	r7, #40	; 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40004400 	.word	0x40004400
 80037c0:	40021000 	.word	0x40021000
 80037c4:	48000400 	.word	0x48000400
 80037c8:	20000160 	.word	0x20000160
 80037cc:	40020008 	.word	0x40020008
 80037d0:	20000300 	.word	0x20000300
 80037d4:	4002001c 	.word	0x4002001c

080037d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <NMI_Handler+0x4>

080037de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <HardFault_Handler+0x4>

080037e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <MemManage_Handler+0x4>

080037ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037ee:	e7fe      	b.n	80037ee <BusFault_Handler+0x4>

080037f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037f4:	e7fe      	b.n	80037f4 <UsageFault_Handler+0x4>

080037f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003824:	f000 f8d0 	bl	80039c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}

0800382c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <DMA1_Channel1_IRQHandler+0x10>)
 8003832:	f002 f845 	bl	80058c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000160 	.word	0x20000160

08003840 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003844:	4802      	ldr	r0, [pc, #8]	; (8003850 <DMA1_Channel2_IRQHandler+0x10>)
 8003846:	f002 f83b 	bl	80058c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000300 	.word	0x20000300

08003854 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <DMA1_Channel3_IRQHandler+0x10>)
 800385a:	f002 f831 	bl	80058c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20002c08 	.word	0x20002c08

08003868 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <ADC1_2_IRQHandler+0x10>)
 800386e:	f000 fd67 	bl	8004340 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000294 	.word	0x20000294

0800387c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <TIM4_IRQHandler+0x10>)
 8003882:	f004 f8c9 	bl	8007a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200001c0 	.word	0x200001c0

08003890 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <USART2_IRQHandler+0x10>)
 8003896:	f005 fabb 	bl	8008e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20002c68 	.word	0x20002c68

080038a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <SystemInit+0x28>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <SystemInit+0x28>)
 80038b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <SystemInit+0x28>)
 80038ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038be:	609a      	str	r2, [r3, #8]
#endif
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038d0:	480d      	ldr	r0, [pc, #52]	; (8003908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038d4:	480d      	ldr	r0, [pc, #52]	; (800390c <LoopForever+0x6>)
  ldr r1, =_edata
 80038d6:	490e      	ldr	r1, [pc, #56]	; (8003910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038d8:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <LoopForever+0xe>)
  movs r3, #0
 80038da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80038dc:	e002      	b.n	80038e4 <LoopCopyDataInit>

080038de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e2:	3304      	adds	r3, #4

080038e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e8:	d3f9      	bcc.n	80038de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ea:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038ec:	4c0b      	ldr	r4, [pc, #44]	; (800391c <LoopForever+0x16>)
  movs r3, #0
 80038ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f0:	e001      	b.n	80038f6 <LoopFillZerobss>

080038f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f4:	3204      	adds	r2, #4

080038f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f8:	d3fb      	bcc.n	80038f2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038fa:	f7ff ffd3 	bl	80038a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038fe:	f006 fa9f 	bl	8009e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003902:	f7fe fa93 	bl	8001e2c <main>

08003906 <LoopForever>:

LoopForever:
    b LoopForever
 8003906:	e7fe      	b.n	8003906 <LoopForever>
  ldr   r0, =_estack
 8003908:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800390c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003910:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8003914:	0800a118 	.word	0x0800a118
  ldr r2, =_sbss
 8003918:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800391c:	20003590 	.word	0x20003590

08003920 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003920:	e7fe      	b.n	8003920 <COMP1_2_3_IRQHandler>

08003922 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392c:	2003      	movs	r0, #3
 800392e:	f001 fdf9 	bl	8005524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003932:	2000      	movs	r0, #0
 8003934:	f000 f80e 	bl	8003954 <HAL_InitTick>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	71fb      	strb	r3, [r7, #7]
 8003942:	e001      	b.n	8003948 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003944:	f7ff fd2e 	bl	80033a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003948:	79fb      	ldrb	r3, [r7, #7]

}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003960:	4b16      	ldr	r3, [pc, #88]	; (80039bc <HAL_InitTick+0x68>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d022      	beq.n	80039ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_InitTick+0x6c>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_InitTick+0x68>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003974:	fbb1 f3f3 	udiv	r3, r1, r3
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	4618      	mov	r0, r3
 800397e:	f001 fe08 	bl	8005592 <HAL_SYSTICK_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10f      	bne.n	80039a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d809      	bhi.n	80039a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800398e:	2200      	movs	r2, #0
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	f04f 30ff 	mov.w	r0, #4294967295
 8003996:	f001 fdd0 	bl	800553a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_InitTick+0x70>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e007      	b.n	80039b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e004      	b.n	80039b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e001      	b.n	80039b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	2000000c 	.word	0x2000000c
 80039c0:	20000004 	.word	0x20000004
 80039c4:	20000008 	.word	0x20000008

080039c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_IncTick+0x1c>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_IncTick+0x20>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	4a03      	ldr	r2, [pc, #12]	; (80039e4 <HAL_IncTick+0x1c>)
 80039d8:	6013      	str	r3, [r2, #0]
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	2000358c 	.word	0x2000358c
 80039e8:	2000000c 	.word	0x2000000c

080039ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_GetTick+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	2000358c 	.word	0x2000358c

08003a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7ff ffee 	bl	80039ec <HAL_GetTick>
 8003a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d004      	beq.n	8003a28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_Delay+0x40>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a28:	bf00      	nop
 8003a2a:	f7ff ffdf 	bl	80039ec <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d8f7      	bhi.n	8003a2a <HAL_Delay+0x26>
  {
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3360      	adds	r3, #96	; 0x60
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <LL_ADC_SetOffset+0x44>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	03fff000 	.word	0x03fff000

08003af8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3360      	adds	r3, #96	; 0x60
 8003b06:	461a      	mov	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3360      	adds	r3, #96	; 0x60
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3360      	adds	r3, #96	; 0x60
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3360      	adds	r3, #96	; 0x60
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	615a      	str	r2, [r3, #20]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3330      	adds	r3, #48	; 0x30
 8003c22:	461a      	mov	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	4413      	add	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	211f      	movs	r1, #31
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	401a      	ands	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	f003 011f 	and.w	r1, r3, #31
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c76:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0e5b      	lsrs	r3, r3, #25
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	4413      	add	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	0d1b      	lsrs	r3, r3, #20
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2107      	movs	r1, #7
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	0d1b      	lsrs	r3, r3, #20
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d00:	43db      	mvns	r3, r3
 8003d02:	401a      	ands	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f003 0318 	and.w	r3, r3, #24
 8003d0a:	4908      	ldr	r1, [pc, #32]	; (8003d2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d0c:	40d9      	lsrs	r1, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	400b      	ands	r3, r1
 8003d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d16:	431a      	orrs	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	0007ffff 	.word	0x0007ffff

08003d30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 031f 	and.w	r3, r3, #31
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6093      	str	r3, [r2, #8]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da0:	d101      	bne.n	8003da6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003dc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df0:	d101      	bne.n	8003df6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <LL_ADC_IsEnabled+0x18>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <LL_ADC_IsEnabled+0x1a>
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e66:	f043 0204 	orr.w	r2, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d101      	bne.n	8003e92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d101      	bne.n	8003eb8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e16b      	b.n	80041ba <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fa7b 	bl	80033ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff3f 	bl	8003d8c <LL_ADC_IsDeepPowerDownEnabled>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d004      	beq.n	8003f1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff25 	bl	8003d68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff5a 	bl	8003ddc <LL_ADC_IsInternalRegulatorEnabled>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d113      	bne.n	8003f56 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff3e 	bl	8003db4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003f38:	4ba2      	ldr	r3, [pc, #648]	; (80041c4 <HAL_ADC_Init+0x2fc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	4aa2      	ldr	r2, [pc, #648]	; (80041c8 <HAL_ADC_Init+0x300>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f48:	e002      	b.n	8003f50 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f9      	bne.n	8003f4a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff ff3e 	bl	8003ddc <LL_ADC_IsInternalRegulatorEnabled>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	f043 0210 	orr.w	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff ff77 	bl	8003e7a <LL_ADC_REG_IsConversionOngoing>
 8003f8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 8106 	bne.w	80041a8 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f040 8102 	bne.w	80041a8 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fac:	f043 0202 	orr.w	r2, r3, #2
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff37 	bl	8003e2c <LL_ADC_IsEnabled>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d111      	bne.n	8003fe8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fc4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003fc8:	f7ff ff30 	bl	8003e2c <LL_ADC_IsEnabled>
 8003fcc:	4604      	mov	r4, r0
 8003fce:	487f      	ldr	r0, [pc, #508]	; (80041cc <HAL_ADC_Init+0x304>)
 8003fd0:	f7ff ff2c 	bl	8003e2c <LL_ADC_IsEnabled>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4323      	orrs	r3, r4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	487b      	ldr	r0, [pc, #492]	; (80041d0 <HAL_ADC_Init+0x308>)
 8003fe4:	f7ff fd30 	bl	8003a48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7f5b      	ldrb	r3, [r3, #29]
 8003fec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ff2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ff8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003ffe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004006:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004012:	2b01      	cmp	r3, #1
 8004014:	d106      	bne.n	8004024 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	3b01      	subs	r3, #1
 800401c:	045b      	lsls	r3, r3, #17
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <HAL_ADC_Init+0x30c>)
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	69b9      	ldr	r1, [r7, #24]
 8004050:	430b      	orrs	r3, r1
 8004052:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff03 	bl	8003e7a <LL_ADC_REG_IsConversionOngoing>
 8004074:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff10 	bl	8003ea0 <LL_ADC_INJ_IsConversionOngoing>
 8004080:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d16d      	bne.n	8004164 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d16a      	bne.n	8004164 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004092:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800409a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040aa:	f023 0302 	bic.w	r3, r3, #2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	69b9      	ldr	r1, [r7, #24]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d017      	beq.n	80040f0 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6911      	ldr	r1, [r2, #16]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80040ee:	e013      	b.n	8004118 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004114:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411e:	2b01      	cmp	r3, #1
 8004120:	d118      	bne.n	8004154 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800412c:	f023 0304 	bic.w	r3, r3, #4
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004138:	4311      	orrs	r1, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800413e:	4311      	orrs	r1, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004144:	430a      	orrs	r2, r1
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	611a      	str	r2, [r3, #16]
 8004152:	e007      	b.n	8004164 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d10c      	bne.n	8004186 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	f023 010f 	bic.w	r1, r3, #15
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	1e5a      	subs	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
 8004184:	e007      	b.n	8004196 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 020f 	bic.w	r2, r2, #15
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041a6:	e007      	b.n	80041b8 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	f043 0210 	orr.w	r2, r3, #16
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3724      	adds	r7, #36	; 0x24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd90      	pop	{r4, r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000004 	.word	0x20000004
 80041c8:	053e2d63 	.word	0x053e2d63
 80041cc:	50000100 	.word	0x50000100
 80041d0:	50000300 	.word	0x50000300
 80041d4:	fff04007 	.word	0xfff04007

080041d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041e4:	4851      	ldr	r0, [pc, #324]	; (800432c <HAL_ADC_Start_DMA+0x154>)
 80041e6:	f7ff fda3 	bl	8003d30 <LL_ADC_GetMultimode>
 80041ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fe42 	bl	8003e7a <LL_ADC_REG_IsConversionOngoing>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 808f 	bne.w	800431c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_ADC_Start_DMA+0x34>
 8004208:	2302      	movs	r3, #2
 800420a:	e08a      	b.n	8004322 <HAL_ADC_Start_DMA+0x14a>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b05      	cmp	r3, #5
 800421e:	d002      	beq.n	8004226 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b09      	cmp	r3, #9
 8004224:	d173      	bne.n	800430e <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 feb2 	bl	8004f90 <ADC_Enable>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d166      	bne.n	8004304 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a38      	ldr	r2, [pc, #224]	; (8004330 <HAL_ADC_Start_DMA+0x158>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d002      	beq.n	800425a <HAL_ADC_Start_DMA+0x82>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	e001      	b.n	800425e <HAL_ADC_Start_DMA+0x86>
 800425a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	4293      	cmp	r3, r2
 8004264:	d002      	beq.n	800426c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d006      	beq.n	8004292 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004288:	f023 0206 	bic.w	r2, r3, #6
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	661a      	str	r2, [r3, #96]	; 0x60
 8004290:	e002      	b.n	8004298 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_ADC_Start_DMA+0x15c>)
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	4a24      	ldr	r2, [pc, #144]	; (8004338 <HAL_ADC_Start_DMA+0x160>)
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	4a23      	ldr	r2, [pc, #140]	; (800433c <HAL_ADC_Start_DMA+0x164>)
 80042ae:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	221c      	movs	r2, #28
 80042b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0210 	orr.w	r2, r2, #16
 80042ce:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3340      	adds	r3, #64	; 0x40
 80042ea:	4619      	mov	r1, r3
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f001 fa04 	bl	80056fc <HAL_DMA_Start_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fda8 	bl	8003e52 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004302:	e00d      	b.n	8004320 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800430c:	e008      	b.n	8004320 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800431a:	e001      	b.n	8004320 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800431c:	2302      	movs	r3, #2
 800431e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004320:	7dfb      	ldrb	r3, [r7, #23]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	50000300 	.word	0x50000300
 8004330:	50000100 	.word	0x50000100
 8004334:	08005045 	.word	0x08005045
 8004338:	0800511d 	.word	0x0800511d
 800433c:	08005139 	.word	0x08005139

08004340 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004348:	2300      	movs	r3, #0
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800435c:	4883      	ldr	r0, [pc, #524]	; (800456c <HAL_ADC_IRQHandler+0x22c>)
 800435e:	f7ff fce7 	bl	8003d30 <LL_ADC_GetMultimode>
 8004362:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d017      	beq.n	800439e <HAL_ADC_IRQHandler+0x5e>
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d012      	beq.n	800439e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004388:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 ff39 	bl	8005208 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2202      	movs	r2, #2
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_ADC_IRQHandler+0x72>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8085 	beq.w	80044c8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d07f      	beq.n	80044c8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fc01 	bl	8003bec <LL_ADC_REG_IsTriggerSourceSWStart>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d064      	beq.n	80044ba <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5e      	ldr	r2, [pc, #376]	; (8004570 <HAL_ADC_IRQHandler+0x230>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d002      	beq.n	8004400 <HAL_ADC_IRQHandler+0xc0>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	e001      	b.n	8004404 <HAL_ADC_IRQHandler+0xc4>
 8004400:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	4293      	cmp	r3, r2
 800440a:	d008      	beq.n	800441e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b05      	cmp	r3, #5
 8004416:	d002      	beq.n	800441e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2b09      	cmp	r3, #9
 800441c:	d104      	bne.n	8004428 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	e00d      	b.n	8004444 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a50      	ldr	r2, [pc, #320]	; (8004570 <HAL_ADC_IRQHandler+0x230>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d002      	beq.n	8004438 <HAL_ADC_IRQHandler+0xf8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	e001      	b.n	800443c <HAL_ADC_IRQHandler+0xfc>
 8004438:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800443c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d135      	bne.n	80044ba <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d12e      	bne.n	80044ba <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fd0a 	bl	8003e7a <LL_ADC_REG_IsConversionOngoing>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d11a      	bne.n	80044a2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 020c 	bic.w	r2, r2, #12
 800447a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d112      	bne.n	80044ba <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	65da      	str	r2, [r3, #92]	; 0x5c
 80044a0:	e00b      	b.n	80044ba <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	f043 0210 	orr.w	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd f848 	bl	8001550 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	220c      	movs	r2, #12
 80044c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_ADC_IRQHandler+0x19c>
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10b      	bne.n	80044f4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 809e 	beq.w	8004624 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8098 	beq.w	8004624 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fbaa 	bl	8003c6a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004516:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fb65 	bl	8003bec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004522:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a11      	ldr	r2, [pc, #68]	; (8004570 <HAL_ADC_IRQHandler+0x230>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d002      	beq.n	8004534 <HAL_ADC_IRQHandler+0x1f4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	e001      	b.n	8004538 <HAL_ADC_IRQHandler+0x1f8>
 8004534:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	4293      	cmp	r3, r2
 800453e:	d008      	beq.n	8004552 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b06      	cmp	r3, #6
 800454a:	d002      	beq.n	8004552 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b07      	cmp	r3, #7
 8004550:	d104      	bne.n	800455c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	e011      	b.n	8004580 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a03      	ldr	r2, [pc, #12]	; (8004570 <HAL_ADC_IRQHandler+0x230>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d006      	beq.n	8004574 <HAL_ADC_IRQHandler+0x234>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	e005      	b.n	8004578 <HAL_ADC_IRQHandler+0x238>
 800456c:	50000300 	.word	0x50000300
 8004570:	50000100 	.word	0x50000100
 8004574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004578:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10c      	bne.n	80045a0 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800458c:	2b00      	cmp	r3, #0
 800458e:	d142      	bne.n	8004616 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d03f      	beq.n	8004616 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800459c:	2b00      	cmp	r3, #0
 800459e:	d13a      	bne.n	8004616 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d133      	bne.n	8004616 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d12e      	bne.n	8004616 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fc6f 	bl	8003ea0 <LL_ADC_INJ_IsConversionOngoing>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d11a      	bne.n	80045fe <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045d6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d112      	bne.n	8004616 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	f043 0201 	orr.w	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80045fc:	e00b      	b.n	8004616 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004602:	f043 0210 	orr.w	r2, r3, #16
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fdce 	bl	80051b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2260      	movs	r2, #96	; 0x60
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d011      	beq.n	8004652 <HAL_ADC_IRQHandler+0x312>
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f89f 	bl	8004788 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2280      	movs	r2, #128	; 0x80
 8004650:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d012      	beq.n	8004682 <HAL_ADC_IRQHandler+0x342>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fdb4 	bl	80051e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004680:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <HAL_ADC_IRQHandler+0x372>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fda6 	bl	80051f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d036      	beq.n	800472a <HAL_ADC_IRQHandler+0x3ea>
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d031      	beq.n	800472a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80046ce:	2301      	movs	r3, #1
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	e014      	b.n	80046fe <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80046da:	4825      	ldr	r0, [pc, #148]	; (8004770 <HAL_ADC_IRQHandler+0x430>)
 80046dc:	f7ff fb36 	bl	8003d4c <LL_ADC_GetMultiDMATransfer>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80046e6:	2301      	movs	r3, #1
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ea:	e008      	b.n	80046fe <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80046fa:	2301      	movs	r3, #1
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10e      	bne.n	8004722 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	f043 0202 	orr.w	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f83d 	bl	800479c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2210      	movs	r2, #16
 8004728:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d018      	beq.n	8004766 <HAL_ADC_IRQHandler+0x426>
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473a:	2b00      	cmp	r3, #0
 800473c:	d013      	beq.n	8004766 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474e:	f043 0208 	orr.w	r2, r3, #8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800475e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fd33 	bl	80051cc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004766:	bf00      	nop
 8004768:	3728      	adds	r7, #40	; 0x28
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	50000300 	.word	0x50000300

08004774 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b0b6      	sub	sp, #216	; 0xd8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x22>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e3c7      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x7b2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fb4b 	bl	8003e7a <LL_ADC_REG_IsConversionOngoing>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 83ac 	bne.w	8004f44 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	f7ff fa0a 	bl	8003c12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fb39 	bl	8003e7a <LL_ADC_REG_IsConversionOngoing>
 8004808:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fb45 	bl	8003ea0 <LL_ADC_INJ_IsConversionOngoing>
 8004816:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800481a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 81d9 	bne.w	8004bd6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 81d4 	bne.w	8004bd6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004836:	d10f      	bne.n	8004858 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2200      	movs	r2, #0
 8004842:	4619      	mov	r1, r3
 8004844:	f7ff fa24 	bl	8003c90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff f9b8 	bl	8003bc6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004856:	e00e      	b.n	8004876 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	461a      	mov	r2, r3
 8004866:	f7ff fa13 	bl	8003c90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff f9a8 	bl	8003bc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	08db      	lsrs	r3, r3, #3
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b04      	cmp	r3, #4
 8004896:	d022      	beq.n	80048de <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6919      	ldr	r1, [r3, #16]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048a8:	f7ff f902 	bl	8003ab0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6919      	ldr	r1, [r3, #16]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	461a      	mov	r2, r3
 80048ba:	f7ff f94e 	bl	8003b5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6919      	ldr	r1, [r3, #16]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	7f1b      	ldrb	r3, [r3, #28]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d102      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x124>
 80048ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d2:	e000      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x126>
 80048d4:	2300      	movs	r3, #0
 80048d6:	461a      	mov	r2, r3
 80048d8:	f7ff f95a 	bl	8003b90 <LL_ADC_SetOffsetSaturation>
 80048dc:	e17b      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff f907 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_ADC_ConfigChannel+0x15a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff f8fc 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 8004900:	4603      	mov	r3, r0
 8004902:	0e9b      	lsrs	r3, r3, #26
 8004904:	f003 021f 	and.w	r2, r3, #31
 8004908:	e01e      	b.n	8004948 <HAL_ADC_ConfigChannel+0x198>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff f8f1 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 8004916:	4603      	mov	r3, r0
 8004918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800492c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004938:	2320      	movs	r3, #32
 800493a:	e004      	b.n	8004946 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800493c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004940:	fab3 f383 	clz	r3, r3
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x1b0>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	e018      	b.n	8004992 <HAL_ADC_ConfigChannel+0x1e2>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800497c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004984:	2320      	movs	r3, #32
 8004986:	e004      	b.n	8004992 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	b2db      	uxtb	r3, r3
 8004992:	429a      	cmp	r2, r3
 8004994:	d106      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff f8c0 	bl	8003b24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2101      	movs	r1, #1
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff f8a4 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x220>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2101      	movs	r1, #1
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff f899 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 80049c6:	4603      	mov	r3, r0
 80049c8:	0e9b      	lsrs	r3, r3, #26
 80049ca:	f003 021f 	and.w	r2, r3, #31
 80049ce:	e01e      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x25e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff f88e 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 80049dc:	4603      	mov	r3, r0
 80049de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80049ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80049f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80049fe:	2320      	movs	r3, #32
 8004a00:	e004      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004a02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d105      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x276>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	0e9b      	lsrs	r3, r3, #26
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	e018      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x2a8>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004a3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004a4a:	2320      	movs	r3, #32
 8004a4c:	e004      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d106      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2200      	movs	r2, #0
 8004a62:	2101      	movs	r1, #1
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff f85d 	bl	8003b24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2102      	movs	r1, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff f841 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x2e6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2102      	movs	r1, #2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff f836 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	0e9b      	lsrs	r3, r3, #26
 8004a90:	f003 021f 	and.w	r2, r3, #31
 8004a94:	e01e      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x324>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff f82b 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aac:	fa93 f3a3 	rbit	r3, r3
 8004ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e004      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x33c>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0e9b      	lsrs	r3, r3, #26
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	e016      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x36a>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004af8:	fa93 f3a3 	rbit	r3, r3
 8004afc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	e004      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b14:	fab3 f383 	clz	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d106      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	2102      	movs	r1, #2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe fffc 	bl	8003b24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2103      	movs	r1, #3
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe ffe0 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x3a8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2103      	movs	r1, #3
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe ffd5 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	0e9b      	lsrs	r3, r3, #26
 8004b52:	f003 021f 	and.w	r2, r3, #31
 8004b56:	e017      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x3d8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2103      	movs	r1, #3
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe ffca 	bl	8003af8 <LL_ADC_GetOffsetChannel>
 8004b64:	4603      	mov	r3, r0
 8004b66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b6a:	fa93 f3a3 	rbit	r3, r3
 8004b6e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b72:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	e003      	b.n	8004b86 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b80:	fab3 f383 	clz	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x3f0>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0e9b      	lsrs	r3, r3, #26
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	e011      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x414>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004bb8:	2320      	movs	r3, #32
 8004bba:	e003      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d106      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2103      	movs	r1, #3
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe ffa7 	bl	8003b24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff f926 	bl	8003e2c <LL_ADC_IsEnabled>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 8140 	bne.w	8004e68 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f7ff f877 	bl	8003ce8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4a8f      	ldr	r2, [pc, #572]	; (8004e3c <HAL_ADC_ConfigChannel+0x68c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	f040 8131 	bne.w	8004e68 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x47e>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	0e9b      	lsrs	r3, r3, #26
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2b09      	cmp	r3, #9
 8004c24:	bf94      	ite	ls
 8004c26:	2301      	movls	r3, #1
 8004c28:	2300      	movhi	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e019      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x4b2>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c36:	fa93 f3a3 	rbit	r3, r3
 8004c3a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c3e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004c46:	2320      	movs	r3, #32
 8004c48:	e003      	b.n	8004c52 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c4c:	fab3 f383 	clz	r3, r3
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	3301      	adds	r3, #1
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2b09      	cmp	r3, #9
 8004c5a:	bf94      	ite	ls
 8004c5c:	2301      	movls	r3, #1
 8004c5e:	2300      	movhi	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d079      	beq.n	8004d5a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x4d2>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	0e9b      	lsrs	r3, r3, #26
 8004c78:	3301      	adds	r3, #1
 8004c7a:	069b      	lsls	r3, r3, #26
 8004c7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c80:	e015      	b.n	8004cae <HAL_ADC_ConfigChannel+0x4fe>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8a:	fa93 f3a3 	rbit	r3, r3
 8004c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c92:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004c9a:	2320      	movs	r3, #32
 8004c9c:	e003      	b.n	8004ca6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca0:	fab3 f383 	clz	r3, r3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	069b      	lsls	r3, r3, #26
 8004caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x51e>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	0e9b      	lsrs	r3, r3, #26
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	e017      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x54e>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	e003      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cec:	fab3 f383 	clz	r3, r3
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	ea42 0103 	orr.w	r1, r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x574>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	0e9b      	lsrs	r3, r3, #26
 8004d14:	3301      	adds	r3, #1
 8004d16:	f003 021f 	and.w	r2, r3, #31
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	4413      	add	r3, r2
 8004d20:	051b      	lsls	r3, r3, #20
 8004d22:	e018      	b.n	8004d56 <HAL_ADC_ConfigChannel+0x5a6>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	e003      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f003 021f 	and.w	r2, r3, #31
 8004d4e:	4613      	mov	r3, r2
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4413      	add	r3, r2
 8004d54:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d56:	430b      	orrs	r3, r1
 8004d58:	e081      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d107      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x5c6>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	0e9b      	lsrs	r3, r3, #26
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	069b      	lsls	r3, r3, #26
 8004d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d74:	e015      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x5f2>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004d8e:	2320      	movs	r3, #32
 8004d90:	e003      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	069b      	lsls	r3, r3, #26
 8004d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0x612>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0e9b      	lsrs	r3, r3, #26
 8004db4:	3301      	adds	r3, #1
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2101      	movs	r1, #1
 8004dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc0:	e017      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x642>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	fa93 f3a3 	rbit	r3, r3
 8004dce:	61fb      	str	r3, [r7, #28]
  return result;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004dda:	2320      	movs	r3, #32
 8004ddc:	e003      	b.n	8004de6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	2101      	movs	r1, #1
 8004dee:	fa01 f303 	lsl.w	r3, r1, r3
 8004df2:	ea42 0103 	orr.w	r1, r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x66e>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	0e9b      	lsrs	r3, r3, #26
 8004e08:	3301      	adds	r3, #1
 8004e0a:	f003 021f 	and.w	r2, r3, #31
 8004e0e:	4613      	mov	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	4413      	add	r3, r2
 8004e14:	3b1e      	subs	r3, #30
 8004e16:	051b      	lsls	r3, r3, #20
 8004e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e1c:	e01e      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x6ac>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	fa93 f3a3 	rbit	r3, r3
 8004e2a:	613b      	str	r3, [r7, #16]
  return result;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d104      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004e36:	2320      	movs	r3, #32
 8004e38:	e006      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x698>
 8004e3a:	bf00      	nop
 8004e3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f003 021f 	and.w	r2, r3, #31
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	3b1e      	subs	r3, #30
 8004e56:	051b      	lsls	r3, r3, #20
 8004e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	4619      	mov	r1, r3
 8004e64:	f7fe ff14 	bl	8003c90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b3f      	ldr	r3, [pc, #252]	; (8004f6c <HAL_ADC_ConfigChannel+0x7bc>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d070      	beq.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e74:	483e      	ldr	r0, [pc, #248]	; (8004f70 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e76:	f7fe fe0d 	bl	8003a94 <LL_ADC_GetCommonPathInternalCh>
 8004e7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3c      	ldr	r2, [pc, #240]	; (8004f74 <HAL_ADC_ConfigChannel+0x7c4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d004      	beq.n	8004e92 <HAL_ADC_ConfigChannel+0x6e2>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a3a      	ldr	r2, [pc, #232]	; (8004f78 <HAL_ADC_ConfigChannel+0x7c8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d126      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d120      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea6:	d156      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	482f      	ldr	r0, [pc, #188]	; (8004f70 <HAL_ADC_ConfigChannel+0x7c0>)
 8004eb4:	f7fe fddb 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004eb8:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <HAL_ADC_ConfigChannel+0x7cc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	099b      	lsrs	r3, r3, #6
 8004ebe:	4a30      	ldr	r2, [pc, #192]	; (8004f80 <HAL_ADC_ConfigChannel+0x7d0>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	099a      	lsrs	r2, r3, #6
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ed0:	e002      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f9      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ede:	e03a      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <HAL_ADC_ConfigChannel+0x7d4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d113      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x762>
 8004eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10d      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <HAL_ADC_ConfigChannel+0x7d8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d02a      	beq.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4819      	ldr	r0, [pc, #100]	; (8004f70 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f0c:	f7fe fdaf 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f10:	e021      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <HAL_ADC_ConfigChannel+0x7dc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d11c      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a16      	ldr	r2, [pc, #88]	; (8004f88 <HAL_ADC_ConfigChannel+0x7d8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d011      	beq.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	480c      	ldr	r0, [pc, #48]	; (8004f70 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f3e:	f7fe fd96 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
 8004f42:	e008      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	37d8      	adds	r7, #216	; 0xd8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	80080000 	.word	0x80080000
 8004f70:	50000300 	.word	0x50000300
 8004f74:	c3210000 	.word	0xc3210000
 8004f78:	90c00010 	.word	0x90c00010
 8004f7c:	20000004 	.word	0x20000004
 8004f80:	053e2d63 	.word	0x053e2d63
 8004f84:	c7520000 	.word	0xc7520000
 8004f88:	50000100 	.word	0x50000100
 8004f8c:	cb840000 	.word	0xcb840000

08004f90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe ff45 	bl	8003e2c <LL_ADC_IsEnabled>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d146      	bne.n	8005036 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <ADC_Enable+0xb0>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fba:	f043 0210 	orr.w	r2, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc6:	f043 0201 	orr.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e032      	b.n	8005038 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe ff14 	bl	8003e04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fdc:	f7fe fd06 	bl	80039ec <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fe2:	e021      	b.n	8005028 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe ff1f 	bl	8003e2c <LL_ADC_IsEnabled>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fe ff03 	bl	8003e04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ffe:	f7fe fcf5 	bl	80039ec <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d90d      	bls.n	8005028 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005010:	f043 0210 	orr.w	r2, r3, #16
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501c:	f043 0201 	orr.w	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e007      	b.n	8005038 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d1d6      	bne.n	8004fe4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	8000003f 	.word	0x8000003f

08005044 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005056:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800505a:	2b00      	cmp	r3, #0
 800505c:	d14b      	bne.n	80050f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d021      	beq.n	80050bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe fdb5 	bl	8003bec <LL_ADC_REG_IsTriggerSourceSWStart>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d032      	beq.n	80050ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d12b      	bne.n	80050ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d11f      	bne.n	80050ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b2:	f043 0201 	orr.w	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80050ba:	e018      	b.n	80050ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d111      	bne.n	80050ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e6:	f043 0201 	orr.w	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7fc fa2e 	bl	8001550 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050f4:	e00e      	b.n	8005114 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff fb4a 	bl	800479c <HAL_ADC_ErrorCallback>
}
 8005108:	e004      	b.n	8005114 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4798      	blx	r3
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fb22 	bl	8004774 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005156:	f043 0204 	orr.w	r2, r3, #4
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7ff fb1c 	bl	800479c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <LL_ADC_IsEnabled>:
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <LL_ADC_IsEnabled+0x18>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <LL_ADC_IsEnabled+0x1a>
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_ADC_REG_IsConversionOngoing>:
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d101      	bne.n	80051aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b0a1      	sub	sp, #132	; 0x84
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005236:	2302      	movs	r3, #2
 8005238:	e087      	b.n	800534a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800524a:	d102      	bne.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800524c:	4b41      	ldr	r3, [pc, #260]	; (8005354 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	e001      	b.n	8005256 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e06a      	b.n	800534a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff8b 	bl	8005192 <LL_ADC_REG_IsConversionOngoing>
 800527c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff ff85 	bl	8005192 <LL_ADC_REG_IsConversionOngoing>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d14c      	bne.n	8005328 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800528e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005290:	2b00      	cmp	r3, #0
 8005292:	d149      	bne.n	8005328 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005294:	4b30      	ldr	r3, [pc, #192]	; (8005358 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005296:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d028      	beq.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80052a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052b2:	035b      	lsls	r3, r3, #13
 80052b4:	430b      	orrs	r3, r1
 80052b6:	431a      	orrs	r2, r3
 80052b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80052c0:	f7ff ff54 	bl	800516c <LL_ADC_IsEnabled>
 80052c4:	4604      	mov	r4, r0
 80052c6:	4823      	ldr	r0, [pc, #140]	; (8005354 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80052c8:	f7ff ff50 	bl	800516c <LL_ADC_IsEnabled>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4323      	orrs	r3, r4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d133      	bne.n	800533c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80052d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80052dc:	f023 030f 	bic.w	r3, r3, #15
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	6811      	ldr	r1, [r2, #0]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	6892      	ldr	r2, [r2, #8]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	431a      	orrs	r2, r3
 80052ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052f0:	e024      	b.n	800533c <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80052f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005302:	f7ff ff33 	bl	800516c <LL_ADC_IsEnabled>
 8005306:	4604      	mov	r4, r0
 8005308:	4812      	ldr	r0, [pc, #72]	; (8005354 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800530a:	f7ff ff2f 	bl	800516c <LL_ADC_IsEnabled>
 800530e:	4603      	mov	r3, r0
 8005310:	4323      	orrs	r3, r4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d112      	bne.n	800533c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800531e:	f023 030f 	bic.w	r3, r3, #15
 8005322:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005324:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005326:	e009      	b.n	800533c <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800533a:	e000      	b.n	800533e <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800533c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005346:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800534a:	4618      	mov	r0, r3
 800534c:	3784      	adds	r7, #132	; 0x84
 800534e:	46bd      	mov	sp, r7
 8005350:	bd90      	pop	{r4, r7, pc}
 8005352:	bf00      	nop
 8005354:	50000100 	.word	0x50000100
 8005358:	50000300 	.word	0x50000300

0800535c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <__NVIC_SetPriorityGrouping+0x44>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005378:	4013      	ands	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800538c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800538e:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	60d3      	str	r3, [r2, #12]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <__NVIC_GetPriorityGrouping+0x18>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	f003 0307 	and.w	r3, r3, #7
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	db0b      	blt.n	80053ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	f003 021f 	and.w	r2, r3, #31
 80053d8:	4907      	ldr	r1, [pc, #28]	; (80053f8 <__NVIC_EnableIRQ+0x38>)
 80053da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2001      	movs	r0, #1
 80053e2:	fa00 f202 	lsl.w	r2, r0, r2
 80053e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	e000e100 	.word	0xe000e100

080053fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	6039      	str	r1, [r7, #0]
 8005406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540c:	2b00      	cmp	r3, #0
 800540e:	db0a      	blt.n	8005426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	b2da      	uxtb	r2, r3
 8005414:	490c      	ldr	r1, [pc, #48]	; (8005448 <__NVIC_SetPriority+0x4c>)
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	440b      	add	r3, r1
 8005420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005424:	e00a      	b.n	800543c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	4908      	ldr	r1, [pc, #32]	; (800544c <__NVIC_SetPriority+0x50>)
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	3b04      	subs	r3, #4
 8005434:	0112      	lsls	r2, r2, #4
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	440b      	add	r3, r1
 800543a:	761a      	strb	r2, [r3, #24]
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	e000e100 	.word	0xe000e100
 800544c:	e000ed00 	.word	0xe000ed00

08005450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	; 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f1c3 0307 	rsb	r3, r3, #7
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf28      	it	cs
 800546e:	2304      	movcs	r3, #4
 8005470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	3304      	adds	r3, #4
 8005476:	2b06      	cmp	r3, #6
 8005478:	d902      	bls.n	8005480 <NVIC_EncodePriority+0x30>
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	3b03      	subs	r3, #3
 800547e:	e000      	b.n	8005482 <NVIC_EncodePriority+0x32>
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005484:	f04f 32ff 	mov.w	r2, #4294967295
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43da      	mvns	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	401a      	ands	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005498:	f04f 31ff 	mov.w	r1, #4294967295
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	43d9      	mvns	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a8:	4313      	orrs	r3, r2
         );
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3724      	adds	r7, #36	; 0x24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80054bc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <__NVIC_SystemReset+0x20>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80054c8:	4903      	ldr	r1, [pc, #12]	; (80054d8 <__NVIC_SystemReset+0x20>)
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <__NVIC_SystemReset+0x24>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60cb      	str	r3, [r1, #12]
 80054d0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <__NVIC_SystemReset+0x1c>
 80054d8:	e000ed00 	.word	0xe000ed00
 80054dc:	05fa0004 	.word	0x05fa0004

080054e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f0:	d301      	bcc.n	80054f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054f2:	2301      	movs	r3, #1
 80054f4:	e00f      	b.n	8005516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054f6:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <SysTick_Config+0x40>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054fe:	210f      	movs	r1, #15
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	f7ff ff7a 	bl	80053fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <SysTick_Config+0x40>)
 800550a:	2200      	movs	r2, #0
 800550c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <SysTick_Config+0x40>)
 8005510:	2207      	movs	r2, #7
 8005512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	e000e010 	.word	0xe000e010

08005524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff15 	bl	800535c <__NVIC_SetPriorityGrouping>
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	4603      	mov	r3, r0
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005548:	f7ff ff2c 	bl	80053a4 <__NVIC_GetPriorityGrouping>
 800554c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	6978      	ldr	r0, [r7, #20]
 8005554:	f7ff ff7c 	bl	8005450 <NVIC_EncodePriority>
 8005558:	4602      	mov	r2, r0
 800555a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff ff4b 	bl	80053fc <__NVIC_SetPriority>
}
 8005566:	bf00      	nop
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff ff1f 	bl	80053c0 <__NVIC_EnableIRQ>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800558e:	f7ff ff93 	bl	80054b8 <__NVIC_SystemReset>

08005592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff ffa0 	bl	80054e0 <SysTick_Config>
 80055a0:	4603      	mov	r3, r0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e08d      	b.n	80056da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	4b47      	ldr	r3, [pc, #284]	; (80056e4 <HAL_DMA_Init+0x138>)
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d80f      	bhi.n	80055ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b45      	ldr	r3, [pc, #276]	; (80056e8 <HAL_DMA_Init+0x13c>)
 80055d2:	4413      	add	r3, r2
 80055d4:	4a45      	ldr	r2, [pc, #276]	; (80056ec <HAL_DMA_Init+0x140>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	091b      	lsrs	r3, r3, #4
 80055dc:	009a      	lsls	r2, r3, #2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a42      	ldr	r2, [pc, #264]	; (80056f0 <HAL_DMA_Init+0x144>)
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
 80055e8:	e00e      	b.n	8005608 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	4b40      	ldr	r3, [pc, #256]	; (80056f4 <HAL_DMA_Init+0x148>)
 80055f2:	4413      	add	r3, r2
 80055f4:	4a3d      	ldr	r2, [pc, #244]	; (80056ec <HAL_DMA_Init+0x140>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	091b      	lsrs	r3, r3, #4
 80055fc:	009a      	lsls	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a3c      	ldr	r2, [pc, #240]	; (80056f8 <HAL_DMA_Init+0x14c>)
 8005606:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800561e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005622:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800562c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fa1e 	bl	8005a9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005668:	d102      	bne.n	8005670 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005684:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d010      	beq.n	80056b0 <HAL_DMA_Init+0x104>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d80c      	bhi.n	80056b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa3e 	bl	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e008      	b.n	80056c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40020407 	.word	0x40020407
 80056e8:	bffdfff8 	.word	0xbffdfff8
 80056ec:	cccccccd 	.word	0xcccccccd
 80056f0:	40020000 	.word	0x40020000
 80056f4:	bffdfbf8 	.word	0xbffdfbf8
 80056f8:	40020400 	.word	0x40020400

080056fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_DMA_Start_IT+0x20>
 8005718:	2302      	movs	r3, #2
 800571a:	e066      	b.n	80057ea <HAL_DMA_Start_IT+0xee>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d155      	bne.n	80057dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f962 	bl	8005a1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 020e 	orr.w	r2, r2, #14
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	e00f      	b.n	8005794 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0204 	bic.w	r2, r2, #4
 8005782:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 020a 	orr.w	r2, r2, #10
 8005792:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0201 	orr.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	e005      	b.n	80057e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
 80057e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d00d      	beq.n	8005826 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2204      	movs	r2, #4
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
 8005824:	e047      	b.n	80058b6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 020e 	bic.w	r2, r2, #14
 8005834:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005854:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	f003 021f 	and.w	r2, r3, #31
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2101      	movs	r1, #1
 8005864:	fa01 f202 	lsl.w	r2, r1, r2
 8005868:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005872:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00c      	beq.n	8005896 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800588a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005894:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
    }
  }
  return status;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2204      	movs	r2, #4
 80058e2:	409a      	lsls	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d026      	beq.n	800593a <HAL_DMA_IRQHandler+0x7a>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d021      	beq.n	800593a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d107      	bne.n	8005914 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0204 	bic.w	r2, r2, #4
 8005912:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005918:	f003 021f 	and.w	r2, r3, #31
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	2104      	movs	r1, #4
 8005922:	fa01 f202 	lsl.w	r2, r1, r2
 8005926:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	2b00      	cmp	r3, #0
 800592e:	d071      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005938:	e06c      	b.n	8005a14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2202      	movs	r2, #2
 8005944:	409a      	lsls	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d02e      	beq.n	80059ac <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d029      	beq.n	80059ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 020a 	bic.w	r2, r2, #10
 8005974:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f003 021f 	and.w	r2, r3, #31
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	2102      	movs	r1, #2
 800598c:	fa01 f202 	lsl.w	r2, r1, r2
 8005990:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d038      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80059aa:	e033      	b.n	8005a14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2208      	movs	r2, #8
 80059b6:	409a      	lsls	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02a      	beq.n	8005a16 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d025      	beq.n	8005a16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 020e 	bic.w	r2, r2, #14
 80059d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	f003 021f 	and.w	r2, r3, #31
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	2101      	movs	r1, #1
 80059e8:	fa01 f202 	lsl.w	r2, r1, r2
 80059ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
}
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a34:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a46:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4c:	f003 021f 	and.w	r2, r3, #31
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	2101      	movs	r1, #1
 8005a56:	fa01 f202 	lsl.w	r2, r1, r2
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d108      	bne.n	8005a7e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a7c:	e007      	b.n	8005a8e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	60da      	str	r2, [r3, #12]
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d802      	bhi.n	8005ab6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ab0:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e001      	b.n	8005aba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ab8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	3b08      	subs	r3, #8
 8005ac6:	4a12      	ldr	r2, [pc, #72]	; (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	089b      	lsrs	r3, r3, #2
 8005ad6:	009a      	lsls	r2, r3, #2
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	461a      	mov	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ae6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2201      	movs	r2, #1
 8005af0:	409a      	lsls	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40020407 	.word	0x40020407
 8005b08:	40020800 	.word	0x40020800
 8005b0c:	40020820 	.word	0x40020820
 8005b10:	cccccccd 	.word	0xcccccccd
 8005b14:	40020880 	.word	0x40020880

08005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b3a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	2201      	movs	r2, #1
 8005b46:	409a      	lsls	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	1000823f 	.word	0x1000823f
 8005b5c:	40020940 	.word	0x40020940

08005b60 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <HAL_FLASH_Program+0xa4>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_FLASH_Program+0x1e>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e03e      	b.n	8005bfc <HAL_FLASH_Program+0x9c>
 8005b7e:	4b21      	ldr	r3, [pc, #132]	; (8005c04 <HAL_FLASH_Program+0xa4>)
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b88:	f000 f888 	bl	8005c9c <FLASH_WaitForLastOperation>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d12e      	bne.n	8005bf4 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b96:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <HAL_FLASH_Program+0xa4>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d107      	bne.n	8005bb2 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba6:	68b8      	ldr	r0, [r7, #8]
 8005ba8:	f000 f8cc 	bl	8005d44 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005bac:	2301      	movs	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	e010      	b.n	8005bd4 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d002      	beq.n	8005bbe <HAL_FLASH_Program+0x5e>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	68b8      	ldr	r0, [r7, #8]
 8005bc4:	f000 f8e2 	bl	8005d8c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d102      	bne.n	8005bd4 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005bce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bd2:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bd8:	f000 f860 	bl	8005c9c <FLASH_WaitForLastOperation>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d006      	beq.n	8005bf4 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <HAL_FLASH_Program+0xa8>)
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	4906      	ldr	r1, [pc, #24]	; (8005c08 <HAL_FLASH_Program+0xa8>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bf4:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <HAL_FLASH_Program+0xa4>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	20000010 	.word	0x20000010
 8005c08:	40022000 	.word	0x40022000

08005c0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_FLASH_Unlock+0x38>)
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da0b      	bge.n	8005c36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c1e:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <HAL_FLASH_Unlock+0x38>)
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <HAL_FLASH_Unlock+0x3c>)
 8005c22:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <HAL_FLASH_Unlock+0x38>)
 8005c26:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <HAL_FLASH_Unlock+0x40>)
 8005c28:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_FLASH_Unlock+0x38>)
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da01      	bge.n	8005c36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005c36:	79fb      	ldrb	r3, [r7, #7]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40022000 	.word	0x40022000
 8005c48:	45670123 	.word	0x45670123
 8005c4c:	cdef89ab 	.word	0xcdef89ab

08005c50 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <HAL_FLASH_Lock+0x30>)
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <HAL_FLASH_Lock+0x30>)
 8005c60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c64:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_FLASH_Lock+0x30>)
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da01      	bge.n	8005c72 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005c72:	79fb      	ldrb	r3, [r7, #7]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	40022000 	.word	0x40022000

08005c84 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <HAL_FLASH_GetError+0x14>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000010 	.word	0x20000010

08005c9c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005ca4:	f7fd fea2 	bl	80039ec <HAL_GetTick>
 8005ca8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005caa:	e009      	b.n	8005cc0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005cac:	f7fd fe9e 	bl	80039ec <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d201      	bcs.n	8005cc0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e038      	b.n	8005d32 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <FLASH_WaitForLastOperation+0xa0>)
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ccc:	d0ee      	beq.n	8005cac <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005cce:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <FLASH_WaitForLastOperation+0xa0>)
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01e      	beq.n	8005d1e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8005ce0:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <FLASH_WaitForLastOperation+0xa4>)
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <FLASH_WaitForLastOperation+0xa4>)
 8005cea:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <FLASH_WaitForLastOperation+0x6a>
 8005cf6:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <FLASH_WaitForLastOperation+0xa0>)
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d00:	490e      	ldr	r1, [pc, #56]	; (8005d3c <FLASH_WaitForLastOperation+0xa0>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	618b      	str	r3, [r1, #24]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <FLASH_WaitForLastOperation+0x7e>
 8005d10:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <FLASH_WaitForLastOperation+0xa0>)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d18:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e009      	b.n	8005d32 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005d1e:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <FLASH_WaitForLastOperation+0xa0>)
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d102      	bne.n	8005d30 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <FLASH_WaitForLastOperation+0xa0>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40022000 	.word	0x40022000
 8005d40:	20000010 	.word	0x20000010

08005d44 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005d44:	b490      	push	{r4, r7}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <FLASH_Program_DoubleWord+0x44>)
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <FLASH_Program_DoubleWord+0x44>)
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005d62:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005d66:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	f04f 0400 	mov.w	r4, #0
 8005d72:	0013      	movs	r3, r2
 8005d74:	2400      	movs	r4, #0
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	3204      	adds	r2, #4
 8005d7a:	6013      	str	r3, [r2, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc90      	pop	{r4, r7}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40022000 	.word	0x40022000

08005d8c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b089      	sub	sp, #36	; 0x24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005d96:	2340      	movs	r3, #64	; 0x40
 8005d98:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005da2:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <FLASH_Program_Fast+0x64>)
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <FLASH_Program_Fast+0x64>)
 8005da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dae:	f3ef 8310 	mrs	r3, PRIMASK
 8005db2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005db4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005db6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005db8:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	617b      	str	r3, [r7, #20]
    row_index--;
 8005dce:	7ffb      	ldrb	r3, [r7, #31]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005dd4:	7ffb      	ldrb	r3, [r7, #31]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1ef      	bne.n	8005dba <FLASH_Program_Fast+0x2e>
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005de4:	bf00      	nop
 8005de6:	3724      	adds	r7, #36	; 0x24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40022000 	.word	0x40022000

08005df4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005dfe:	4b4a      	ldr	r3, [pc, #296]	; (8005f28 <HAL_FLASHEx_Erase+0x134>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_FLASHEx_Erase+0x16>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e089      	b.n	8005f1e <HAL_FLASHEx_Erase+0x12a>
 8005e0a:	4b47      	ldr	r3, [pc, #284]	; (8005f28 <HAL_FLASHEx_Erase+0x134>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e14:	f7ff ff42 	bl	8005c9c <FLASH_WaitForLastOperation>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d179      	bne.n	8005f16 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e22:	4b41      	ldr	r3, [pc, #260]	; (8005f28 <HAL_FLASHEx_Erase+0x134>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005e28:	4b40      	ldr	r3, [pc, #256]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d019      	beq.n	8005e68 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005e34:	4b3d      	ldr	r3, [pc, #244]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a3c      	ldr	r2, [pc, #240]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e3e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005e40:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d009      	beq.n	8005e60 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e4c:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a36      	ldr	r2, [pc, #216]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e56:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005e58:	4b33      	ldr	r3, [pc, #204]	; (8005f28 <HAL_FLASHEx_Erase+0x134>)
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	771a      	strb	r2, [r3, #28]
 8005e5e:	e016      	b.n	8005e8e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005e60:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <HAL_FLASHEx_Erase+0x134>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	771a      	strb	r2, [r3, #28]
 8005e66:	e012      	b.n	8005e8e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005e68:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e74:	4b2d      	ldr	r3, [pc, #180]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2c      	ldr	r2, [pc, #176]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005e80:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <HAL_FLASHEx_Erase+0x134>)
 8005e82:	2202      	movs	r2, #2
 8005e84:	771a      	strb	r2, [r3, #28]
 8005e86:	e002      	b.n	8005e8e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005e88:	4b27      	ldr	r3, [pc, #156]	; (8005f28 <HAL_FLASHEx_Erase+0x134>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d111      	bne.n	8005eba <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f848 	bl	8005f30 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ea4:	f7ff fefa 	bl	8005c9c <FLASH_WaitForLastOperation>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005eac:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005eb2:	f023 0304 	bic.w	r3, r3, #4
 8005eb6:	6153      	str	r3, [r2, #20]
 8005eb8:	e02b      	b.n	8005f12 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec0:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	e01b      	b.n	8005f02 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68b8      	ldr	r0, [r7, #8]
 8005ed2:	f000 f84b 	bl	8005f6c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eda:	f7ff fedf 	bl	8005c9c <FLASH_WaitForLastOperation>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005ee2:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <HAL_FLASHEx_Erase+0x138>)
 8005ee8:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005eec:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	601a      	str	r2, [r3, #0]
          break;
 8005efa:	e00a      	b.n	8005f12 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d3db      	bcc.n	8005eca <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005f12:	f000 f84f 	bl	8005fb4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f16:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <HAL_FLASHEx_Erase+0x134>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]

  return status;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000010 	.word	0x20000010
 8005f2c:	40022000 	.word	0x40022000

08005f30 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <FLASH_MassErase+0x38>)
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <FLASH_MassErase+0x38>)
 8005f48:	f043 0304 	orr.w	r3, r3, #4
 8005f4c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <FLASH_MassErase+0x38>)
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <FLASH_MassErase+0x38>)
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f58:	6153      	str	r3, [r2, #20]
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40022000 	.word	0x40022000

08005f6c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005f76:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <FLASH_PageErase+0x44>)
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005f86:	490a      	ldr	r1, [pc, #40]	; (8005fb0 <FLASH_PageErase+0x44>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005f8c:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <FLASH_PageErase+0x44>)
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	4a07      	ldr	r2, [pc, #28]	; (8005fb0 <FLASH_PageErase+0x44>)
 8005f92:	f043 0302 	orr.w	r3, r3, #2
 8005f96:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <FLASH_PageErase+0x44>)
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <FLASH_PageErase+0x44>)
 8005f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa2:	6153      	str	r3, [r2, #20]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40022000 	.word	0x40022000

08005fb4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005fba:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <FLASH_FlushCaches+0x80>)
 8005fbc:	7f1b      	ldrb	r3, [r3, #28]
 8005fbe:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d002      	beq.n	8005fcc <FLASH_FlushCaches+0x18>
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d111      	bne.n	8005ff0 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <FLASH_FlushCaches+0x84>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a19      	ldr	r2, [pc, #100]	; (8006038 <FLASH_FlushCaches+0x84>)
 8005fd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	4b17      	ldr	r3, [pc, #92]	; (8006038 <FLASH_FlushCaches+0x84>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a16      	ldr	r2, [pc, #88]	; (8006038 <FLASH_FlushCaches+0x84>)
 8005fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fe4:	4b14      	ldr	r3, [pc, #80]	; (8006038 <FLASH_FlushCaches+0x84>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a13      	ldr	r2, [pc, #76]	; (8006038 <FLASH_FlushCaches+0x84>)
 8005fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d002      	beq.n	8005ffc <FLASH_FlushCaches+0x48>
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d111      	bne.n	8006020 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005ffc:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <FLASH_FlushCaches+0x84>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0d      	ldr	r2, [pc, #52]	; (8006038 <FLASH_FlushCaches+0x84>)
 8006002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <FLASH_FlushCaches+0x84>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <FLASH_FlushCaches+0x84>)
 800600e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006012:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006014:	4b08      	ldr	r3, [pc, #32]	; (8006038 <FLASH_FlushCaches+0x84>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a07      	ldr	r2, [pc, #28]	; (8006038 <FLASH_FlushCaches+0x84>)
 800601a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800601e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006020:	4b04      	ldr	r3, [pc, #16]	; (8006034 <FLASH_FlushCaches+0x80>)
 8006022:	2200      	movs	r2, #0
 8006024:	771a      	strb	r2, [r3, #28]
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000010 	.word	0x20000010
 8006038:	40022000 	.word	0x40022000

0800603c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800604a:	e15a      	b.n	8006302 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	2101      	movs	r1, #1
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	4013      	ands	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 814c 	beq.w	80062fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d00b      	beq.n	8006084 <HAL_GPIO_Init+0x48>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d007      	beq.n	8006084 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006078:	2b11      	cmp	r3, #17
 800607a:	d003      	beq.n	8006084 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b12      	cmp	r3, #18
 8006082:	d130      	bne.n	80060e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	2203      	movs	r2, #3
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4013      	ands	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ba:	2201      	movs	r2, #1
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43db      	mvns	r3, r3
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4013      	ands	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	091b      	lsrs	r3, r3, #4
 80060d0:	f003 0201 	and.w	r2, r3, #1
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	2203      	movs	r2, #3
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4013      	ands	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d003      	beq.n	8006126 <HAL_GPIO_Init+0xea>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b12      	cmp	r3, #18
 8006124:	d123      	bne.n	800616e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	08da      	lsrs	r2, r3, #3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3208      	adds	r2, #8
 800612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	220f      	movs	r2, #15
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43db      	mvns	r3, r3
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4013      	ands	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	691a      	ldr	r2, [r3, #16]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	08da      	lsrs	r2, r3, #3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3208      	adds	r2, #8
 8006168:	6939      	ldr	r1, [r7, #16]
 800616a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	2203      	movs	r2, #3
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	43db      	mvns	r3, r3
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4013      	ands	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f003 0203 	and.w	r2, r3, #3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 80a6 	beq.w	80062fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b0:	4b5b      	ldr	r3, [pc, #364]	; (8006320 <HAL_GPIO_Init+0x2e4>)
 80061b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b4:	4a5a      	ldr	r2, [pc, #360]	; (8006320 <HAL_GPIO_Init+0x2e4>)
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	6613      	str	r3, [r2, #96]	; 0x60
 80061bc:	4b58      	ldr	r3, [pc, #352]	; (8006320 <HAL_GPIO_Init+0x2e4>)
 80061be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061c8:	4a56      	ldr	r2, [pc, #344]	; (8006324 <HAL_GPIO_Init+0x2e8>)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	089b      	lsrs	r3, r3, #2
 80061ce:	3302      	adds	r3, #2
 80061d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	220f      	movs	r2, #15
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4013      	ands	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061f2:	d01f      	beq.n	8006234 <HAL_GPIO_Init+0x1f8>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a4c      	ldr	r2, [pc, #304]	; (8006328 <HAL_GPIO_Init+0x2ec>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d019      	beq.n	8006230 <HAL_GPIO_Init+0x1f4>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a4b      	ldr	r2, [pc, #300]	; (800632c <HAL_GPIO_Init+0x2f0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d013      	beq.n	800622c <HAL_GPIO_Init+0x1f0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a4a      	ldr	r2, [pc, #296]	; (8006330 <HAL_GPIO_Init+0x2f4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00d      	beq.n	8006228 <HAL_GPIO_Init+0x1ec>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a49      	ldr	r2, [pc, #292]	; (8006334 <HAL_GPIO_Init+0x2f8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d007      	beq.n	8006224 <HAL_GPIO_Init+0x1e8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a48      	ldr	r2, [pc, #288]	; (8006338 <HAL_GPIO_Init+0x2fc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d101      	bne.n	8006220 <HAL_GPIO_Init+0x1e4>
 800621c:	2305      	movs	r3, #5
 800621e:	e00a      	b.n	8006236 <HAL_GPIO_Init+0x1fa>
 8006220:	2306      	movs	r3, #6
 8006222:	e008      	b.n	8006236 <HAL_GPIO_Init+0x1fa>
 8006224:	2304      	movs	r3, #4
 8006226:	e006      	b.n	8006236 <HAL_GPIO_Init+0x1fa>
 8006228:	2303      	movs	r3, #3
 800622a:	e004      	b.n	8006236 <HAL_GPIO_Init+0x1fa>
 800622c:	2302      	movs	r3, #2
 800622e:	e002      	b.n	8006236 <HAL_GPIO_Init+0x1fa>
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_GPIO_Init+0x1fa>
 8006234:	2300      	movs	r3, #0
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	f002 0203 	and.w	r2, r2, #3
 800623c:	0092      	lsls	r2, r2, #2
 800623e:	4093      	lsls	r3, r2
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006246:	4937      	ldr	r1, [pc, #220]	; (8006324 <HAL_GPIO_Init+0x2e8>)
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	089b      	lsrs	r3, r3, #2
 800624c:	3302      	adds	r3, #2
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006254:	4b39      	ldr	r3, [pc, #228]	; (800633c <HAL_GPIO_Init+0x300>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	43db      	mvns	r3, r3
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4013      	ands	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006278:	4a30      	ldr	r2, [pc, #192]	; (800633c <HAL_GPIO_Init+0x300>)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800627e:	4b2f      	ldr	r3, [pc, #188]	; (800633c <HAL_GPIO_Init+0x300>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	43db      	mvns	r3, r3
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4013      	ands	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062a2:	4a26      	ldr	r2, [pc, #152]	; (800633c <HAL_GPIO_Init+0x300>)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062a8:	4b24      	ldr	r3, [pc, #144]	; (800633c <HAL_GPIO_Init+0x300>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4013      	ands	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062cc:	4a1b      	ldr	r2, [pc, #108]	; (800633c <HAL_GPIO_Init+0x300>)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80062d2:	4b1a      	ldr	r3, [pc, #104]	; (800633c <HAL_GPIO_Init+0x300>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	43db      	mvns	r3, r3
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4013      	ands	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062f6:	4a11      	ldr	r2, [pc, #68]	; (800633c <HAL_GPIO_Init+0x300>)
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	3301      	adds	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	fa22 f303 	lsr.w	r3, r2, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f ae9d 	bne.w	800604c <HAL_GPIO_Init+0x10>
  }
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40021000 	.word	0x40021000
 8006324:	40010000 	.word	0x40010000
 8006328:	48000400 	.word	0x48000400
 800632c:	48000800 	.word	0x48000800
 8006330:	48000c00 	.word	0x48000c00
 8006334:	48001000 	.word	0x48001000
 8006338:	48001400 	.word	0x48001400
 800633c:	40010400 	.word	0x40010400

08006340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	887b      	ldrh	r3, [r7, #2]
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
 800635c:	e001      	b.n	8006362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	807b      	strh	r3, [r7, #2]
 800637c:	4613      	mov	r3, r2
 800637e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006380:	787b      	ldrb	r3, [r7, #1]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800638c:	e002      	b.n	8006394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800638e:	887a      	ldrh	r2, [r7, #2]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0bb      	b.n	800652e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b05      	cmp	r3, #5
 80063c0:	d101      	bne.n	80063c6 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e0b3      	b.n	800652e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d101      	bne.n	80063d6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e0ab      	b.n	800652e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063d6:	4b58      	ldr	r3, [pc, #352]	; (8006538 <HAL_OPAMP_Init+0x198>)
 80063d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063da:	4a57      	ldr	r2, [pc, #348]	; (8006538 <HAL_OPAMP_Init+0x198>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6613      	str	r3, [r2, #96]	; 0x60
 80063e2:	4b55      	ldr	r3, [pc, #340]	; (8006538 <HAL_OPAMP_Init+0x198>)
 80063e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d103      	bne.n	8006402 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fd f880 	bl	8003508 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d003      	beq.n	8006418 <HAL_OPAMP_Init+0x78>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b60      	cmp	r3, #96	; 0x60
 8006416:	d133      	bne.n	8006480 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f023 0110 	bic.w	r1, r3, #16
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	4b41      	ldr	r3, [pc, #260]	; (800653c <HAL_OPAMP_Init+0x19c>)
 8006436:	4013      	ands	r3, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6851      	ldr	r1, [r2, #4]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6892      	ldr	r2, [r2, #8]
 8006440:	4311      	orrs	r1, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6912      	ldr	r2, [r2, #16]
 8006446:	430a      	orrs	r2, r1
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	7d09      	ldrb	r1, [r1, #20]
 800644c:	2901      	cmp	r1, #1
 800644e:	d102      	bne.n	8006456 <HAL_OPAMP_Init+0xb6>
 8006450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006454:	e000      	b.n	8006458 <HAL_OPAMP_Init+0xb8>
 8006456:	2100      	movs	r1, #0
 8006458:	4311      	orrs	r1, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800645e:	4311      	orrs	r1, r2
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006464:	4311      	orrs	r1, r2
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800646a:	04d2      	lsls	r2, r2, #19
 800646c:	4311      	orrs	r1, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006472:	0612      	lsls	r2, r2, #24
 8006474:	4311      	orrs	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6812      	ldr	r2, [r2, #0]
 800647a:	430b      	orrs	r3, r1
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e035      	b.n	80064ec <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 0110 	bic.w	r1, r3, #16
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	4b27      	ldr	r3, [pc, #156]	; (800653c <HAL_OPAMP_Init+0x19c>)
 800649e:	4013      	ands	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6851      	ldr	r1, [r2, #4]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6892      	ldr	r2, [r2, #8]
 80064a8:	4311      	orrs	r1, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	68d2      	ldr	r2, [r2, #12]
 80064ae:	4311      	orrs	r1, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6912      	ldr	r2, [r2, #16]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	7d09      	ldrb	r1, [r1, #20]
 80064ba:	2901      	cmp	r1, #1
 80064bc:	d102      	bne.n	80064c4 <HAL_OPAMP_Init+0x124>
 80064be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064c2:	e000      	b.n	80064c6 <HAL_OPAMP_Init+0x126>
 80064c4:	2100      	movs	r1, #0
 80064c6:	4311      	orrs	r1, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064cc:	4311      	orrs	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80064d2:	4311      	orrs	r1, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064d8:	04d2      	lsls	r2, r2, #19
 80064da:	4311      	orrs	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064e0:	0612      	lsls	r2, r2, #24
 80064e2:	4311      	orrs	r1, r2
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	db10      	blt.n	8006518 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d103      	bne.n	800652c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000
 800653c:	e0003e11 	.word	0xe0003e11

08006540 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d102      	bne.n	8006558 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e01d      	b.n	8006594 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b05      	cmp	r3, #5
 8006562:	d102      	bne.n	800656a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
 8006568:	e014      	b.n	8006594 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	d10c      	bne.n	8006590 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0201 	orr.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800658e:	e001      	b.n	8006594 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d141      	bne.n	8006636 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065b2:	4b4b      	ldr	r3, [pc, #300]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065be:	d131      	bne.n	8006624 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065c0:	4b47      	ldr	r3, [pc, #284]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c6:	4a46      	ldr	r2, [pc, #280]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065d0:	4b43      	ldr	r3, [pc, #268]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065d8:	4a41      	ldr	r2, [pc, #260]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065e0:	4b40      	ldr	r3, [pc, #256]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2232      	movs	r2, #50	; 0x32
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	4a3f      	ldr	r2, [pc, #252]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065ec:	fba2 2303 	umull	r2, r3, r2, r3
 80065f0:	0c9b      	lsrs	r3, r3, #18
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065f6:	e002      	b.n	80065fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065fe:	4b38      	ldr	r3, [pc, #224]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660a:	d102      	bne.n	8006612 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f2      	bne.n	80065f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006612:	4b33      	ldr	r3, [pc, #204]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d158      	bne.n	80066d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e057      	b.n	80066d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006624:	4b2e      	ldr	r3, [pc, #184]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800662a:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800662c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006634:	e04d      	b.n	80066d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663c:	d141      	bne.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800663e:	4b28      	ldr	r3, [pc, #160]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664a:	d131      	bne.n	80066b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800664c:	4b24      	ldr	r3, [pc, #144]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800664e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006652:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800665c:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006664:	4a1e      	ldr	r2, [pc, #120]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800666a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800666c:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2232      	movs	r2, #50	; 0x32
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006678:	fba2 2303 	umull	r2, r3, r2, r3
 800667c:	0c9b      	lsrs	r3, r3, #18
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006682:	e002      	b.n	800668a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3b01      	subs	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006696:	d102      	bne.n	800669e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f2      	bne.n	8006684 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800669e:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066aa:	d112      	bne.n	80066d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e011      	b.n	80066d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066b0:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b6:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066c0:	e007      	b.n	80066d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066c2:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066ca:	4a05      	ldr	r2, [pc, #20]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40007000 	.word	0x40007000
 80066e4:	20000004 	.word	0x20000004
 80066e8:	431bde83 	.word	0x431bde83

080066ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	4a04      	ldr	r2, [pc, #16]	; (8006708 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80066f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066fa:	6093      	str	r3, [r2, #8]
}
 80066fc:	bf00      	nop
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40007000 	.word	0x40007000

0800670c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e308      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d075      	beq.n	8006816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800672a:	4ba3      	ldr	r3, [pc, #652]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006734:	4ba0      	ldr	r3, [pc, #640]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b0c      	cmp	r3, #12
 8006742:	d102      	bne.n	800674a <HAL_RCC_OscConfig+0x3e>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d002      	beq.n	8006750 <HAL_RCC_OscConfig+0x44>
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b08      	cmp	r3, #8
 800674e:	d10b      	bne.n	8006768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006750:	4b99      	ldr	r3, [pc, #612]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d05b      	beq.n	8006814 <HAL_RCC_OscConfig+0x108>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d157      	bne.n	8006814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e2e3      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006770:	d106      	bne.n	8006780 <HAL_RCC_OscConfig+0x74>
 8006772:	4b91      	ldr	r3, [pc, #580]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a90      	ldr	r2, [pc, #576]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e01d      	b.n	80067bc <HAL_RCC_OscConfig+0xb0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006788:	d10c      	bne.n	80067a4 <HAL_RCC_OscConfig+0x98>
 800678a:	4b8b      	ldr	r3, [pc, #556]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a8a      	ldr	r2, [pc, #552]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	4b88      	ldr	r3, [pc, #544]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a87      	ldr	r2, [pc, #540]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 800679c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e00b      	b.n	80067bc <HAL_RCC_OscConfig+0xb0>
 80067a4:	4b84      	ldr	r3, [pc, #528]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a83      	ldr	r2, [pc, #524]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80067aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	4b81      	ldr	r3, [pc, #516]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a80      	ldr	r2, [pc, #512]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80067b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d013      	beq.n	80067ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fd f912 	bl	80039ec <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067cc:	f7fd f90e 	bl	80039ec <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b64      	cmp	r3, #100	; 0x64
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e2a8      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067de:	4b76      	ldr	r3, [pc, #472]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCC_OscConfig+0xc0>
 80067ea:	e014      	b.n	8006816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7fd f8fe 	bl	80039ec <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067f4:	f7fd f8fa 	bl	80039ec <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b64      	cmp	r3, #100	; 0x64
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e294      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006806:	4b6c      	ldr	r3, [pc, #432]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0xe8>
 8006812:	e000      	b.n	8006816 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d075      	beq.n	800690e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006822:	4b65      	ldr	r3, [pc, #404]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800682c:	4b62      	ldr	r3, [pc, #392]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b0c      	cmp	r3, #12
 800683a:	d102      	bne.n	8006842 <HAL_RCC_OscConfig+0x136>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d002      	beq.n	8006848 <HAL_RCC_OscConfig+0x13c>
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b04      	cmp	r3, #4
 8006846:	d11f      	bne.n	8006888 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_RCC_OscConfig+0x154>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e267      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006860:	4b55      	ldr	r3, [pc, #340]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	4952      	ldr	r1, [pc, #328]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006870:	4313      	orrs	r3, r2
 8006872:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006874:	4b51      	ldr	r3, [pc, #324]	; (80069bc <HAL_RCC_OscConfig+0x2b0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7fd f86b 	bl	8003954 <HAL_InitTick>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d043      	beq.n	800690c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e253      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d023      	beq.n	80068d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006890:	4b49      	ldr	r3, [pc, #292]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a48      	ldr	r2, [pc, #288]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689c:	f7fd f8a6 	bl	80039ec <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a4:	f7fd f8a2 	bl	80039ec <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e23c      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068b6:	4b40      	ldr	r3, [pc, #256]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c2:	4b3d      	ldr	r3, [pc, #244]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	061b      	lsls	r3, r3, #24
 80068d0:	4939      	ldr	r1, [pc, #228]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	604b      	str	r3, [r1, #4]
 80068d6:	e01a      	b.n	800690e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d8:	4b37      	ldr	r3, [pc, #220]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a36      	ldr	r2, [pc, #216]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80068de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fd f882 	bl	80039ec <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ec:	f7fd f87e 	bl	80039ec <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e218      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068fe:	4b2e      	ldr	r3, [pc, #184]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f0      	bne.n	80068ec <HAL_RCC_OscConfig+0x1e0>
 800690a:	e000      	b.n	800690e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800690c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d03c      	beq.n	8006994 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01c      	beq.n	800695c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006922:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006928:	4a23      	ldr	r2, [pc, #140]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006932:	f7fd f85b 	bl	80039ec <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800693a:	f7fd f857 	bl	80039ec <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e1f1      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 800694e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0ef      	beq.n	800693a <HAL_RCC_OscConfig+0x22e>
 800695a:	e01b      	b.n	8006994 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800695c:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 800695e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fd f83e 	bl	80039ec <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006974:	f7fd f83a 	bl	80039ec <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e1d4      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 8006988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1ef      	bne.n	8006974 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80ab 	beq.w	8006af8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a2:	2300      	movs	r3, #0
 80069a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069a6:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <HAL_RCC_OscConfig+0x2ac>)
 80069a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <HAL_RCC_OscConfig+0x2b4>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e005      	b.n	80069c2 <HAL_RCC_OscConfig+0x2b6>
 80069b6:	bf00      	nop
 80069b8:	40021000 	.word	0x40021000
 80069bc:	20000008 	.word	0x20000008
 80069c0:	2300      	movs	r3, #0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00d      	beq.n	80069e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c6:	4baf      	ldr	r3, [pc, #700]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	4aae      	ldr	r2, [pc, #696]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d0:	6593      	str	r3, [r2, #88]	; 0x58
 80069d2:	4bac      	ldr	r3, [pc, #688]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 80069d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80069de:	2301      	movs	r3, #1
 80069e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e2:	4ba9      	ldr	r3, [pc, #676]	; (8006c88 <HAL_RCC_OscConfig+0x57c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d118      	bne.n	8006a20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069ee:	4ba6      	ldr	r3, [pc, #664]	; (8006c88 <HAL_RCC_OscConfig+0x57c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4aa5      	ldr	r2, [pc, #660]	; (8006c88 <HAL_RCC_OscConfig+0x57c>)
 80069f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069fa:	f7fc fff7 	bl	80039ec <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a02:	f7fc fff3 	bl	80039ec <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e18d      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a14:	4b9c      	ldr	r3, [pc, #624]	; (8006c88 <HAL_RCC_OscConfig+0x57c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f0      	beq.n	8006a02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d108      	bne.n	8006a3a <HAL_RCC_OscConfig+0x32e>
 8006a28:	4b96      	ldr	r3, [pc, #600]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	4a95      	ldr	r2, [pc, #596]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a38:	e024      	b.n	8006a84 <HAL_RCC_OscConfig+0x378>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b05      	cmp	r3, #5
 8006a40:	d110      	bne.n	8006a64 <HAL_RCC_OscConfig+0x358>
 8006a42:	4b90      	ldr	r3, [pc, #576]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a48:	4a8e      	ldr	r2, [pc, #568]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a52:	4b8c      	ldr	r3, [pc, #560]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	4a8a      	ldr	r2, [pc, #552]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a62:	e00f      	b.n	8006a84 <HAL_RCC_OscConfig+0x378>
 8006a64:	4b87      	ldr	r3, [pc, #540]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	4a86      	ldr	r2, [pc, #536]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a74:	4b83      	ldr	r3, [pc, #524]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	4a82      	ldr	r2, [pc, #520]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006a7c:	f023 0304 	bic.w	r3, r3, #4
 8006a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d016      	beq.n	8006aba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8c:	f7fc ffae 	bl	80039ec <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a94:	f7fc ffaa 	bl	80039ec <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e142      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aaa:	4b76      	ldr	r3, [pc, #472]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ed      	beq.n	8006a94 <HAL_RCC_OscConfig+0x388>
 8006ab8:	e015      	b.n	8006ae6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aba:	f7fc ff97 	bl	80039ec <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ac0:	e00a      	b.n	8006ad8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac2:	f7fc ff93 	bl	80039ec <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e12b      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad8:	4b6a      	ldr	r3, [pc, #424]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1ed      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ae6:	7ffb      	ldrb	r3, [r7, #31]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d105      	bne.n	8006af8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aec:	4b65      	ldr	r3, [pc, #404]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af0:	4a64      	ldr	r2, [pc, #400]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006af6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d03c      	beq.n	8006b7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01c      	beq.n	8006b46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b0c:	4b5d      	ldr	r3, [pc, #372]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b12:	4a5c      	ldr	r2, [pc, #368]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1c:	f7fc ff66 	bl	80039ec <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b24:	f7fc ff62 	bl	80039ec <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e0fc      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b36:	4b53      	ldr	r3, [pc, #332]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0ef      	beq.n	8006b24 <HAL_RCC_OscConfig+0x418>
 8006b44:	e01b      	b.n	8006b7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b46:	4b4f      	ldr	r3, [pc, #316]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b4c:	4a4d      	ldr	r2, [pc, #308]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b56:	f7fc ff49 	bl	80039ec <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b5e:	f7fc ff45 	bl	80039ec <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e0df      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b70:	4b44      	ldr	r3, [pc, #272]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1ef      	bne.n	8006b5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80d3 	beq.w	8006d2e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b88:	4b3e      	ldr	r3, [pc, #248]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 030c 	and.w	r3, r3, #12
 8006b90:	2b0c      	cmp	r3, #12
 8006b92:	f000 808d 	beq.w	8006cb0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d15a      	bne.n	8006c54 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b9e:	4b39      	ldr	r3, [pc, #228]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a38      	ldr	r2, [pc, #224]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006baa:	f7fc ff1f 	bl	80039ec <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb2:	f7fc ff1b 	bl	80039ec <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e0b5      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bc4:	4b2f      	ldr	r3, [pc, #188]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bd0:	4b2c      	ldr	r3, [pc, #176]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	4b2d      	ldr	r3, [pc, #180]	; (8006c8c <HAL_RCC_OscConfig+0x580>)
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6a11      	ldr	r1, [r2, #32]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006be0:	3a01      	subs	r2, #1
 8006be2:	0112      	lsls	r2, r2, #4
 8006be4:	4311      	orrs	r1, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006bea:	0212      	lsls	r2, r2, #8
 8006bec:	4311      	orrs	r1, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006bf2:	0852      	lsrs	r2, r2, #1
 8006bf4:	3a01      	subs	r2, #1
 8006bf6:	0552      	lsls	r2, r2, #21
 8006bf8:	4311      	orrs	r1, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bfe:	0852      	lsrs	r2, r2, #1
 8006c00:	3a01      	subs	r2, #1
 8006c02:	0652      	lsls	r2, r2, #25
 8006c04:	4311      	orrs	r1, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c0a:	06d2      	lsls	r2, r2, #27
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	491d      	ldr	r1, [pc, #116]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c20:	4b18      	ldr	r3, [pc, #96]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fc fede 	bl	80039ec <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c34:	f7fc feda 	bl	80039ec <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e074      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0f0      	beq.n	8006c34 <HAL_RCC_OscConfig+0x528>
 8006c52:	e06c      	b.n	8006d2e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c5e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	4a07      	ldr	r2, [pc, #28]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <HAL_RCC_OscConfig+0x578>)
 8006c72:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7c:	f7fc feb6 	bl	80039ec <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c82:	e00e      	b.n	8006ca2 <HAL_RCC_OscConfig+0x596>
 8006c84:	40021000 	.word	0x40021000
 8006c88:	40007000 	.word	0x40007000
 8006c8c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c90:	f7fc feac 	bl	80039ec <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e046      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca2:	4b25      	ldr	r3, [pc, #148]	; (8006d38 <HAL_RCC_OscConfig+0x62c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0x584>
 8006cae:	e03e      	b.n	8006d2e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e039      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006cbc:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <HAL_RCC_OscConfig+0x62c>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f003 0203 	and.w	r2, r3, #3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d12c      	bne.n	8006d2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d123      	bne.n	8006d2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d11b      	bne.n	8006d2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d113      	bne.n	8006d2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d109      	bne.n	8006d2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	3b01      	subs	r3, #1
 8006d24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d001      	beq.n	8006d2e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40021000 	.word	0x40021000

08006d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e11e      	b.n	8006f92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d54:	4b91      	ldr	r3, [pc, #580]	; (8006f9c <HAL_RCC_ClockConfig+0x260>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d910      	bls.n	8006d84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d62:	4b8e      	ldr	r3, [pc, #568]	; (8006f9c <HAL_RCC_ClockConfig+0x260>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f023 020f 	bic.w	r2, r3, #15
 8006d6a:	498c      	ldr	r1, [pc, #560]	; (8006f9c <HAL_RCC_ClockConfig+0x260>)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d72:	4b8a      	ldr	r3, [pc, #552]	; (8006f9c <HAL_RCC_ClockConfig+0x260>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d001      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e106      	b.n	8006f92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d073      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d129      	bne.n	8006dec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d98:	4b81      	ldr	r3, [pc, #516]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0f4      	b.n	8006f92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006da8:	f000 f99e 	bl	80070e8 <RCC_GetSysClockFreqFromPLLSource>
 8006dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	4a7c      	ldr	r2, [pc, #496]	; (8006fa4 <HAL_RCC_ClockConfig+0x268>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d93f      	bls.n	8006e36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006db6:	4b7a      	ldr	r3, [pc, #488]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d033      	beq.n	8006e36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d12f      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dd6:	4b72      	ldr	r3, [pc, #456]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dde:	4a70      	ldr	r2, [pc, #448]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e024      	b.n	8006e36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d107      	bne.n	8006e04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006df4:	4b6a      	ldr	r3, [pc, #424]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e0c6      	b.n	8006f92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e04:	4b66      	ldr	r3, [pc, #408]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0be      	b.n	8006f92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006e14:	f000 f8ce 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8006e18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4a61      	ldr	r2, [pc, #388]	; (8006fa4 <HAL_RCC_ClockConfig+0x268>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d909      	bls.n	8006e36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e22:	4b5f      	ldr	r3, [pc, #380]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e2a:	4a5d      	ldr	r2, [pc, #372]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e32:	2380      	movs	r3, #128	; 0x80
 8006e34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e36:	4b5a      	ldr	r3, [pc, #360]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f023 0203 	bic.w	r2, r3, #3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	4957      	ldr	r1, [pc, #348]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e48:	f7fc fdd0 	bl	80039ec <HAL_GetTick>
 8006e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4e:	e00a      	b.n	8006e66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e50:	f7fc fdcc 	bl	80039ec <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e095      	b.n	8006f92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	4b4e      	ldr	r3, [pc, #312]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 020c 	and.w	r2, r3, #12
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d1eb      	bne.n	8006e50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d023      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e90:	4b43      	ldr	r3, [pc, #268]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	4a42      	ldr	r2, [pc, #264]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ea8:	4b3d      	ldr	r3, [pc, #244]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006eb0:	4a3b      	ldr	r2, [pc, #236]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006eb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eb8:	4b39      	ldr	r3, [pc, #228]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	4936      	ldr	r1, [pc, #216]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	608b      	str	r3, [r1, #8]
 8006eca:	e008      	b.n	8006ede <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2b80      	cmp	r3, #128	; 0x80
 8006ed0:	d105      	bne.n	8006ede <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ed2:	4b33      	ldr	r3, [pc, #204]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006edc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ede:	4b2f      	ldr	r3, [pc, #188]	; (8006f9c <HAL_RCC_ClockConfig+0x260>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d21d      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eec:	4b2b      	ldr	r3, [pc, #172]	; (8006f9c <HAL_RCC_ClockConfig+0x260>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f023 020f 	bic.w	r2, r3, #15
 8006ef4:	4929      	ldr	r1, [pc, #164]	; (8006f9c <HAL_RCC_ClockConfig+0x260>)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006efc:	f7fc fd76 	bl	80039ec <HAL_GetTick>
 8006f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f02:	e00a      	b.n	8006f1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f04:	f7fc fd72 	bl	80039ec <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e03b      	b.n	8006f92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1a:	4b20      	ldr	r3, [pc, #128]	; (8006f9c <HAL_RCC_ClockConfig+0x260>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d1ed      	bne.n	8006f04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f34:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	4917      	ldr	r1, [pc, #92]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f52:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	490f      	ldr	r1, [pc, #60]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f66:	f000 f825 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_RCC_ClockConfig+0x264>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	091b      	lsrs	r3, r3, #4
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <HAL_RCC_ClockConfig+0x26c>)
 8006f78:	5cd3      	ldrb	r3, [r2, r3]
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8006f82:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <HAL_RCC_ClockConfig+0x270>)
 8006f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f86:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <HAL_RCC_ClockConfig+0x274>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fc fce2 	bl	8003954 <HAL_InitTick>
 8006f90:	4603      	mov	r3, r0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40022000 	.word	0x40022000
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	04c4b400 	.word	0x04c4b400
 8006fa8:	0800a0d8 	.word	0x0800a0d8
 8006fac:	20000004 	.word	0x20000004
 8006fb0:	20000008 	.word	0x20000008

08006fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006fba:	4b2c      	ldr	r3, [pc, #176]	; (800706c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 030c 	and.w	r3, r3, #12
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d102      	bne.n	8006fcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fc6:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	e047      	b.n	800705c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 030c 	and.w	r3, r3, #12
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d102      	bne.n	8006fde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fd8:	4b26      	ldr	r3, [pc, #152]	; (8007074 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	e03e      	b.n	800705c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006fde:	4b23      	ldr	r3, [pc, #140]	; (800706c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b0c      	cmp	r3, #12
 8006fe8:	d136      	bne.n	8007058 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fea:	4b20      	ldr	r3, [pc, #128]	; (800706c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ff4:	4b1d      	ldr	r3, [pc, #116]	; (800706c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	3301      	adds	r3, #1
 8007000:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b03      	cmp	r3, #3
 8007006:	d10c      	bne.n	8007022 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007008:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <HAL_RCC_GetSysClockFreq+0xc0>)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007010:	4a16      	ldr	r2, [pc, #88]	; (800706c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007012:	68d2      	ldr	r2, [r2, #12]
 8007014:	0a12      	lsrs	r2, r2, #8
 8007016:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800701a:	fb02 f303 	mul.w	r3, r2, r3
 800701e:	617b      	str	r3, [r7, #20]
      break;
 8007020:	e00c      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	fbb2 f3f3 	udiv	r3, r2, r3
 800702a:	4a10      	ldr	r2, [pc, #64]	; (800706c <HAL_RCC_GetSysClockFreq+0xb8>)
 800702c:	68d2      	ldr	r2, [r2, #12]
 800702e:	0a12      	lsrs	r2, r2, #8
 8007030:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	617b      	str	r3, [r7, #20]
      break;
 800703a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800703c:	4b0b      	ldr	r3, [pc, #44]	; (800706c <HAL_RCC_GetSysClockFreq+0xb8>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	0e5b      	lsrs	r3, r3, #25
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	3301      	adds	r3, #1
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	fbb2 f3f3 	udiv	r3, r2, r3
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	e001      	b.n	800705c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800705c:	693b      	ldr	r3, [r7, #16]
}
 800705e:	4618      	mov	r0, r3
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40021000 	.word	0x40021000
 8007070:	00f42400 	.word	0x00f42400
 8007074:	007a1200 	.word	0x007a1200

08007078 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800707c:	4b03      	ldr	r3, [pc, #12]	; (800708c <HAL_RCC_GetHCLKFreq+0x14>)
 800707e:	681b      	ldr	r3, [r3, #0]
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20000004 	.word	0x20000004

08007090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007094:	f7ff fff0 	bl	8007078 <HAL_RCC_GetHCLKFreq>
 8007098:	4601      	mov	r1, r0
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	0a1b      	lsrs	r3, r3, #8
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070a6:	5cd3      	ldrb	r3, [r2, r3]
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40021000 	.word	0x40021000
 80070b8:	0800a0e8 	.word	0x0800a0e8

080070bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070c0:	f7ff ffda 	bl	8007078 <HAL_RCC_GetHCLKFreq>
 80070c4:	4601      	mov	r1, r0
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	0adb      	lsrs	r3, r3, #11
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	4a04      	ldr	r2, [pc, #16]	; (80070e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070d2:	5cd3      	ldrb	r3, [r2, r3]
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40021000 	.word	0x40021000
 80070e4:	0800a0e8 	.word	0x0800a0e8

080070e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070ee:	4b1e      	ldr	r3, [pc, #120]	; (8007168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070f8:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	091b      	lsrs	r3, r3, #4
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d10c      	bne.n	8007126 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800710c:	4a17      	ldr	r2, [pc, #92]	; (800716c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	fbb2 f3f3 	udiv	r3, r2, r3
 8007114:	4a14      	ldr	r2, [pc, #80]	; (8007168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007116:	68d2      	ldr	r2, [r2, #12]
 8007118:	0a12      	lsrs	r2, r2, #8
 800711a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	617b      	str	r3, [r7, #20]
    break;
 8007124:	e00c      	b.n	8007140 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007126:	4a12      	ldr	r2, [pc, #72]	; (8007170 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	fbb2 f3f3 	udiv	r3, r2, r3
 800712e:	4a0e      	ldr	r2, [pc, #56]	; (8007168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007130:	68d2      	ldr	r2, [r2, #12]
 8007132:	0a12      	lsrs	r2, r2, #8
 8007134:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007138:	fb02 f303 	mul.w	r3, r2, r3
 800713c:	617b      	str	r3, [r7, #20]
    break;
 800713e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	0e5b      	lsrs	r3, r3, #25
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	3301      	adds	r3, #1
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	fbb2 f3f3 	udiv	r3, r2, r3
 8007158:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800715a:	687b      	ldr	r3, [r7, #4]
}
 800715c:	4618      	mov	r0, r3
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	40021000 	.word	0x40021000
 800716c:	007a1200 	.word	0x007a1200
 8007170:	00f42400 	.word	0x00f42400

08007174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800717c:	2300      	movs	r3, #0
 800717e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007180:	2300      	movs	r3, #0
 8007182:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8098 	beq.w	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007192:	2300      	movs	r3, #0
 8007194:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007196:	4b43      	ldr	r3, [pc, #268]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10d      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a2:	4b40      	ldr	r3, [pc, #256]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	4a3f      	ldr	r2, [pc, #252]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ac:	6593      	str	r3, [r2, #88]	; 0x58
 80071ae:	4b3d      	ldr	r3, [pc, #244]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b6:	60bb      	str	r3, [r7, #8]
 80071b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ba:	2301      	movs	r3, #1
 80071bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071be:	4b3a      	ldr	r3, [pc, #232]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a39      	ldr	r2, [pc, #228]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ca:	f7fc fc0f 	bl	80039ec <HAL_GetTick>
 80071ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071d0:	e009      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071d2:	f7fc fc0b 	bl	80039ec <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d902      	bls.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	74fb      	strb	r3, [r7, #19]
        break;
 80071e4:	e005      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071e6:	4b30      	ldr	r3, [pc, #192]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0ef      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80071f2:	7cfb      	ldrb	r3, [r7, #19]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d159      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071f8:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007202:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d01e      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	429a      	cmp	r2, r3
 8007212:	d019      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007214:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007220:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800722c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007230:	4b1c      	ldr	r3, [pc, #112]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	4a1b      	ldr	r2, [pc, #108]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800723c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007240:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007252:	f7fc fbcb 	bl	80039ec <HAL_GetTick>
 8007256:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007258:	e00b      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800725a:	f7fc fbc7 	bl	80039ec <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f241 3288 	movw	r2, #5000	; 0x1388
 8007268:	4293      	cmp	r3, r2
 800726a:	d902      	bls.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	74fb      	strb	r3, [r7, #19]
            break;
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0ec      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007280:	7cfb      	ldrb	r3, [r7, #19]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10b      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	4903      	ldr	r1, [pc, #12]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800729c:	e008      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800729e:	7cfb      	ldrb	r3, [r7, #19]
 80072a0:	74bb      	strb	r3, [r7, #18]
 80072a2:	e005      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80072a4:	40021000 	.word	0x40021000
 80072a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ac:	7cfb      	ldrb	r3, [r7, #19]
 80072ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072b0:	7c7b      	ldrb	r3, [r7, #17]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d105      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072b6:	4ba6      	ldr	r3, [pc, #664]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	4aa5      	ldr	r2, [pc, #660]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072ce:	4ba0      	ldr	r3, [pc, #640]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d4:	f023 0203 	bic.w	r2, r3, #3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	499c      	ldr	r1, [pc, #624]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072f0:	4b97      	ldr	r3, [pc, #604]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f6:	f023 020c 	bic.w	r2, r3, #12
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4994      	ldr	r1, [pc, #592]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007300:	4313      	orrs	r3, r2
 8007302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007312:	4b8f      	ldr	r3, [pc, #572]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	498b      	ldr	r1, [pc, #556]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007334:	4b86      	ldr	r3, [pc, #536]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	4983      	ldr	r1, [pc, #524]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007344:	4313      	orrs	r3, r2
 8007346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007356:	4b7e      	ldr	r3, [pc, #504]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	497a      	ldr	r1, [pc, #488]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007366:	4313      	orrs	r3, r2
 8007368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007378:	4b75      	ldr	r3, [pc, #468]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800737a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	4972      	ldr	r1, [pc, #456]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007388:	4313      	orrs	r3, r2
 800738a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800739a:	4b6d      	ldr	r3, [pc, #436]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	4969      	ldr	r1, [pc, #420]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073bc:	4b64      	ldr	r3, [pc, #400]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	4961      	ldr	r1, [pc, #388]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073de:	4b5c      	ldr	r3, [pc, #368]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	4958      	ldr	r1, [pc, #352]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d015      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007400:	4b53      	ldr	r3, [pc, #332]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	4950      	ldr	r1, [pc, #320]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007410:	4313      	orrs	r3, r2
 8007412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741e:	d105      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007420:	4b4b      	ldr	r3, [pc, #300]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4a4a      	ldr	r2, [pc, #296]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800742a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007434:	2b00      	cmp	r3, #0
 8007436:	d015      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007438:	4b45      	ldr	r3, [pc, #276]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800743a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	4942      	ldr	r1, [pc, #264]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007448:	4313      	orrs	r3, r2
 800744a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007456:	d105      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007458:	4b3d      	ldr	r3, [pc, #244]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	4a3c      	ldr	r2, [pc, #240]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800745e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007462:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d015      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007470:	4b37      	ldr	r3, [pc, #220]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007476:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	4934      	ldr	r1, [pc, #208]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800748e:	d105      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007490:	4b2f      	ldr	r3, [pc, #188]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	4a2e      	ldr	r2, [pc, #184]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800749a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d015      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074a8:	4b29      	ldr	r3, [pc, #164]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	4926      	ldr	r1, [pc, #152]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074c6:	d105      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074c8:	4b21      	ldr	r3, [pc, #132]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4a20      	ldr	r2, [pc, #128]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d015      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074e0:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	4918      	ldr	r1, [pc, #96]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074fe:	d105      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007500:	4b13      	ldr	r3, [pc, #76]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a12      	ldr	r2, [pc, #72]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800750a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d015      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007518:	4b0d      	ldr	r3, [pc, #52]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	490a      	ldr	r1, [pc, #40]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007528:	4313      	orrs	r3, r2
 800752a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007536:	d105      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007538:	4b05      	ldr	r3, [pc, #20]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4a04      	ldr	r2, [pc, #16]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800753e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007542:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007544:	7cbb      	ldrb	r3, [r7, #18]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40021000 	.word	0x40021000

08007554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e049      	b.n	80075fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fb fff6 	bl	800356c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f000 fdd4 	bl	8008140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d001      	beq.n	800761c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e042      	b.n	80076a2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a21      	ldr	r2, [pc, #132]	; (80076b0 <HAL_TIM_Base_Start+0xac>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d018      	beq.n	8007660 <HAL_TIM_Base_Start+0x5c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007636:	d013      	beq.n	8007660 <HAL_TIM_Base_Start+0x5c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <HAL_TIM_Base_Start+0xb0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00e      	beq.n	8007660 <HAL_TIM_Base_Start+0x5c>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <HAL_TIM_Base_Start+0xb4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d009      	beq.n	8007660 <HAL_TIM_Base_Start+0x5c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1a      	ldr	r2, [pc, #104]	; (80076bc <HAL_TIM_Base_Start+0xb8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d004      	beq.n	8007660 <HAL_TIM_Base_Start+0x5c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <HAL_TIM_Base_Start+0xbc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d115      	bne.n	800768c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	4b17      	ldr	r3, [pc, #92]	; (80076c4 <HAL_TIM_Base_Start+0xc0>)
 8007668:	4013      	ands	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b06      	cmp	r3, #6
 8007670:	d015      	beq.n	800769e <HAL_TIM_Base_Start+0x9a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007678:	d011      	beq.n	800769e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f042 0201 	orr.w	r2, r2, #1
 8007688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768a:	e008      	b.n	800769e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e000      	b.n	80076a0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40012c00 	.word	0x40012c00
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40013400 	.word	0x40013400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	00010007 	.word	0x00010007

080076c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e049      	b.n	800776e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f841 	bl	8007776 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f000 fd1a 	bl	8008140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
	...

0800778c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <HAL_TIM_PWM_Start_IT+0x24>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	bf14      	ite	ne
 80077a8:	2301      	movne	r3, #1
 80077aa:	2300      	moveq	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	e03c      	b.n	800782a <HAL_TIM_PWM_Start_IT+0x9e>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d109      	bne.n	80077ca <HAL_TIM_PWM_Start_IT+0x3e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b01      	cmp	r3, #1
 80077c0:	bf14      	ite	ne
 80077c2:	2301      	movne	r3, #1
 80077c4:	2300      	moveq	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	e02f      	b.n	800782a <HAL_TIM_PWM_Start_IT+0x9e>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d109      	bne.n	80077e4 <HAL_TIM_PWM_Start_IT+0x58>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b01      	cmp	r3, #1
 80077da:	bf14      	ite	ne
 80077dc:	2301      	movne	r3, #1
 80077de:	2300      	moveq	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	e022      	b.n	800782a <HAL_TIM_PWM_Start_IT+0x9e>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b0c      	cmp	r3, #12
 80077e8:	d109      	bne.n	80077fe <HAL_TIM_PWM_Start_IT+0x72>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	bf14      	ite	ne
 80077f6:	2301      	movne	r3, #1
 80077f8:	2300      	moveq	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	e015      	b.n	800782a <HAL_TIM_PWM_Start_IT+0x9e>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b10      	cmp	r3, #16
 8007802:	d109      	bne.n	8007818 <HAL_TIM_PWM_Start_IT+0x8c>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b01      	cmp	r3, #1
 800780e:	bf14      	ite	ne
 8007810:	2301      	movne	r3, #1
 8007812:	2300      	moveq	r3, #0
 8007814:	b2db      	uxtb	r3, r3
 8007816:	e008      	b.n	800782a <HAL_TIM_PWM_Start_IT+0x9e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b01      	cmp	r3, #1
 8007822:	bf14      	ite	ne
 8007824:	2301      	movne	r3, #1
 8007826:	2300      	moveq	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e0dd      	b.n	80079ee <HAL_TIM_PWM_Start_IT+0x262>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <HAL_TIM_PWM_Start_IT+0xb6>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007840:	e023      	b.n	800788a <HAL_TIM_PWM_Start_IT+0xfe>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b04      	cmp	r3, #4
 8007846:	d104      	bne.n	8007852 <HAL_TIM_PWM_Start_IT+0xc6>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007850:	e01b      	b.n	800788a <HAL_TIM_PWM_Start_IT+0xfe>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b08      	cmp	r3, #8
 8007856:	d104      	bne.n	8007862 <HAL_TIM_PWM_Start_IT+0xd6>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007860:	e013      	b.n	800788a <HAL_TIM_PWM_Start_IT+0xfe>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b0c      	cmp	r3, #12
 8007866:	d104      	bne.n	8007872 <HAL_TIM_PWM_Start_IT+0xe6>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007870:	e00b      	b.n	800788a <HAL_TIM_PWM_Start_IT+0xfe>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b10      	cmp	r3, #16
 8007876:	d104      	bne.n	8007882 <HAL_TIM_PWM_Start_IT+0xf6>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007880:	e003      	b.n	800788a <HAL_TIM_PWM_Start_IT+0xfe>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2202      	movs	r2, #2
 8007886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b0c      	cmp	r3, #12
 800788e:	d841      	bhi.n	8007914 <HAL_TIM_PWM_Start_IT+0x188>
 8007890:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <HAL_TIM_PWM_Start_IT+0x10c>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078cd 	.word	0x080078cd
 800789c:	08007915 	.word	0x08007915
 80078a0:	08007915 	.word	0x08007915
 80078a4:	08007915 	.word	0x08007915
 80078a8:	080078df 	.word	0x080078df
 80078ac:	08007915 	.word	0x08007915
 80078b0:	08007915 	.word	0x08007915
 80078b4:	08007915 	.word	0x08007915
 80078b8:	080078f1 	.word	0x080078f1
 80078bc:	08007915 	.word	0x08007915
 80078c0:	08007915 	.word	0x08007915
 80078c4:	08007915 	.word	0x08007915
 80078c8:	08007903 	.word	0x08007903
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0202 	orr.w	r2, r2, #2
 80078da:	60da      	str	r2, [r3, #12]
      break;
 80078dc:	e01b      	b.n	8007916 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0204 	orr.w	r2, r2, #4
 80078ec:	60da      	str	r2, [r3, #12]
      break;
 80078ee:	e012      	b.n	8007916 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0208 	orr.w	r2, r2, #8
 80078fe:	60da      	str	r2, [r3, #12]
      break;
 8007900:	e009      	b.n	8007916 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 0210 	orr.w	r2, r2, #16
 8007910:	60da      	str	r2, [r3, #12]
      break;
 8007912:	e000      	b.n	8007916 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8007914:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2201      	movs	r2, #1
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f001 f830 	bl	8008984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a33      	ldr	r2, [pc, #204]	; (80079f8 <HAL_TIM_PWM_Start_IT+0x26c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <HAL_TIM_PWM_Start_IT+0x1ca>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a32      	ldr	r2, [pc, #200]	; (80079fc <HAL_TIM_PWM_Start_IT+0x270>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00e      	beq.n	8007956 <HAL_TIM_PWM_Start_IT+0x1ca>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a30      	ldr	r2, [pc, #192]	; (8007a00 <HAL_TIM_PWM_Start_IT+0x274>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d009      	beq.n	8007956 <HAL_TIM_PWM_Start_IT+0x1ca>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a2f      	ldr	r2, [pc, #188]	; (8007a04 <HAL_TIM_PWM_Start_IT+0x278>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d004      	beq.n	8007956 <HAL_TIM_PWM_Start_IT+0x1ca>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a2d      	ldr	r2, [pc, #180]	; (8007a08 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d101      	bne.n	800795a <HAL_TIM_PWM_Start_IT+0x1ce>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <HAL_TIM_PWM_Start_IT+0x1d0>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800796e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a20      	ldr	r2, [pc, #128]	; (80079f8 <HAL_TIM_PWM_Start_IT+0x26c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d018      	beq.n	80079ac <HAL_TIM_PWM_Start_IT+0x220>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007982:	d013      	beq.n	80079ac <HAL_TIM_PWM_Start_IT+0x220>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a20      	ldr	r2, [pc, #128]	; (8007a0c <HAL_TIM_PWM_Start_IT+0x280>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00e      	beq.n	80079ac <HAL_TIM_PWM_Start_IT+0x220>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a1f      	ldr	r2, [pc, #124]	; (8007a10 <HAL_TIM_PWM_Start_IT+0x284>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d009      	beq.n	80079ac <HAL_TIM_PWM_Start_IT+0x220>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a17      	ldr	r2, [pc, #92]	; (80079fc <HAL_TIM_PWM_Start_IT+0x270>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_TIM_PWM_Start_IT+0x220>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a16      	ldr	r2, [pc, #88]	; (8007a00 <HAL_TIM_PWM_Start_IT+0x274>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d115      	bne.n	80079d8 <HAL_TIM_PWM_Start_IT+0x24c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	4b18      	ldr	r3, [pc, #96]	; (8007a14 <HAL_TIM_PWM_Start_IT+0x288>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b06      	cmp	r3, #6
 80079bc:	d015      	beq.n	80079ea <HAL_TIM_PWM_Start_IT+0x25e>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c4:	d011      	beq.n	80079ea <HAL_TIM_PWM_Start_IT+0x25e>
    {
      __HAL_TIM_ENABLE(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d6:	e008      	b.n	80079ea <HAL_TIM_PWM_Start_IT+0x25e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	e000      	b.n	80079ec <HAL_TIM_PWM_Start_IT+0x260>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	40012c00 	.word	0x40012c00
 80079fc:	40013400 	.word	0x40013400
 8007a00:	40014000 	.word	0x40014000
 8007a04:	40014400 	.word	0x40014400
 8007a08:	40014800 	.word	0x40014800
 8007a0c:	40000400 	.word	0x40000400
 8007a10:	40000800 	.word	0x40000800
 8007a14:	00010007 	.word	0x00010007

08007a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d122      	bne.n	8007a74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d11b      	bne.n	8007a74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0202 	mvn.w	r2, #2
 8007a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fb52 	bl	8008104 <HAL_TIM_IC_CaptureCallback>
 8007a60:	e005      	b.n	8007a6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb44 	bl	80080f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fb55 	bl	8008118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d122      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d11b      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0204 	mvn.w	r2, #4
 8007a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fb28 	bl	8008104 <HAL_TIM_IC_CaptureCallback>
 8007ab4:	e005      	b.n	8007ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fb1a 	bl	80080f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fb2b 	bl	8008118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d122      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d11b      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0208 	mvn.w	r2, #8
 8007aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2204      	movs	r2, #4
 8007af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fafe 	bl	8008104 <HAL_TIM_IC_CaptureCallback>
 8007b08:	e005      	b.n	8007b16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 faf0 	bl	80080f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fb01 	bl	8008118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b10      	cmp	r3, #16
 8007b28:	d122      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b10      	cmp	r3, #16
 8007b36:	d11b      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0210 	mvn.w	r2, #16
 8007b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2208      	movs	r2, #8
 8007b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fad4 	bl	8008104 <HAL_TIM_IC_CaptureCallback>
 8007b5c:	e005      	b.n	8007b6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fac6 	bl	80080f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fad7 	bl	8008118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d10e      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d107      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0201 	mvn.w	r2, #1
 8007b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 faa0 	bl	80080dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba6:	2b80      	cmp	r3, #128	; 0x80
 8007ba8:	d10e      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb4:	2b80      	cmp	r3, #128	; 0x80
 8007bb6:	d107      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 ff90 	bl	8008ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd6:	d10e      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d107      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 ff83 	bl	8008afc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c00:	2b40      	cmp	r3, #64	; 0x40
 8007c02:	d10e      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d107      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fa85 	bl	800812c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d10e      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d107      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0220 	mvn.w	r2, #32
 8007c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 ff43 	bl	8008ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c5c:	d10f      	bne.n	8007c7e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6c:	d107      	bne.n	8007c7e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 ff49 	bl	8008b10 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c8c:	d10f      	bne.n	8007cae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c9c:	d107      	bne.n	8007cae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 ff3b 	bl	8008b24 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cbc:	d10f      	bne.n	8007cde <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ccc:	d107      	bne.n	8007cde <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 ff2d 	bl	8008b38 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cec:	d10f      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cfc:	d107      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 ff1f 	bl	8008b4c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e0fd      	b.n	8007f2e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b14      	cmp	r3, #20
 8007d3e:	f200 80f0 	bhi.w	8007f22 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007d42:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d9d 	.word	0x08007d9d
 8007d4c:	08007f23 	.word	0x08007f23
 8007d50:	08007f23 	.word	0x08007f23
 8007d54:	08007f23 	.word	0x08007f23
 8007d58:	08007ddd 	.word	0x08007ddd
 8007d5c:	08007f23 	.word	0x08007f23
 8007d60:	08007f23 	.word	0x08007f23
 8007d64:	08007f23 	.word	0x08007f23
 8007d68:	08007e1f 	.word	0x08007e1f
 8007d6c:	08007f23 	.word	0x08007f23
 8007d70:	08007f23 	.word	0x08007f23
 8007d74:	08007f23 	.word	0x08007f23
 8007d78:	08007e5f 	.word	0x08007e5f
 8007d7c:	08007f23 	.word	0x08007f23
 8007d80:	08007f23 	.word	0x08007f23
 8007d84:	08007f23 	.word	0x08007f23
 8007d88:	08007ea1 	.word	0x08007ea1
 8007d8c:	08007f23 	.word	0x08007f23
 8007d90:	08007f23 	.word	0x08007f23
 8007d94:	08007f23 	.word	0x08007f23
 8007d98:	08007ee1 	.word	0x08007ee1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fa5c 	bl	8008260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0208 	orr.w	r2, r2, #8
 8007db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0204 	bic.w	r2, r2, #4
 8007dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6999      	ldr	r1, [r3, #24]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	619a      	str	r2, [r3, #24]
      break;
 8007dda:	e0a3      	b.n	8007f24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 facc 	bl	8008380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6999      	ldr	r1, [r3, #24]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	021a      	lsls	r2, r3, #8
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	619a      	str	r2, [r3, #24]
      break;
 8007e1c:	e082      	b.n	8007f24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fb35 	bl	8008494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69da      	ldr	r2, [r3, #28]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0208 	orr.w	r2, r2, #8
 8007e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0204 	bic.w	r2, r2, #4
 8007e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69d9      	ldr	r1, [r3, #28]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	61da      	str	r2, [r3, #28]
      break;
 8007e5c:	e062      	b.n	8007f24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fb9d 	bl	80085a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69d9      	ldr	r1, [r3, #28]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	021a      	lsls	r2, r3, #8
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	61da      	str	r2, [r3, #28]
      break;
 8007e9e:	e041      	b.n	8007f24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fc06 	bl	80086b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0208 	orr.w	r2, r2, #8
 8007eba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0204 	bic.w	r2, r2, #4
 8007eca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	691a      	ldr	r2, [r3, #16]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007ede:	e021      	b.n	8007f24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fc4a 	bl	8008780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007efa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	021a      	lsls	r2, r3, #8
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007f20:	e000      	b.n	8007f24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007f22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop

08007f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_TIM_ConfigClockSource+0x18>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e0b9      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x18c>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b70      	cmp	r3, #112	; 0x70
 8007f8a:	d02e      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0xb2>
 8007f8c:	2b70      	cmp	r3, #112	; 0x70
 8007f8e:	d812      	bhi.n	8007fb6 <HAL_TIM_ConfigClockSource+0x7e>
 8007f90:	2b30      	cmp	r3, #48	; 0x30
 8007f92:	f000 8084 	beq.w	800809e <HAL_TIM_ConfigClockSource+0x166>
 8007f96:	2b30      	cmp	r3, #48	; 0x30
 8007f98:	d806      	bhi.n	8007fa8 <HAL_TIM_ConfigClockSource+0x70>
 8007f9a:	2b10      	cmp	r3, #16
 8007f9c:	d07f      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x166>
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d07d      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x166>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d07b      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007fa6:	e084      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007fa8:	2b50      	cmp	r3, #80	; 0x50
 8007faa:	d048      	beq.n	800803e <HAL_TIM_ConfigClockSource+0x106>
 8007fac:	2b60      	cmp	r3, #96	; 0x60
 8007fae:	d056      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x126>
 8007fb0:	2b40      	cmp	r3, #64	; 0x40
 8007fb2:	d064      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x146>
      break;
 8007fb4:	e07d      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007fb6:	4a45      	ldr	r2, [pc, #276]	; (80080cc <HAL_TIM_ConfigClockSource+0x194>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d070      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x166>
 8007fbc:	4a43      	ldr	r2, [pc, #268]	; (80080cc <HAL_TIM_ConfigClockSource+0x194>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d809      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x9e>
 8007fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fc6:	d027      	beq.n	8008018 <HAL_TIM_ConfigClockSource+0xe0>
 8007fc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007fcc:	d067      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x166>
 8007fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd2:	d06d      	beq.n	80080b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007fd4:	e06d      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007fd6:	4a3e      	ldr	r2, [pc, #248]	; (80080d0 <HAL_TIM_ConfigClockSource+0x198>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d060      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x166>
 8007fdc:	4a3d      	ldr	r2, [pc, #244]	; (80080d4 <HAL_TIM_ConfigClockSource+0x19c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d05d      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x166>
 8007fe2:	4a3d      	ldr	r2, [pc, #244]	; (80080d8 <HAL_TIM_ConfigClockSource+0x1a0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d05a      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x166>
      break;
 8007fe8:	e063      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6818      	ldr	r0, [r3, #0]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6899      	ldr	r1, [r3, #8]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f000 fca3 	bl	8008944 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800800c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	609a      	str	r2, [r3, #8]
      break;
 8008016:	e04c      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	6899      	ldr	r1, [r3, #8]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f000 fc8c 	bl	8008944 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800803a:	609a      	str	r2, [r3, #8]
      break;
 800803c:	e039      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	461a      	mov	r2, r3
 800804c:	f000 fbfe 	bl	800884c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2150      	movs	r1, #80	; 0x50
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fc57 	bl	800890a <TIM_ITRx_SetConfig>
      break;
 800805c:	e029      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6859      	ldr	r1, [r3, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	461a      	mov	r2, r3
 800806c:	f000 fc1d 	bl	80088aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2160      	movs	r1, #96	; 0x60
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fc47 	bl	800890a <TIM_ITRx_SetConfig>
      break;
 800807c:	e019      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6859      	ldr	r1, [r3, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	461a      	mov	r2, r3
 800808c:	f000 fbde 	bl	800884c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2140      	movs	r1, #64	; 0x40
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fc37 	bl	800890a <TIM_ITRx_SetConfig>
      break;
 800809c:	e009      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f000 fc2e 	bl	800890a <TIM_ITRx_SetConfig>
        break;
 80080ae:	e000      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80080b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	00100020 	.word	0x00100020
 80080d0:	00100040 	.word	0x00100040
 80080d4:	00100070 	.word	0x00100070
 80080d8:	00100030 	.word	0x00100030

080080dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a3c      	ldr	r2, [pc, #240]	; (8008244 <TIM_Base_SetConfig+0x104>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00f      	beq.n	8008178 <TIM_Base_SetConfig+0x38>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815e:	d00b      	beq.n	8008178 <TIM_Base_SetConfig+0x38>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a39      	ldr	r2, [pc, #228]	; (8008248 <TIM_Base_SetConfig+0x108>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d007      	beq.n	8008178 <TIM_Base_SetConfig+0x38>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a38      	ldr	r2, [pc, #224]	; (800824c <TIM_Base_SetConfig+0x10c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d003      	beq.n	8008178 <TIM_Base_SetConfig+0x38>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a37      	ldr	r2, [pc, #220]	; (8008250 <TIM_Base_SetConfig+0x110>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d108      	bne.n	800818a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800817e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <TIM_Base_SetConfig+0x104>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d01b      	beq.n	80081ca <TIM_Base_SetConfig+0x8a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008198:	d017      	beq.n	80081ca <TIM_Base_SetConfig+0x8a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a2a      	ldr	r2, [pc, #168]	; (8008248 <TIM_Base_SetConfig+0x108>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d013      	beq.n	80081ca <TIM_Base_SetConfig+0x8a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a29      	ldr	r2, [pc, #164]	; (800824c <TIM_Base_SetConfig+0x10c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00f      	beq.n	80081ca <TIM_Base_SetConfig+0x8a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a28      	ldr	r2, [pc, #160]	; (8008250 <TIM_Base_SetConfig+0x110>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00b      	beq.n	80081ca <TIM_Base_SetConfig+0x8a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a27      	ldr	r2, [pc, #156]	; (8008254 <TIM_Base_SetConfig+0x114>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d007      	beq.n	80081ca <TIM_Base_SetConfig+0x8a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a26      	ldr	r2, [pc, #152]	; (8008258 <TIM_Base_SetConfig+0x118>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d003      	beq.n	80081ca <TIM_Base_SetConfig+0x8a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a25      	ldr	r2, [pc, #148]	; (800825c <TIM_Base_SetConfig+0x11c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d108      	bne.n	80081dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a10      	ldr	r2, [pc, #64]	; (8008244 <TIM_Base_SetConfig+0x104>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00f      	beq.n	8008228 <TIM_Base_SetConfig+0xe8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a11      	ldr	r2, [pc, #68]	; (8008250 <TIM_Base_SetConfig+0x110>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00b      	beq.n	8008228 <TIM_Base_SetConfig+0xe8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a10      	ldr	r2, [pc, #64]	; (8008254 <TIM_Base_SetConfig+0x114>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d007      	beq.n	8008228 <TIM_Base_SetConfig+0xe8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a0f      	ldr	r2, [pc, #60]	; (8008258 <TIM_Base_SetConfig+0x118>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_Base_SetConfig+0xe8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a0e      	ldr	r2, [pc, #56]	; (800825c <TIM_Base_SetConfig+0x11c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d103      	bne.n	8008230 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	615a      	str	r2, [r3, #20]
}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40012c00 	.word	0x40012c00
 8008248:	40000400 	.word	0x40000400
 800824c:	40000800 	.word	0x40000800
 8008250:	40013400 	.word	0x40013400
 8008254:	40014000 	.word	0x40014000
 8008258:	40014400 	.word	0x40014400
 800825c:	40014800 	.word	0x40014800

08008260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f023 0201 	bic.w	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f023 0302 	bic.w	r3, r3, #2
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a2c      	ldr	r2, [pc, #176]	; (800836c <TIM_OC1_SetConfig+0x10c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00f      	beq.n	80082e0 <TIM_OC1_SetConfig+0x80>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a2b      	ldr	r2, [pc, #172]	; (8008370 <TIM_OC1_SetConfig+0x110>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00b      	beq.n	80082e0 <TIM_OC1_SetConfig+0x80>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a2a      	ldr	r2, [pc, #168]	; (8008374 <TIM_OC1_SetConfig+0x114>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d007      	beq.n	80082e0 <TIM_OC1_SetConfig+0x80>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a29      	ldr	r2, [pc, #164]	; (8008378 <TIM_OC1_SetConfig+0x118>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_OC1_SetConfig+0x80>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a28      	ldr	r2, [pc, #160]	; (800837c <TIM_OC1_SetConfig+0x11c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d10c      	bne.n	80082fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f023 0308 	bic.w	r3, r3, #8
 80082e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f023 0304 	bic.w	r3, r3, #4
 80082f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a1b      	ldr	r2, [pc, #108]	; (800836c <TIM_OC1_SetConfig+0x10c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00f      	beq.n	8008322 <TIM_OC1_SetConfig+0xc2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a1a      	ldr	r2, [pc, #104]	; (8008370 <TIM_OC1_SetConfig+0x110>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00b      	beq.n	8008322 <TIM_OC1_SetConfig+0xc2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a19      	ldr	r2, [pc, #100]	; (8008374 <TIM_OC1_SetConfig+0x114>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d007      	beq.n	8008322 <TIM_OC1_SetConfig+0xc2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a18      	ldr	r2, [pc, #96]	; (8008378 <TIM_OC1_SetConfig+0x118>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <TIM_OC1_SetConfig+0xc2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a17      	ldr	r2, [pc, #92]	; (800837c <TIM_OC1_SetConfig+0x11c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d111      	bne.n	8008346 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4313      	orrs	r3, r2
 800833a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4313      	orrs	r3, r2
 8008344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	621a      	str	r2, [r3, #32]
}
 8008360:	bf00      	nop
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	40012c00 	.word	0x40012c00
 8008370:	40013400 	.word	0x40013400
 8008374:	40014000 	.word	0x40014000
 8008378:	40014400 	.word	0x40014400
 800837c:	40014800 	.word	0x40014800

08008380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	f023 0210 	bic.w	r2, r3, #16
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f023 0320 	bic.w	r3, r3, #32
 80083ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	4313      	orrs	r3, r2
 80083da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a28      	ldr	r2, [pc, #160]	; (8008480 <TIM_OC2_SetConfig+0x100>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d003      	beq.n	80083ec <TIM_OC2_SetConfig+0x6c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a27      	ldr	r2, [pc, #156]	; (8008484 <TIM_OC2_SetConfig+0x104>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d10d      	bne.n	8008408 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008406:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1d      	ldr	r2, [pc, #116]	; (8008480 <TIM_OC2_SetConfig+0x100>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00f      	beq.n	8008430 <TIM_OC2_SetConfig+0xb0>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1c      	ldr	r2, [pc, #112]	; (8008484 <TIM_OC2_SetConfig+0x104>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00b      	beq.n	8008430 <TIM_OC2_SetConfig+0xb0>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a1b      	ldr	r2, [pc, #108]	; (8008488 <TIM_OC2_SetConfig+0x108>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d007      	beq.n	8008430 <TIM_OC2_SetConfig+0xb0>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a1a      	ldr	r2, [pc, #104]	; (800848c <TIM_OC2_SetConfig+0x10c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d003      	beq.n	8008430 <TIM_OC2_SetConfig+0xb0>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a19      	ldr	r2, [pc, #100]	; (8008490 <TIM_OC2_SetConfig+0x110>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d113      	bne.n	8008458 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800843e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	621a      	str	r2, [r3, #32]
}
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	40012c00 	.word	0x40012c00
 8008484:	40013400 	.word	0x40013400
 8008488:	40014000 	.word	0x40014000
 800848c:	40014400 	.word	0x40014400
 8008490:	40014800 	.word	0x40014800

08008494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0303 	bic.w	r3, r3, #3
 80084ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	021b      	lsls	r3, r3, #8
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a27      	ldr	r2, [pc, #156]	; (8008590 <TIM_OC3_SetConfig+0xfc>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d003      	beq.n	80084fe <TIM_OC3_SetConfig+0x6a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a26      	ldr	r2, [pc, #152]	; (8008594 <TIM_OC3_SetConfig+0x100>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d10d      	bne.n	800851a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	021b      	lsls	r3, r3, #8
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a1c      	ldr	r2, [pc, #112]	; (8008590 <TIM_OC3_SetConfig+0xfc>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00f      	beq.n	8008542 <TIM_OC3_SetConfig+0xae>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a1b      	ldr	r2, [pc, #108]	; (8008594 <TIM_OC3_SetConfig+0x100>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00b      	beq.n	8008542 <TIM_OC3_SetConfig+0xae>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a1a      	ldr	r2, [pc, #104]	; (8008598 <TIM_OC3_SetConfig+0x104>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d007      	beq.n	8008542 <TIM_OC3_SetConfig+0xae>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a19      	ldr	r2, [pc, #100]	; (800859c <TIM_OC3_SetConfig+0x108>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d003      	beq.n	8008542 <TIM_OC3_SetConfig+0xae>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a18      	ldr	r2, [pc, #96]	; (80085a0 <TIM_OC3_SetConfig+0x10c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d113      	bne.n	800856a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	621a      	str	r2, [r3, #32]
}
 8008584:	bf00      	nop
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	40012c00 	.word	0x40012c00
 8008594:	40013400 	.word	0x40013400
 8008598:	40014000 	.word	0x40014000
 800859c:	40014400 	.word	0x40014400
 80085a0:	40014800 	.word	0x40014800

080085a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	031b      	lsls	r3, r3, #12
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a28      	ldr	r2, [pc, #160]	; (80086a4 <TIM_OC4_SetConfig+0x100>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d003      	beq.n	8008610 <TIM_OC4_SetConfig+0x6c>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a27      	ldr	r2, [pc, #156]	; (80086a8 <TIM_OC4_SetConfig+0x104>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d10d      	bne.n	800862c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	031b      	lsls	r3, r3, #12
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800862a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <TIM_OC4_SetConfig+0x100>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00f      	beq.n	8008654 <TIM_OC4_SetConfig+0xb0>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a1c      	ldr	r2, [pc, #112]	; (80086a8 <TIM_OC4_SetConfig+0x104>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00b      	beq.n	8008654 <TIM_OC4_SetConfig+0xb0>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a1b      	ldr	r2, [pc, #108]	; (80086ac <TIM_OC4_SetConfig+0x108>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d007      	beq.n	8008654 <TIM_OC4_SetConfig+0xb0>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a1a      	ldr	r2, [pc, #104]	; (80086b0 <TIM_OC4_SetConfig+0x10c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <TIM_OC4_SetConfig+0xb0>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a19      	ldr	r2, [pc, #100]	; (80086b4 <TIM_OC4_SetConfig+0x110>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d113      	bne.n	800867c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800865a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008662:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	019b      	lsls	r3, r3, #6
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	4313      	orrs	r3, r2
 800866e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	019b      	lsls	r3, r3, #6
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	621a      	str	r2, [r3, #32]
}
 8008696:	bf00      	nop
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40013400 	.word	0x40013400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	40014400 	.word	0x40014400
 80086b4:	40014800 	.word	0x40014800

080086b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80086fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	041b      	lsls	r3, r3, #16
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	4313      	orrs	r3, r2
 8008708:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a17      	ldr	r2, [pc, #92]	; (800876c <TIM_OC5_SetConfig+0xb4>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00f      	beq.n	8008732 <TIM_OC5_SetConfig+0x7a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a16      	ldr	r2, [pc, #88]	; (8008770 <TIM_OC5_SetConfig+0xb8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d00b      	beq.n	8008732 <TIM_OC5_SetConfig+0x7a>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a15      	ldr	r2, [pc, #84]	; (8008774 <TIM_OC5_SetConfig+0xbc>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d007      	beq.n	8008732 <TIM_OC5_SetConfig+0x7a>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a14      	ldr	r2, [pc, #80]	; (8008778 <TIM_OC5_SetConfig+0xc0>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d003      	beq.n	8008732 <TIM_OC5_SetConfig+0x7a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a13      	ldr	r2, [pc, #76]	; (800877c <TIM_OC5_SetConfig+0xc4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d109      	bne.n	8008746 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	021b      	lsls	r3, r3, #8
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	621a      	str	r2, [r3, #32]
}
 8008760:	bf00      	nop
 8008762:	371c      	adds	r7, #28
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40014000 	.word	0x40014000
 8008778:	40014400 	.word	0x40014400
 800877c:	40014800 	.word	0x40014800

08008780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	051b      	lsls	r3, r3, #20
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <TIM_OC6_SetConfig+0xb8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00f      	beq.n	80087fc <TIM_OC6_SetConfig+0x7c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a17      	ldr	r2, [pc, #92]	; (800883c <TIM_OC6_SetConfig+0xbc>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00b      	beq.n	80087fc <TIM_OC6_SetConfig+0x7c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a16      	ldr	r2, [pc, #88]	; (8008840 <TIM_OC6_SetConfig+0xc0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d007      	beq.n	80087fc <TIM_OC6_SetConfig+0x7c>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a15      	ldr	r2, [pc, #84]	; (8008844 <TIM_OC6_SetConfig+0xc4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC6_SetConfig+0x7c>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a14      	ldr	r2, [pc, #80]	; (8008848 <TIM_OC6_SetConfig+0xc8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d109      	bne.n	8008810 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	029b      	lsls	r3, r3, #10
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40013400 	.word	0x40013400
 8008840:	40014000 	.word	0x40014000
 8008844:	40014400 	.word	0x40014400
 8008848:	40014800 	.word	0x40014800

0800884c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f023 0201 	bic.w	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f023 030a 	bic.w	r3, r3, #10
 8008888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4313      	orrs	r3, r2
 8008890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	621a      	str	r2, [r3, #32]
}
 800889e:	bf00      	nop
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b087      	sub	sp, #28
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	f023 0210 	bic.w	r2, r3, #16
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	031b      	lsls	r3, r3, #12
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4313      	orrs	r3, r2
 80088de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800890a:	b480      	push	{r7}
 800890c:	b085      	sub	sp, #20
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4313      	orrs	r3, r2
 800892c:	f043 0307 	orr.w	r3, r3, #7
 8008930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	609a      	str	r2, [r3, #8]
}
 8008938:	bf00      	nop
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800895e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	021a      	lsls	r2, r3, #8
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	431a      	orrs	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	4313      	orrs	r3, r2
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	609a      	str	r2, [r3, #8]
}
 8008978:	bf00      	nop
 800897a:	371c      	adds	r7, #28
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f003 031f 	and.w	r3, r3, #31
 8008996:	2201      	movs	r2, #1
 8008998:	fa02 f303 	lsl.w	r3, r2, r3
 800899c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a1a      	ldr	r2, [r3, #32]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	43db      	mvns	r3, r3
 80089a6:	401a      	ands	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a1a      	ldr	r2, [r3, #32]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f003 031f 	and.w	r3, r3, #31
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	fa01 f303 	lsl.w	r3, r1, r3
 80089bc:	431a      	orrs	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e065      	b.n	8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a2c      	ldr	r2, [pc, #176]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d004      	beq.n	8008a1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a2b      	ldr	r2, [pc, #172]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d108      	bne.n	8008a2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d018      	beq.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5e:	d013      	beq.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00e      	beq.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a17      	ldr	r2, [pc, #92]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d009      	beq.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a12      	ldr	r2, [pc, #72]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a13      	ldr	r2, [pc, #76]	; (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d10c      	bne.n	8008aa2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	40012c00 	.word	0x40012c00
 8008ac4:	40013400 	.word	0x40013400
 8008ac8:	40000400 	.word	0x40000400
 8008acc:	40000800 	.word	0x40000800
 8008ad0:	40014000 	.word	0x40014000

08008ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e042      	b.n	8008bf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fa fd63 	bl	8003650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2224      	movs	r2, #36	; 0x24
 8008b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0201 	bic.w	r2, r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fad2 	bl	800914c <UART_SetConfig>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e022      	b.n	8008bf8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fd6e 	bl	800969c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0201 	orr.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fdf5 	bl	80097e0 <UART_CheckIdleState>
 8008bf6:	4603      	mov	r3, r0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	d168      	bne.n	8008cea <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <HAL_UART_Transmit_DMA+0x24>
 8008c1e:	88fb      	ldrh	r3, [r7, #6]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e061      	b.n	8008cec <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <HAL_UART_Transmit_DMA+0x36>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e05a      	b.n	8008cec <HAL_UART_Transmit_DMA+0xec>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2221      	movs	r2, #33	; 0x21
 8008c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d02c      	beq.n	8008cc6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c70:	4a20      	ldr	r2, [pc, #128]	; (8008cf4 <HAL_UART_Transmit_DMA+0xf4>)
 8008c72:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c78:	4a1f      	ldr	r2, [pc, #124]	; (8008cf8 <HAL_UART_Transmit_DMA+0xf8>)
 8008c7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c80:	4a1e      	ldr	r2, [pc, #120]	; (8008cfc <HAL_UART_Transmit_DMA+0xfc>)
 8008c82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c88:	2200      	movs	r2, #0
 8008c8a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	4619      	mov	r1, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3328      	adds	r3, #40	; 0x28
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	f7fc fd2c 	bl	80056fc <HAL_DMA_Start_IT>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00d      	beq.n	8008cc6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2210      	movs	r2, #16
 8008cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e012      	b.n	8008cec <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689a      	ldr	r2, [r3, #8]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ce4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e000      	b.n	8008cec <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008cea:	2302      	movs	r3, #2
  }
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	080099f3 	.word	0x080099f3
 8008cf8:	08009a47 	.word	0x08009a47
 8008cfc:	08009ae9 	.word	0x08009ae9

08008d00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	d170      	bne.n	8008dfa <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <HAL_UART_Receive_DMA+0x24>
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e069      	b.n	8008dfc <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_UART_Receive_DMA+0x36>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e062      	b.n	8008dfc <HAL_UART_Receive_DMA+0xfc>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	88fa      	ldrh	r2, [r7, #6]
 8008d48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2222      	movs	r2, #34	; 0x22
 8008d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d02c      	beq.n	8008dbe <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d68:	4a26      	ldr	r2, [pc, #152]	; (8008e04 <HAL_UART_Receive_DMA+0x104>)
 8008d6a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d70:	4a25      	ldr	r2, [pc, #148]	; (8008e08 <HAL_UART_Receive_DMA+0x108>)
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d78:	4a24      	ldr	r2, [pc, #144]	; (8008e0c <HAL_UART_Receive_DMA+0x10c>)
 8008d7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d80:	2200      	movs	r2, #0
 8008d82:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3324      	adds	r3, #36	; 0x24
 8008d8e:	4619      	mov	r1, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d94:	461a      	mov	r2, r3
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	f7fc fcb0 	bl	80056fc <HAL_DMA_Start_IT>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00d      	beq.n	8008dbe <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2210      	movs	r2, #16
 8008da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e01e      	b.n	8008dfc <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dd4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0201 	orr.w	r2, r2, #1
 8008de4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	e000      	b.n	8008dfc <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8008dfa:	2302      	movs	r3, #2
  }
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	08009a63 	.word	0x08009a63
 8008e08:	08009acd 	.word	0x08009acd
 8008e0c:	08009ae9 	.word	0x08009ae9

08008e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e36:	4013      	ands	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d118      	bne.n	8008e72 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d013      	beq.n	8008e72 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 8145 	beq.w	80090f2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	4798      	blx	r3
      }
      return;
 8008e70:	e13f      	b.n	80090f2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 80e8 	beq.w	800904a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4ba1      	ldr	r3, [pc, #644]	; (8009104 <HAL_UART_IRQHandler+0x2f4>)
 8008e7e:	4013      	ands	r3, r2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	4ba0      	ldr	r3, [pc, #640]	; (8009108 <HAL_UART_IRQHandler+0x2f8>)
 8008e88:	4013      	ands	r3, r2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 80dd 	beq.w	800904a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d010      	beq.n	8008ebc <HAL_UART_IRQHandler+0xac>
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00b      	beq.n	8008ebc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb2:	f043 0201 	orr.w	r2, r3, #1
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d010      	beq.n	8008ee8 <HAL_UART_IRQHandler+0xd8>
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ede:	f043 0204 	orr.w	r2, r3, #4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d010      	beq.n	8008f14 <HAL_UART_IRQHandler+0x104>
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2204      	movs	r2, #4
 8008f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0a:	f043 0202 	orr.w	r2, r3, #2
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f003 0308 	and.w	r3, r3, #8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d015      	beq.n	8008f4a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4b76      	ldr	r3, [pc, #472]	; (8009104 <HAL_UART_IRQHandler+0x2f4>)
 8008f2c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00b      	beq.n	8008f4a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2208      	movs	r2, #8
 8008f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f40:	f043 0208 	orr.w	r2, r3, #8
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d011      	beq.n	8008f78 <HAL_UART_IRQHandler+0x168>
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00c      	beq.n	8008f78 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6e:	f043 0220 	orr.w	r2, r3, #32
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80b9 	beq.w	80090f6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d011      	beq.n	8008fb2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc4:	2b40      	cmp	r3, #64	; 0x40
 8008fc6:	d004      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d031      	beq.n	8009036 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fcea 	bl	80099ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe2:	2b40      	cmp	r3, #64	; 0x40
 8008fe4:	d123      	bne.n	800902e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d013      	beq.n	8009026 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009002:	4a42      	ldr	r2, [pc, #264]	; (800910c <HAL_UART_IRQHandler+0x2fc>)
 8009004:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800900a:	4618      	mov	r0, r3
 800900c:	f7fc fbf1 	bl	80057f2 <HAL_DMA_Abort_IT>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d017      	beq.n	8009046 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800901a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009024:	e00f      	b.n	8009046 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7f9 fec0 	bl	8002dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902c:	e00b      	b.n	8009046 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7f9 febc 	bl	8002dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009034:	e007      	b.n	8009046 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7f9 feb8 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009044:	e057      	b.n	80090f6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009046:	bf00      	nop
    return;
 8009048:	e055      	b.n	80090f6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00d      	beq.n	8009070 <HAL_UART_IRQHandler+0x260>
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d008      	beq.n	8009070 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fdad 	bl	8009bc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800906e:	e045      	b.n	80090fc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009076:	2b00      	cmp	r3, #0
 8009078:	d012      	beq.n	80090a0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009092:	2b00      	cmp	r3, #0
 8009094:	d031      	beq.n	80090fa <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	4798      	blx	r3
    }
    return;
 800909e:	e02c      	b.n	80090fa <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d008      	beq.n	80090bc <HAL_UART_IRQHandler+0x2ac>
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fd6d 	bl	8009b94 <UART_EndTransmit_IT>
    return;
 80090ba:	e01f      	b.n	80090fc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d008      	beq.n	80090d8 <HAL_UART_IRQHandler+0x2c8>
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fd8d 	bl	8009bf0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090d6:	e011      	b.n	80090fc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00c      	beq.n	80090fc <HAL_UART_IRQHandler+0x2ec>
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	da09      	bge.n	80090fc <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fd77 	bl	8009bdc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090ee:	bf00      	nop
 80090f0:	e004      	b.n	80090fc <HAL_UART_IRQHandler+0x2ec>
      return;
 80090f2:	bf00      	nop
 80090f4:	e002      	b.n	80090fc <HAL_UART_IRQHandler+0x2ec>
    return;
 80090f6:	bf00      	nop
 80090f8:	e000      	b.n	80090fc <HAL_UART_IRQHandler+0x2ec>
    return;
 80090fa:	bf00      	nop
  }
}
 80090fc:	3720      	adds	r7, #32
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	10000001 	.word	0x10000001
 8009108:	04000120 	.word	0x04000120
 800910c:	08009b69 	.word	0x08009b69

08009110 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800914c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009150:	b088      	sub	sp, #32
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689a      	ldr	r2, [r3, #8]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	431a      	orrs	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	4313      	orrs	r3, r2
 8009170:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	4313      	orrs	r3, r2
 800917a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4bb0      	ldr	r3, [pc, #704]	; (8009444 <UART_SetConfig+0x2f8>)
 8009184:	4013      	ands	r3, r2
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6812      	ldr	r2, [r2, #0]
 800918a:	69f9      	ldr	r1, [r7, #28]
 800918c:	430b      	orrs	r3, r1
 800918e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4aa5      	ldr	r2, [pc, #660]	; (8009448 <UART_SetConfig+0x2fc>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d004      	beq.n	80091c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	4313      	orrs	r3, r2
 80091be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80091ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6812      	ldr	r2, [r2, #0]
 80091d2:	69f9      	ldr	r1, [r7, #28]
 80091d4:	430b      	orrs	r3, r1
 80091d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	f023 010f 	bic.w	r1, r3, #15
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a96      	ldr	r2, [pc, #600]	; (800944c <UART_SetConfig+0x300>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d121      	bne.n	800923c <UART_SetConfig+0xf0>
 80091f8:	4b95      	ldr	r3, [pc, #596]	; (8009450 <UART_SetConfig+0x304>)
 80091fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	2b03      	cmp	r3, #3
 8009204:	d816      	bhi.n	8009234 <UART_SetConfig+0xe8>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <UART_SetConfig+0xc0>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	0800921d 	.word	0x0800921d
 8009210:	08009229 	.word	0x08009229
 8009214:	08009223 	.word	0x08009223
 8009218:	0800922f 	.word	0x0800922f
 800921c:	2301      	movs	r3, #1
 800921e:	76fb      	strb	r3, [r7, #27]
 8009220:	e0be      	b.n	80093a0 <UART_SetConfig+0x254>
 8009222:	2302      	movs	r3, #2
 8009224:	76fb      	strb	r3, [r7, #27]
 8009226:	e0bb      	b.n	80093a0 <UART_SetConfig+0x254>
 8009228:	2304      	movs	r3, #4
 800922a:	76fb      	strb	r3, [r7, #27]
 800922c:	e0b8      	b.n	80093a0 <UART_SetConfig+0x254>
 800922e:	2308      	movs	r3, #8
 8009230:	76fb      	strb	r3, [r7, #27]
 8009232:	e0b5      	b.n	80093a0 <UART_SetConfig+0x254>
 8009234:	2310      	movs	r3, #16
 8009236:	76fb      	strb	r3, [r7, #27]
 8009238:	bf00      	nop
 800923a:	e0b1      	b.n	80093a0 <UART_SetConfig+0x254>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a84      	ldr	r2, [pc, #528]	; (8009454 <UART_SetConfig+0x308>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d134      	bne.n	80092b0 <UART_SetConfig+0x164>
 8009246:	4b82      	ldr	r3, [pc, #520]	; (8009450 <UART_SetConfig+0x304>)
 8009248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924c:	f003 030c 	and.w	r3, r3, #12
 8009250:	2b0c      	cmp	r3, #12
 8009252:	d829      	bhi.n	80092a8 <UART_SetConfig+0x15c>
 8009254:	a201      	add	r2, pc, #4	; (adr r2, 800925c <UART_SetConfig+0x110>)
 8009256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925a:	bf00      	nop
 800925c:	08009291 	.word	0x08009291
 8009260:	080092a9 	.word	0x080092a9
 8009264:	080092a9 	.word	0x080092a9
 8009268:	080092a9 	.word	0x080092a9
 800926c:	0800929d 	.word	0x0800929d
 8009270:	080092a9 	.word	0x080092a9
 8009274:	080092a9 	.word	0x080092a9
 8009278:	080092a9 	.word	0x080092a9
 800927c:	08009297 	.word	0x08009297
 8009280:	080092a9 	.word	0x080092a9
 8009284:	080092a9 	.word	0x080092a9
 8009288:	080092a9 	.word	0x080092a9
 800928c:	080092a3 	.word	0x080092a3
 8009290:	2300      	movs	r3, #0
 8009292:	76fb      	strb	r3, [r7, #27]
 8009294:	e084      	b.n	80093a0 <UART_SetConfig+0x254>
 8009296:	2302      	movs	r3, #2
 8009298:	76fb      	strb	r3, [r7, #27]
 800929a:	e081      	b.n	80093a0 <UART_SetConfig+0x254>
 800929c:	2304      	movs	r3, #4
 800929e:	76fb      	strb	r3, [r7, #27]
 80092a0:	e07e      	b.n	80093a0 <UART_SetConfig+0x254>
 80092a2:	2308      	movs	r3, #8
 80092a4:	76fb      	strb	r3, [r7, #27]
 80092a6:	e07b      	b.n	80093a0 <UART_SetConfig+0x254>
 80092a8:	2310      	movs	r3, #16
 80092aa:	76fb      	strb	r3, [r7, #27]
 80092ac:	bf00      	nop
 80092ae:	e077      	b.n	80093a0 <UART_SetConfig+0x254>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a68      	ldr	r2, [pc, #416]	; (8009458 <UART_SetConfig+0x30c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d120      	bne.n	80092fc <UART_SetConfig+0x1b0>
 80092ba:	4b65      	ldr	r3, [pc, #404]	; (8009450 <UART_SetConfig+0x304>)
 80092bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092c4:	2b10      	cmp	r3, #16
 80092c6:	d00f      	beq.n	80092e8 <UART_SetConfig+0x19c>
 80092c8:	2b10      	cmp	r3, #16
 80092ca:	d802      	bhi.n	80092d2 <UART_SetConfig+0x186>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <UART_SetConfig+0x190>
 80092d0:	e010      	b.n	80092f4 <UART_SetConfig+0x1a8>
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d005      	beq.n	80092e2 <UART_SetConfig+0x196>
 80092d6:	2b30      	cmp	r3, #48	; 0x30
 80092d8:	d009      	beq.n	80092ee <UART_SetConfig+0x1a2>
 80092da:	e00b      	b.n	80092f4 <UART_SetConfig+0x1a8>
 80092dc:	2300      	movs	r3, #0
 80092de:	76fb      	strb	r3, [r7, #27]
 80092e0:	e05e      	b.n	80093a0 <UART_SetConfig+0x254>
 80092e2:	2302      	movs	r3, #2
 80092e4:	76fb      	strb	r3, [r7, #27]
 80092e6:	e05b      	b.n	80093a0 <UART_SetConfig+0x254>
 80092e8:	2304      	movs	r3, #4
 80092ea:	76fb      	strb	r3, [r7, #27]
 80092ec:	e058      	b.n	80093a0 <UART_SetConfig+0x254>
 80092ee:	2308      	movs	r3, #8
 80092f0:	76fb      	strb	r3, [r7, #27]
 80092f2:	e055      	b.n	80093a0 <UART_SetConfig+0x254>
 80092f4:	2310      	movs	r3, #16
 80092f6:	76fb      	strb	r3, [r7, #27]
 80092f8:	bf00      	nop
 80092fa:	e051      	b.n	80093a0 <UART_SetConfig+0x254>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a56      	ldr	r2, [pc, #344]	; (800945c <UART_SetConfig+0x310>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d120      	bne.n	8009348 <UART_SetConfig+0x1fc>
 8009306:	4b52      	ldr	r3, [pc, #328]	; (8009450 <UART_SetConfig+0x304>)
 8009308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009310:	2b40      	cmp	r3, #64	; 0x40
 8009312:	d00f      	beq.n	8009334 <UART_SetConfig+0x1e8>
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	d802      	bhi.n	800931e <UART_SetConfig+0x1d2>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <UART_SetConfig+0x1dc>
 800931c:	e010      	b.n	8009340 <UART_SetConfig+0x1f4>
 800931e:	2b80      	cmp	r3, #128	; 0x80
 8009320:	d005      	beq.n	800932e <UART_SetConfig+0x1e2>
 8009322:	2bc0      	cmp	r3, #192	; 0xc0
 8009324:	d009      	beq.n	800933a <UART_SetConfig+0x1ee>
 8009326:	e00b      	b.n	8009340 <UART_SetConfig+0x1f4>
 8009328:	2300      	movs	r3, #0
 800932a:	76fb      	strb	r3, [r7, #27]
 800932c:	e038      	b.n	80093a0 <UART_SetConfig+0x254>
 800932e:	2302      	movs	r3, #2
 8009330:	76fb      	strb	r3, [r7, #27]
 8009332:	e035      	b.n	80093a0 <UART_SetConfig+0x254>
 8009334:	2304      	movs	r3, #4
 8009336:	76fb      	strb	r3, [r7, #27]
 8009338:	e032      	b.n	80093a0 <UART_SetConfig+0x254>
 800933a:	2308      	movs	r3, #8
 800933c:	76fb      	strb	r3, [r7, #27]
 800933e:	e02f      	b.n	80093a0 <UART_SetConfig+0x254>
 8009340:	2310      	movs	r3, #16
 8009342:	76fb      	strb	r3, [r7, #27]
 8009344:	bf00      	nop
 8009346:	e02b      	b.n	80093a0 <UART_SetConfig+0x254>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a3e      	ldr	r2, [pc, #248]	; (8009448 <UART_SetConfig+0x2fc>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d124      	bne.n	800939c <UART_SetConfig+0x250>
 8009352:	4b3f      	ldr	r3, [pc, #252]	; (8009450 <UART_SetConfig+0x304>)
 8009354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800935c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009360:	d012      	beq.n	8009388 <UART_SetConfig+0x23c>
 8009362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009366:	d802      	bhi.n	800936e <UART_SetConfig+0x222>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d007      	beq.n	800937c <UART_SetConfig+0x230>
 800936c:	e012      	b.n	8009394 <UART_SetConfig+0x248>
 800936e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009372:	d006      	beq.n	8009382 <UART_SetConfig+0x236>
 8009374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009378:	d009      	beq.n	800938e <UART_SetConfig+0x242>
 800937a:	e00b      	b.n	8009394 <UART_SetConfig+0x248>
 800937c:	2300      	movs	r3, #0
 800937e:	76fb      	strb	r3, [r7, #27]
 8009380:	e00e      	b.n	80093a0 <UART_SetConfig+0x254>
 8009382:	2302      	movs	r3, #2
 8009384:	76fb      	strb	r3, [r7, #27]
 8009386:	e00b      	b.n	80093a0 <UART_SetConfig+0x254>
 8009388:	2304      	movs	r3, #4
 800938a:	76fb      	strb	r3, [r7, #27]
 800938c:	e008      	b.n	80093a0 <UART_SetConfig+0x254>
 800938e:	2308      	movs	r3, #8
 8009390:	76fb      	strb	r3, [r7, #27]
 8009392:	e005      	b.n	80093a0 <UART_SetConfig+0x254>
 8009394:	2310      	movs	r3, #16
 8009396:	76fb      	strb	r3, [r7, #27]
 8009398:	bf00      	nop
 800939a:	e001      	b.n	80093a0 <UART_SetConfig+0x254>
 800939c:	2310      	movs	r3, #16
 800939e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a28      	ldr	r2, [pc, #160]	; (8009448 <UART_SetConfig+0x2fc>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	f040 80a1 	bne.w	80094ee <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093ac:	7efb      	ldrb	r3, [r7, #27]
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d823      	bhi.n	80093fa <UART_SetConfig+0x2ae>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <UART_SetConfig+0x26c>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093dd 	.word	0x080093dd
 80093bc:	080093fb 	.word	0x080093fb
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080093fb 	.word	0x080093fb
 80093c8:	080093eb 	.word	0x080093eb
 80093cc:	080093fb 	.word	0x080093fb
 80093d0:	080093fb 	.word	0x080093fb
 80093d4:	080093fb 	.word	0x080093fb
 80093d8:	080093f3 	.word	0x080093f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093dc:	f7fd fe58 	bl	8007090 <HAL_RCC_GetPCLK1Freq>
 80093e0:	6178      	str	r0, [r7, #20]
        break;
 80093e2:	e00f      	b.n	8009404 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093e4:	4b1e      	ldr	r3, [pc, #120]	; (8009460 <UART_SetConfig+0x314>)
 80093e6:	617b      	str	r3, [r7, #20]
        break;
 80093e8:	e00c      	b.n	8009404 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093ea:	f7fd fde3 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 80093ee:	6178      	str	r0, [r7, #20]
        break;
 80093f0:	e008      	b.n	8009404 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f6:	617b      	str	r3, [r7, #20]
        break;
 80093f8:	e004      	b.n	8009404 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	76bb      	strb	r3, [r7, #26]
        break;
 8009402:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 8130 	beq.w	800966c <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	4a14      	ldr	r2, [pc, #80]	; (8009464 <UART_SetConfig+0x318>)
 8009412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009416:	461a      	mov	r2, r3
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	fbb3 f3f2 	udiv	r3, r3, r2
 800941e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	4613      	mov	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	4413      	add	r3, r2
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	429a      	cmp	r2, r3
 800942e:	d305      	bcc.n	800943c <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	429a      	cmp	r2, r3
 800943a:	d915      	bls.n	8009468 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	76bb      	strb	r3, [r7, #26]
 8009440:	e114      	b.n	800966c <UART_SetConfig+0x520>
 8009442:	bf00      	nop
 8009444:	cfff69f3 	.word	0xcfff69f3
 8009448:	40008000 	.word	0x40008000
 800944c:	40013800 	.word	0x40013800
 8009450:	40021000 	.word	0x40021000
 8009454:	40004400 	.word	0x40004400
 8009458:	40004800 	.word	0x40004800
 800945c:	40004c00 	.word	0x40004c00
 8009460:	00f42400 	.word	0x00f42400
 8009464:	0800a0f0 	.word	0x0800a0f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	4618      	mov	r0, r3
 800946c:	f04f 0100 	mov.w	r1, #0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	4a87      	ldr	r2, [pc, #540]	; (8009694 <UART_SetConfig+0x548>)
 8009476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800947a:	b29b      	uxth	r3, r3
 800947c:	f04f 0400 	mov.w	r4, #0
 8009480:	461a      	mov	r2, r3
 8009482:	4623      	mov	r3, r4
 8009484:	f7f6 fec8 	bl	8000218 <__aeabi_uldivmod>
 8009488:	4603      	mov	r3, r0
 800948a:	460c      	mov	r4, r1
 800948c:	4619      	mov	r1, r3
 800948e:	4622      	mov	r2, r4
 8009490:	f04f 0300 	mov.w	r3, #0
 8009494:	f04f 0400 	mov.w	r4, #0
 8009498:	0214      	lsls	r4, r2, #8
 800949a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800949e:	020b      	lsls	r3, r1, #8
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6852      	ldr	r2, [r2, #4]
 80094a4:	0852      	lsrs	r2, r2, #1
 80094a6:	4611      	mov	r1, r2
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	eb13 0b01 	adds.w	fp, r3, r1
 80094b0:	eb44 0c02 	adc.w	ip, r4, r2
 80094b4:	4658      	mov	r0, fp
 80094b6:	4661      	mov	r1, ip
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f04f 0400 	mov.w	r4, #0
 80094c0:	461a      	mov	r2, r3
 80094c2:	4623      	mov	r3, r4
 80094c4:	f7f6 fea8 	bl	8000218 <__aeabi_uldivmod>
 80094c8:	4603      	mov	r3, r0
 80094ca:	460c      	mov	r4, r1
 80094cc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094d4:	d308      	bcc.n	80094e8 <UART_SetConfig+0x39c>
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094dc:	d204      	bcs.n	80094e8 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	60da      	str	r2, [r3, #12]
 80094e6:	e0c1      	b.n	800966c <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	76bb      	strb	r3, [r7, #26]
 80094ec:	e0be      	b.n	800966c <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094f6:	d164      	bne.n	80095c2 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80094f8:	7efb      	ldrb	r3, [r7, #27]
 80094fa:	2b08      	cmp	r3, #8
 80094fc:	d827      	bhi.n	800954e <UART_SetConfig+0x402>
 80094fe:	a201      	add	r2, pc, #4	; (adr r2, 8009504 <UART_SetConfig+0x3b8>)
 8009500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009504:	08009529 	.word	0x08009529
 8009508:	08009531 	.word	0x08009531
 800950c:	08009539 	.word	0x08009539
 8009510:	0800954f 	.word	0x0800954f
 8009514:	0800953f 	.word	0x0800953f
 8009518:	0800954f 	.word	0x0800954f
 800951c:	0800954f 	.word	0x0800954f
 8009520:	0800954f 	.word	0x0800954f
 8009524:	08009547 	.word	0x08009547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009528:	f7fd fdb2 	bl	8007090 <HAL_RCC_GetPCLK1Freq>
 800952c:	6178      	str	r0, [r7, #20]
        break;
 800952e:	e013      	b.n	8009558 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009530:	f7fd fdc4 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 8009534:	6178      	str	r0, [r7, #20]
        break;
 8009536:	e00f      	b.n	8009558 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009538:	4b57      	ldr	r3, [pc, #348]	; (8009698 <UART_SetConfig+0x54c>)
 800953a:	617b      	str	r3, [r7, #20]
        break;
 800953c:	e00c      	b.n	8009558 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800953e:	f7fd fd39 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8009542:	6178      	str	r0, [r7, #20]
        break;
 8009544:	e008      	b.n	8009558 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800954a:	617b      	str	r3, [r7, #20]
        break;
 800954c:	e004      	b.n	8009558 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	76bb      	strb	r3, [r7, #26]
        break;
 8009556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 8086 	beq.w	800966c <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	4a4b      	ldr	r2, [pc, #300]	; (8009694 <UART_SetConfig+0x548>)
 8009566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800956a:	461a      	mov	r2, r3
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009572:	005a      	lsls	r2, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	085b      	lsrs	r3, r3, #1
 800957a:	441a      	add	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	fbb2 f3f3 	udiv	r3, r2, r3
 8009584:	b29b      	uxth	r3, r3
 8009586:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b0f      	cmp	r3, #15
 800958c:	d916      	bls.n	80095bc <UART_SetConfig+0x470>
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009594:	d212      	bcs.n	80095bc <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	b29b      	uxth	r3, r3
 800959a:	f023 030f 	bic.w	r3, r3, #15
 800959e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	89fb      	ldrh	r3, [r7, #14]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	89fa      	ldrh	r2, [r7, #14]
 80095b8:	60da      	str	r2, [r3, #12]
 80095ba:	e057      	b.n	800966c <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	76bb      	strb	r3, [r7, #26]
 80095c0:	e054      	b.n	800966c <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095c2:	7efb      	ldrb	r3, [r7, #27]
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d828      	bhi.n	800961a <UART_SetConfig+0x4ce>
 80095c8:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <UART_SetConfig+0x484>)
 80095ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ce:	bf00      	nop
 80095d0:	080095f5 	.word	0x080095f5
 80095d4:	080095fd 	.word	0x080095fd
 80095d8:	08009605 	.word	0x08009605
 80095dc:	0800961b 	.word	0x0800961b
 80095e0:	0800960b 	.word	0x0800960b
 80095e4:	0800961b 	.word	0x0800961b
 80095e8:	0800961b 	.word	0x0800961b
 80095ec:	0800961b 	.word	0x0800961b
 80095f0:	08009613 	.word	0x08009613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095f4:	f7fd fd4c 	bl	8007090 <HAL_RCC_GetPCLK1Freq>
 80095f8:	6178      	str	r0, [r7, #20]
        break;
 80095fa:	e013      	b.n	8009624 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095fc:	f7fd fd5e 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 8009600:	6178      	str	r0, [r7, #20]
        break;
 8009602:	e00f      	b.n	8009624 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009604:	4b24      	ldr	r3, [pc, #144]	; (8009698 <UART_SetConfig+0x54c>)
 8009606:	617b      	str	r3, [r7, #20]
        break;
 8009608:	e00c      	b.n	8009624 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800960a:	f7fd fcd3 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 800960e:	6178      	str	r0, [r7, #20]
        break;
 8009610:	e008      	b.n	8009624 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009616:	617b      	str	r3, [r7, #20]
        break;
 8009618:	e004      	b.n	8009624 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	76bb      	strb	r3, [r7, #26]
        break;
 8009622:	bf00      	nop
    }

    if (pclk != 0U)
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d020      	beq.n	800966c <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	4a19      	ldr	r2, [pc, #100]	; (8009694 <UART_SetConfig+0x548>)
 8009630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009634:	461a      	mov	r2, r3
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	fbb3 f2f2 	udiv	r2, r3, r2
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	085b      	lsrs	r3, r3, #1
 8009642:	441a      	add	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	fbb2 f3f3 	udiv	r3, r2, r3
 800964c:	b29b      	uxth	r3, r3
 800964e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2b0f      	cmp	r3, #15
 8009654:	d908      	bls.n	8009668 <UART_SetConfig+0x51c>
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800965c:	d204      	bcs.n	8009668 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	60da      	str	r2, [r3, #12]
 8009666:	e001      	b.n	800966c <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009688:	7ebb      	ldrb	r3, [r7, #26]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3720      	adds	r7, #32
 800968e:	46bd      	mov	sp, r7
 8009690:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009694:	0800a0f0 	.word	0x0800a0f0
 8009698:	00f42400 	.word	0x00f42400

0800969c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ca:	f003 0302 	and.w	r3, r3, #2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	430a      	orrs	r2, r1
 80096e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009730:	f003 0310 	and.w	r3, r3, #16
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01a      	beq.n	80097b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800979a:	d10a      	bne.n	80097b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	605a      	str	r2, [r3, #4]
  }
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097f0:	f7fa f8fc 	bl	80039ec <HAL_GetTick>
 80097f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0308 	and.w	r3, r3, #8
 8009800:	2b08      	cmp	r3, #8
 8009802:	d10e      	bne.n	8009822 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f82c 	bl	8009870 <UART_WaitOnFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e022      	b.n	8009868 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0304 	and.w	r3, r3, #4
 800982c:	2b04      	cmp	r3, #4
 800982e:	d10e      	bne.n	800984e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f816 	bl	8009870 <UART_WaitOnFlagUntilTimeout>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e00c      	b.n	8009868 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2220      	movs	r2, #32
 800985a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	4613      	mov	r3, r2
 800987e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009880:	e062      	b.n	8009948 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009888:	d05e      	beq.n	8009948 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800988a:	f7fa f8af 	bl	80039ec <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	429a      	cmp	r2, r3
 8009898:	d302      	bcc.n	80098a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d11d      	bne.n	80098dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2220      	movs	r2, #32
 80098c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2220      	movs	r2, #32
 80098cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e045      	b.n	8009968 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d02e      	beq.n	8009948 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f8:	d126      	bne.n	8009948 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009902:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009912:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 0201 	bic.w	r2, r2, #1
 8009922:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2220      	movs	r2, #32
 8009928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2220      	movs	r2, #32
 8009930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e00f      	b.n	8009968 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69da      	ldr	r2, [r3, #28]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4013      	ands	r3, r2
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	429a      	cmp	r2, r3
 8009956:	bf0c      	ite	eq
 8009958:	2301      	moveq	r3, #1
 800995a:	2300      	movne	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	461a      	mov	r2, r3
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	429a      	cmp	r2, r3
 8009964:	d08d      	beq.n	8009882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009986:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009996:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	6812      	ldr	r2, [r2, #0]
 80099ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099d2:	f023 0301 	bic.w	r3, r3, #1
 80099d6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fe:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d114      	bne.n	8009a38 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a24:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a34:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a36:	e002      	b.n	8009a3e <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7f9 fbc5 	bl	80031c8 <HAL_UART_TxCpltCallback>
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f7ff fb5b 	bl	8009110 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a5a:	bf00      	nop
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0320 	and.w	r3, r3, #32
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d11f      	bne.n	8009abe <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a94:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0201 	bic.w	r2, r2, #1
 8009aa4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ab4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff fb30 	bl	8009124 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ac4:	bf00      	nop
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff fb2c 	bl	8009138 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ae0:	bf00      	nop
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009afc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b04:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b10:	2b80      	cmp	r3, #128	; 0x80
 8009b12:	d109      	bne.n	8009b28 <UART_DMAError+0x40>
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2b21      	cmp	r3, #33	; 0x21
 8009b18:	d106      	bne.n	8009b28 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009b22:	6978      	ldr	r0, [r7, #20]
 8009b24:	f7ff ff24 	bl	8009970 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b32:	2b40      	cmp	r3, #64	; 0x40
 8009b34:	d109      	bne.n	8009b4a <UART_DMAError+0x62>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b22      	cmp	r3, #34	; 0x22
 8009b3a:	d106      	bne.n	8009b4a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009b44:	6978      	ldr	r0, [r7, #20]
 8009b46:	f7ff ff31 	bl	80099ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b50:	f043 0210 	orr.w	r2, r3, #16
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b5a:	6978      	ldr	r0, [r7, #20]
 8009b5c:	f7f9 f926 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7f9 f910 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009baa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7f9 fb04 	bl	80031c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d101      	bne.n	8009c1a <HAL_UARTEx_DisableFifoMode+0x16>
 8009c16:	2302      	movs	r3, #2
 8009c18:	e027      	b.n	8009c6a <HAL_UARTEx_DisableFifoMode+0x66>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2224      	movs	r2, #36	; 0x24
 8009c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f022 0201 	bic.w	r2, r2, #1
 8009c40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e02d      	b.n	8009cea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2224      	movs	r2, #36	; 0x24
 8009c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f850 	bl	8009d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2220      	movs	r2, #32
 8009cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d101      	bne.n	8009d0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d06:	2302      	movs	r3, #2
 8009d08:	e02d      	b.n	8009d66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2224      	movs	r2, #36	; 0x24
 8009d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0201 	bic.w	r2, r2, #1
 8009d30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f812 	bl	8009d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2220      	movs	r2, #32
 8009d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b089      	sub	sp, #36	; 0x24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009d78:	4a2f      	ldr	r2, [pc, #188]	; (8009e38 <UARTEx_SetNbDataToProcess+0xc8>)
 8009d7a:	f107 0314 	add.w	r3, r7, #20
 8009d7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d82:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009d86:	4a2d      	ldr	r2, [pc, #180]	; (8009e3c <UARTEx_SetNbDataToProcess+0xcc>)
 8009d88:	f107 030c 	add.w	r3, r7, #12
 8009d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d90:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d108      	bne.n	8009dae <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009dac:	e03d      	b.n	8009e2a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dae:	2308      	movs	r3, #8
 8009db0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009db2:	2308      	movs	r3, #8
 8009db4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	0e5b      	lsrs	r3, r3, #25
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	0f5b      	lsrs	r3, r3, #29
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f003 0307 	and.w	r3, r3, #7
 8009dd4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dd6:	7fbb      	ldrb	r3, [r7, #30]
 8009dd8:	7f3a      	ldrb	r2, [r7, #28]
 8009dda:	f107 0120 	add.w	r1, r7, #32
 8009dde:	440a      	add	r2, r1
 8009de0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009de4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009de8:	7f3a      	ldrb	r2, [r7, #28]
 8009dea:	f107 0120 	add.w	r1, r7, #32
 8009dee:	440a      	add	r2, r1
 8009df0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e00:	7ffb      	ldrb	r3, [r7, #31]
 8009e02:	7f7a      	ldrb	r2, [r7, #29]
 8009e04:	f107 0120 	add.w	r1, r7, #32
 8009e08:	440a      	add	r2, r1
 8009e0a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009e0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e12:	7f7a      	ldrb	r2, [r7, #29]
 8009e14:	f107 0120 	add.w	r1, r7, #32
 8009e18:	440a      	add	r2, r1
 8009e1a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e2a:	bf00      	nop
 8009e2c:	3724      	adds	r7, #36	; 0x24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	08009ec8 	.word	0x08009ec8
 8009e3c:	08009ed0 	.word	0x08009ed0

08009e40 <__libc_init_array>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	4e0d      	ldr	r6, [pc, #52]	; (8009e78 <__libc_init_array+0x38>)
 8009e44:	4c0d      	ldr	r4, [pc, #52]	; (8009e7c <__libc_init_array+0x3c>)
 8009e46:	1ba4      	subs	r4, r4, r6
 8009e48:	10a4      	asrs	r4, r4, #2
 8009e4a:	2500      	movs	r5, #0
 8009e4c:	42a5      	cmp	r5, r4
 8009e4e:	d109      	bne.n	8009e64 <__libc_init_array+0x24>
 8009e50:	4e0b      	ldr	r6, [pc, #44]	; (8009e80 <__libc_init_array+0x40>)
 8009e52:	4c0c      	ldr	r4, [pc, #48]	; (8009e84 <__libc_init_array+0x44>)
 8009e54:	f000 f82c 	bl	8009eb0 <_init>
 8009e58:	1ba4      	subs	r4, r4, r6
 8009e5a:	10a4      	asrs	r4, r4, #2
 8009e5c:	2500      	movs	r5, #0
 8009e5e:	42a5      	cmp	r5, r4
 8009e60:	d105      	bne.n	8009e6e <__libc_init_array+0x2e>
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e68:	4798      	blx	r3
 8009e6a:	3501      	adds	r5, #1
 8009e6c:	e7ee      	b.n	8009e4c <__libc_init_array+0xc>
 8009e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e72:	4798      	blx	r3
 8009e74:	3501      	adds	r5, #1
 8009e76:	e7f2      	b.n	8009e5e <__libc_init_array+0x1e>
 8009e78:	0800a110 	.word	0x0800a110
 8009e7c:	0800a110 	.word	0x0800a110
 8009e80:	0800a110 	.word	0x0800a110
 8009e84:	0800a114 	.word	0x0800a114

08009e88 <memcpy>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	1e43      	subs	r3, r0, #1
 8009e8c:	440a      	add	r2, r1
 8009e8e:	4291      	cmp	r1, r2
 8009e90:	d100      	bne.n	8009e94 <memcpy+0xc>
 8009e92:	bd10      	pop	{r4, pc}
 8009e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e9c:	e7f7      	b.n	8009e8e <memcpy+0x6>

08009e9e <memset>:
 8009e9e:	4402      	add	r2, r0
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d100      	bne.n	8009ea8 <memset+0xa>
 8009ea6:	4770      	bx	lr
 8009ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8009eac:	e7f9      	b.n	8009ea2 <memset+0x4>
	...

08009eb0 <_init>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	bf00      	nop
 8009eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb6:	bc08      	pop	{r3}
 8009eb8:	469e      	mov	lr, r3
 8009eba:	4770      	bx	lr

08009ebc <_fini>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr
