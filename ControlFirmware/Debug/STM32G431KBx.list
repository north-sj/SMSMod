
STM32G431KBx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1cc  0800a1cc  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1d4  0800a1d4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d4  0800a1d4  0001a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800a1dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003568  20000034  0800a210  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000359c  0800a210  0002359c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d908  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a1f  00000000  00000000  0003d96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001830  00000000  00000000  00041390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  00042bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002265e  00000000  00000000  00044228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001563c  00000000  00000000  00066886  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddc5c  00000000  00000000  0007bec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006628  00000000  00000000  00159b9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009f74 	.word	0x08009f74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	08009f74 	.word	0x08009f74

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <scale_all_sensors>:
static float present_velocity_dps = 0.0f;
static float last_present_position_deg = 0.0f;
static float last_setpoint_velocity_dps = 0.0f;

void scale_all_sensors()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
	// scale motor current sense (unit:mA) and estimated average motor current with sign (using PWM ratio and setpoint PWM sign)
	float const a = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_A_L],regs[REG_CAL_CURRENT_SENSE_A_H]));
 800051e:	4b4a      	ldr	r3, [pc, #296]	; (8000648 <scale_all_sensors+0x130>)
 8000520:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	4a48      	ldr	r2, [pc, #288]	; (8000648 <scale_all_sensors+0x130>)
 8000528:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800052c:	4313      	orrs	r3, r2
 800052e:	ee07 3a90 	vmov	s15, r3
 8000532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000536:	edc7 7a03 	vstr	s15, [r7, #12]
	present_motor_current_ma = (motor_current_input_adc-motor_current_input_adc_offset)/a*1000.0f*pwm_sign*pwm_ratio;
 800053a:	4b44      	ldr	r3, [pc, #272]	; (800064c <scale_all_sensors+0x134>)
 800053c:	ed93 7a00 	vldr	s14, [r3]
 8000540:	4b43      	ldr	r3, [pc, #268]	; (8000650 <scale_all_sensors+0x138>)
 8000542:	edd3 7a00 	vldr	s15, [r3]
 8000546:	ee77 6a67 	vsub.f32	s13, s14, s15
 800054a:	ed97 7a03 	vldr	s14, [r7, #12]
 800054e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000552:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000654 <scale_all_sensors+0x13c>
 8000556:	ee27 7a87 	vmul.f32	s14, s15, s14
 800055a:	4b3f      	ldr	r3, [pc, #252]	; (8000658 <scale_all_sensors+0x140>)
 800055c:	edd3 7a00 	vldr	s15, [r3]
 8000560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000564:	4b3d      	ldr	r3, [pc, #244]	; (800065c <scale_all_sensors+0x144>)
 8000566:	edd3 7a00 	vldr	s15, [r3]
 800056a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800056e:	4b3c      	ldr	r3, [pc, #240]	; (8000660 <scale_all_sensors+0x148>)
 8000570:	edc3 7a00 	vstr	s15, [r3]

	// scale position (unit:degrees)
	float const min_position_adc = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_ADC_L],regs[REG_MIN_POSITION_ADC_H]));
 8000574:	4b34      	ldr	r3, [pc, #208]	; (8000648 <scale_all_sensors+0x130>)
 8000576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	4a32      	ldr	r2, [pc, #200]	; (8000648 <scale_all_sensors+0x130>)
 800057e:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8000582:	4313      	orrs	r3, r2
 8000584:	ee07 3a90 	vmov	s15, r3
 8000588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800058c:	edc7 7a02 	vstr	s15, [r7, #8]
	float const max_position_adc = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_ADC_L],regs[REG_MAX_POSITION_ADC_H]));
 8000590:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <scale_all_sensors+0x130>)
 8000592:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <scale_all_sensors+0x130>)
 800059a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800059e:	4313      	orrs	r3, r2
 80005a0:	ee07 3a90 	vmov	s15, r3
 80005a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a8:	edc7 7a01 	vstr	s15, [r7, #4]
	float const max_rotation_deg = (float)(regs[REG_MAX_ROTATION_DEG]);
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <scale_all_sensors+0x130>)
 80005ae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80005b2:	ee07 3a90 	vmov	s15, r3
 80005b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ba:	edc7 7a00 	vstr	s15, [r7]
	present_position_deg = fmap(position_input_adc,min_position_adc,max_position_adc,0.0f,max_rotation_deg);
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <scale_all_sensors+0x14c>)
 80005c0:	edd3 7a00 	vldr	s15, [r3]
 80005c4:	ed97 2a00 	vldr	s4, [r7]
 80005c8:	eddf 1a27 	vldr	s3, [pc, #156]	; 8000668 <scale_all_sensors+0x150>
 80005cc:	ed97 1a01 	vldr	s2, [r7, #4]
 80005d0:	edd7 0a02 	vldr	s1, [r7, #8]
 80005d4:	eeb0 0a67 	vmov.f32	s0, s15
 80005d8:	f001 ff89 	bl	80024ee <fmap>
 80005dc:	eef0 7a40 	vmov.f32	s15, s0
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <scale_all_sensors+0x154>)
 80005e2:	edc3 7a00 	vstr	s15, [r3]
	// potentiometer leads maybe inverted, user can reverse polarity of potentiometer (EEPROM parameter)
	if(regs[REG_INV_ROTATION_SENSOR] > 0)
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <scale_all_sensors+0x130>)
 80005e8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d009      	beq.n	8000604 <scale_all_sensors+0xec>
		present_position_deg =  max_rotation_deg-present_position_deg;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <scale_all_sensors+0x154>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ed97 7a00 	vldr	s14, [r7]
 80005fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <scale_all_sensors+0x154>)
 8000600:	edc3 7a00 	vstr	s15, [r3]

	// scale voltage (unit:0.1V)
	present_voltage_0v1 = voltage_input_adc/4096.0f*3.3f*24.2f/2.2f*10.0f*VOLTAGE_CALIBRATION;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <scale_all_sensors+0x158>)
 8000606:	ed93 7a00 	vldr	s14, [r3]
 800060a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000674 <scale_all_sensors+0x15c>
 800060e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000612:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000678 <scale_all_sensors+0x160>
 8000616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800061a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800067c <scale_all_sensors+0x164>
 800061e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000622:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000680 <scale_all_sensors+0x168>
 8000626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800062a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800062e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000632:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000684 <scale_all_sensors+0x16c>
 8000636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <scale_all_sensors+0x170>)
 800063c:	edc3 7a00 	vstr	s15, [r3]
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000e8 	.word	0x200000e8
 800064c:	20000058 	.word	0x20000058
 8000650:	20000064 	.word	0x20000064
 8000654:	447a0000 	.word	0x447a0000
 8000658:	20000068 	.word	0x20000068
 800065c:	2000006c 	.word	0x2000006c
 8000660:	20000070 	.word	0x20000070
 8000664:	2000005c 	.word	0x2000005c
 8000668:	00000000 	.word	0x00000000
 800066c:	20000074 	.word	0x20000074
 8000670:	20000060 	.word	0x20000060
 8000674:	45800000 	.word	0x45800000
 8000678:	40533333 	.word	0x40533333
 800067c:	41c1999a 	.word	0x41c1999a
 8000680:	400ccccd 	.word	0x400ccccd
 8000684:	3f8a3d71 	.word	0x3f8a3d71
 8000688:	20000078 	.word	0x20000078

0800068c <APP_Control_Reset>:

// called once after SW REBBOT or HW RESET, and every time entering a new control loop mode
void APP_Control_Reset()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	// reset
	entering_state = true;
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <APP_Control_Reset+0x9c>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
	counter = 0;
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <APP_Control_Reset+0xa0>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
	pid_reset(&pid_position);
 800069c:	4824      	ldr	r0, [pc, #144]	; (8000730 <APP_Control_Reset+0xa4>)
 800069e:	f001 ff6c 	bl	800257a <pid_reset>
	pid_reset(&pid_current);
 80006a2:	4824      	ldr	r0, [pc, #144]	; (8000734 <APP_Control_Reset+0xa8>)
 80006a4:	f001 ff69 	bl	800257a <pid_reset>
	setpoint_pwm = 0.0f;
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <APP_Control_Reset+0xac>)
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
	setpoint_current_ma = 0.0f;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <APP_Control_Reset+0xb0>)
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
	setpoint_acceleration_dpss = 0.0f;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <APP_Control_Reset+0xb4>)
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
	setpoint_velocity_dps = 0.0f;
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <APP_Control_Reset+0xb8>)
 80006c2:	f04f 0200 	mov.w	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
	last_setpoint_velocity_dps = 0.0f;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <APP_Control_Reset+0xbc>)
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	setpoint_position_deg = present_position_deg;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <APP_Control_Reset+0xc0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <APP_Control_Reset+0xc4>)
 80006d6:	6013      	str	r3, [r2, #0]
	last_present_position_deg = present_position_deg;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <APP_Control_Reset+0xc0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <APP_Control_Reset+0xc8>)
 80006de:	6013      	str	r3, [r2, #0]
	// when re-entering in the control mode 'position', avoid glitch from past goal position
	regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <APP_Control_Reset+0xc0>)
 80006e2:	edd3 7a00 	vldr	s15, [r3]
 80006e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80006ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f2:	ee17 3a90 	vmov	r3, s15
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <APP_Control_Reset+0xcc>)
 80006fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <APP_Control_Reset+0xc0>)
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800070a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800070e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000712:	ee17 3a90 	vmov	r3, s15
 8000716:	b21b      	sxth	r3, r3
 8000718:	121b      	asrs	r3, r3, #8
 800071a:	b21b      	sxth	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <APP_Control_Reset+0xcc>)
 8000720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	20000090 	.word	0x20000090
 8000730:	20000094 	.word	0x20000094
 8000734:	200000a0 	.word	0x200000a0
 8000738:	2000007c 	.word	0x2000007c
 800073c:	20000080 	.word	0x20000080
 8000740:	20000084 	.word	0x20000084
 8000744:	20000088 	.word	0x20000088
 8000748:	200000b4 	.word	0x200000b4
 800074c:	20000074 	.word	0x20000074
 8000750:	2000008c 	.word	0x2000008c
 8000754:	200000b0 	.word	0x200000b0
 8000758:	200000e8 	.word	0x200000e8

0800075c <APP_Control_Init>:

// called once after SW REBOOT or HW RESET
void APP_Control_Init()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	// reset (EWMA) filtered sensor inputs
	motor_current_input_adc = 0.0f;
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <APP_Control_Init+0x8c>)
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
	position_input_adc = 0.0f; // NOTE : init by zero will delay the present position estimation by 1 ms at least
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <APP_Control_Init+0x90>)
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
	voltage_input_adc = 0.0f; // NOTE : init by zero will delay the present voltage estimation by 1 ms at least
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <APP_Control_Init+0x94>)
 8000772:	f04f 0200 	mov.w	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	motor_current_input_adc_offset = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_B_L],regs[REG_CAL_CURRENT_SENSE_B_H]));
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <APP_Control_Init+0x98>)
 800077a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <APP_Control_Init+0x98>)
 8000782:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8000786:	4313      	orrs	r3, r2
 8000788:	ee07 3a90 	vmov	s15, r3
 800078c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <APP_Control_Init+0x9c>)
 8000792:	edc3 7a00 	vstr	s15, [r3]

	// force motor in coast
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_COAST);
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <APP_Control_Init+0xa0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_COAST);
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <APP_Control_Init+0xa0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2200      	movs	r2, #0
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38
	// start motor PWM generation
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_1);
 80007a6:	2100      	movs	r1, #0
 80007a8:	4814      	ldr	r0, [pc, #80]	; (80007fc <APP_Control_Init+0xa0>)
 80007aa:	f007 f851 	bl	8007850 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_2);
 80007ae:	2104      	movs	r1, #4
 80007b0:	4812      	ldr	r0, [pc, #72]	; (80007fc <APP_Control_Init+0xa0>)
 80007b2:	f007 f84d 	bl	8007850 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start(&htim15);
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <APP_Control_Init+0xa4>)
 80007b8:	f006 ff86 	bl	80076c8 <HAL_TIM_Base_Start>
	// start OP AMP
	HAL_OPAMP_Start(&hopamp1);
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <APP_Control_Init+0xa8>)
 80007be:	f005 ff21 	bl	8006604 <HAL_OPAMP_Start>
	// start ADC
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 80007c2:	2203      	movs	r2, #3
 80007c4:	4910      	ldr	r1, [pc, #64]	; (8000808 <APP_Control_Init+0xac>)
 80007c6:	4811      	ldr	r0, [pc, #68]	; (800080c <APP_Control_Init+0xb0>)
 80007c8:	f003 fd68 	bl	800429c <HAL_ADC_Start_DMA>

	// 2ms delay for filtered sensor inputs to stabilize
	HAL_Delay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f003 f97b 	bl	8003ac8 <HAL_Delay>
	scale_all_sensors();
 80007d2:	f7ff fea1 	bl	8000518 <scale_all_sensors>
	HAL_Delay(1);
 80007d6:	2001      	movs	r0, #1
 80007d8:	f003 f976 	bl	8003ac8 <HAL_Delay>
	scale_all_sensors();
 80007dc:	f7ff fe9c 	bl	8000518 <scale_all_sensors>

	// reset all state control loop variables
	APP_Control_Reset();
 80007e0:	f7ff ff54 	bl	800068c <APP_Control_Reset>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000058 	.word	0x20000058
 80007ec:	2000005c 	.word	0x2000005c
 80007f0:	20000060 	.word	0x20000060
 80007f4:	200000e8 	.word	0x200000e8
 80007f8:	20000064 	.word	0x20000064
 80007fc:	200001cc 	.word	0x200001cc
 8000800:	20000218 	.word	0x20000218
 8000804:	20000264 	.word	0x20000264
 8000808:	20000050 	.word	0x20000050
 800080c:	200002a0 	.word	0x200002a0

08000810 <APP_Control_Process>:

// called from main loop
void APP_Control_Process()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0a6      	sub	sp, #152	; 0x98
 8000814:	af00      	add	r7, sp, #0
	// apply 1ms period
	uint16_t current_time_us = __HAL_TIM_GET_COUNTER(&htim15);
 8000816:	4bb5      	ldr	r3, [pc, #724]	; (8000aec <APP_Control_Process+0x2dc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	if(current_time_us<period_us)
 8000820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000824:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000828:	4293      	cmp	r3, r2
 800082a:	f0c0 86cc 	bcc.w	80015c6 <APP_Control_Process+0xdb6>
		return;
	__HAL_TIM_SET_COUNTER(&htim15,(current_time_us-period_us));
 800082e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000836:	1a9a      	subs	r2, r3, r2
 8000838:	4bac      	ldr	r3, [pc, #688]	; (8000aec <APP_Control_Process+0x2dc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	625a      	str	r2, [r3, #36]	; 0x24

	// acquire motor current, position and voltage (see ADC DMA completed conversion callback)

	// scale sensor at process rate
	scale_all_sensors();
 800083e:	f7ff fe6b 	bl	8000518 <scale_all_sensors>

	// compute velocity from position (derivative), and filter velocity (EWMA)
	float present_speed_dps_unfiltered = (present_position_deg - last_present_position_deg)*LOOP_FREQUENCY_HZ;
 8000842:	4bab      	ldr	r3, [pc, #684]	; (8000af0 <APP_Control_Process+0x2e0>)
 8000844:	ed93 7a00 	vldr	s14, [r3]
 8000848:	4baa      	ldr	r3, [pc, #680]	; (8000af4 <APP_Control_Process+0x2e4>)
 800084a:	edd3 7a00 	vldr	s15, [r3]
 800084e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000852:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8000af8 <APP_Control_Process+0x2e8>
 8000856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800085a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	last_present_position_deg =  present_position_deg;
 800085e:	4ba4      	ldr	r3, [pc, #656]	; (8000af0 <APP_Control_Process+0x2e0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4aa4      	ldr	r2, [pc, #656]	; (8000af4 <APP_Control_Process+0x2e4>)
 8000864:	6013      	str	r3, [r2, #0]
	present_velocity_dps = ALPHA_VELOCITY * present_speed_dps_unfiltered + (1.0f-ALPHA_VELOCITY)*present_velocity_dps;
 8000866:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800086a:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8000afc <APP_Control_Process+0x2ec>
 800086e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000872:	4ba3      	ldr	r3, [pc, #652]	; (8000b00 <APP_Control_Process+0x2f0>)
 8000874:	edd3 7a00 	vldr	s15, [r3]
 8000878:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8000b04 <APP_Control_Process+0x2f4>
 800087c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000884:	4b9e      	ldr	r3, [pc, #632]	; (8000b00 <APP_Control_Process+0x2f0>)
 8000886:	edc3 7a00 	vstr	s15, [r3]

	// torque enable logic
	bool torque_enable = (regs[REG_TORQUE_ENABLE]!=0) && (regs[REG_HARDWARE_ERROR_STATUS]==0);
 800088a:	4b9f      	ldr	r3, [pc, #636]	; (8000b08 <APP_Control_Process+0x2f8>)
 800088c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000890:	2b00      	cmp	r3, #0
 8000892:	d006      	beq.n	80008a2 <APP_Control_Process+0x92>
 8000894:	4b9c      	ldr	r3, [pc, #624]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000896:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <APP_Control_Process+0x92>
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <APP_Control_Process+0x94>
 80008a2:	2300      	movs	r3, #0
 80008a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80008a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if(torque_enable)
 80008b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f000 84f1 	beq.w	80012a0 <APP_Control_Process+0xa90>
	{
		// modes & transitions
		// compute setpoint_pwm
		switch(current_control_mode)
 80008be:	4b93      	ldr	r3, [pc, #588]	; (8000b0c <APP_Control_Process+0x2fc>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	f200 84ae 	bhi.w	8001224 <APP_Control_Process+0xa14>
 80008c8:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <APP_Control_Process+0xc0>)
 80008ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ce:	bf00      	nop
 80008d0:	080008e5 	.word	0x080008e5
 80008d4:	08000b31 	.word	0x08000b31
 80008d8:	08000e65 	.word	0x08000e65
 80008dc:	08000f21 	.word	0x08000f21
 80008e0:	08001119 	.word	0x08001119
		{
		// Simple PID from position to pwm
		// Mg92 Kp = 400 Ki = 20 Kd = 400
		case REG_CONTROL_MODE_POSITION:
			if(entering_state)
 80008e4:	4b8a      	ldr	r3, [pc, #552]	; (8000b10 <APP_Control_Process+0x300>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d042      	beq.n	8000972 <APP_Control_Process+0x162>
			{
				entering_state = false;
 80008ec:	4b88      	ldr	r3, [pc, #544]	; (8000b10 <APP_Control_Process+0x300>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 80008f2:	4b7f      	ldr	r3, [pc, #508]	; (8000af0 <APP_Control_Process+0x2e0>)
 80008f4:	edd3 7a00 	vldr	s15, [r3]
 80008f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80008fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000904:	ee17 3a90 	vmov	r3, s15
 8000908:	b21b      	sxth	r3, r3
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b7e      	ldr	r3, [pc, #504]	; (8000b08 <APP_Control_Process+0x2f8>)
 800090e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000912:	4b77      	ldr	r3, [pc, #476]	; (8000af0 <APP_Control_Process+0x2e0>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800091c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000924:	ee17 3a90 	vmov	r3, s15
 8000928:	b21b      	sxth	r3, r3
 800092a:	121b      	asrs	r3, r3, #8
 800092c:	b21b      	sxth	r3, r3
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b75      	ldr	r3, [pc, #468]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000936:	4b74      	ldr	r3, [pc, #464]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000938:	7e9a      	ldrb	r2, [r3, #26]
 800093a:	4b73      	ldr	r3, [pc, #460]	; (8000b08 <APP_Control_Process+0x2f8>)
 800093c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000940:	4b71      	ldr	r3, [pc, #452]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000942:	7eda      	ldrb	r2, [r3, #27]
 8000944:	4b70      	ldr	r3, [pc, #448]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000946:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 800094a:	4b6f      	ldr	r3, [pc, #444]	; (8000b08 <APP_Control_Process+0x2f8>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8000952:	4b6d      	ldr	r3, [pc, #436]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 800095a:	4b6b      	ldr	r3, [pc, #428]	; (8000b08 <APP_Control_Process+0x2f8>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8000962:	4b69      	ldr	r3, [pc, #420]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 800096a:	4b61      	ldr	r3, [pc, #388]	; (8000af0 <APP_Control_Process+0x2e0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a69      	ldr	r2, [pc, #420]	; (8000b14 <APP_Control_Process+0x304>)
 8000970:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 8000972:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000974:	7c5b      	ldrb	r3, [r3, #17]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	4a63      	ldr	r2, [pc, #396]	; (8000b08 <APP_Control_Process+0x2f8>)
 800097a:	7c12      	ldrb	r2, [r2, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000986:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 800098a:	4b5f      	ldr	r3, [pc, #380]	; (8000b08 <APP_Control_Process+0x2f8>)
 800098c:	7cdb      	ldrb	r3, [r3, #19]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	4a5d      	ldr	r2, [pc, #372]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000992:	7c92      	ldrb	r2, [r2, #18]
 8000994:	4313      	orrs	r3, r2
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 80009a2:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <APP_Control_Process+0x2f8>)
 80009a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	4a57      	ldr	r2, [pc, #348]	; (8000b08 <APP_Control_Process+0x2f8>)
 80009ac:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 80009b0:	4313      	orrs	r3, r2
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ba:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000b18 <APP_Control_Process+0x308>
 80009be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 80009c6:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 80009ca:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80009ce:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80009d2:	f001 fd63 	bl	800249c <fconstrain>
 80009d6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 80009da:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <APP_Control_Process+0x304>)
 80009dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009de:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 80009e0:	4b4c      	ldr	r3, [pc, #304]	; (8000b14 <APP_Control_Process+0x304>)
 80009e2:	ed93 7a00 	vldr	s14, [r3]
 80009e6:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <APP_Control_Process+0x2e0>)
 80009e8:	edd3 7a00 	vldr	s15, [r3]
 80009ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009f0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				// compute pwm setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 80009f4:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <APP_Control_Process+0x2f8>)
 80009f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	4a42      	ldr	r2, [pc, #264]	; (8000b08 <APP_Control_Process+0x2f8>)
 80009fe:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8000a02:	4313      	orrs	r3, r2
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a0c:	eddf 6a43 	vldr	s13, [pc, #268]	; 8000b1c <APP_Control_Process+0x30c>
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000a1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	4a39      	ldr	r2, [pc, #228]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000a22:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8000a26:	4313      	orrs	r3, r2
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a30:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000af8 <APP_Control_Process+0x2e8>
 8000a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a38:	edc7 7a08 	vstr	s15, [r7, #32]
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 8000a3c:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000a3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	4a30      	ldr	r2, [pc, #192]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000a46:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a54:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a5c:	edc7 7a07 	vstr	s15, [r7, #28]
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000a62:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000a6a:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a78:	edc7 7a06 	vstr	s15, [r7, #24]
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp(
 8000a7c:	eddf 2a1f 	vldr	s5, [pc, #124]	; 8000afc <APP_Control_Process+0x2ec>
 8000a80:	ed97 2a06 	vldr	s4, [r7, #24]
 8000a84:	edd7 1a07 	vldr	s3, [r7, #28]
 8000a88:	ed97 1a08 	vldr	s2, [r7, #32]
 8000a8c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8000a90:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000a94:	4822      	ldr	r0, [pc, #136]	; (8000b20 <APP_Control_Process+0x310>)
 8000a96:	f001 fe34 	bl	8002702 <pid_process_antiwindup_clamp>
 8000a9a:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8000a9e:	eddf 7a17 	vldr	s15, [pc, #92]	; 8000afc <APP_Control_Process+0x2ec>
 8000aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										pwm_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <APP_Control_Process+0x314>)
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000b04 <APP_Control_Process+0x2f4>
 8000ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8000ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <APP_Control_Process+0x314>)
 8000aba:	edc3 7a00 	vstr	s15, [r3]
			}
			// unused setpoints zero
			setpoint_velocity_dps = 0.0f;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <APP_Control_Process+0x318>)
 8000ac0:	f04f 0200 	mov.w	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
			setpoint_current_ma = 0.0f;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <APP_Control_Process+0x31c>)
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION)
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 839c 	beq.w	8001212 <APP_Control_Process+0xa02>
			{
				APP_Control_Reset();
 8000ada:	f7ff fdd7 	bl	800068c <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <APP_Control_Process+0x2f8>)
 8000ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <APP_Control_Process+0x2fc>)
 8000ae8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000aea:	e392      	b.n	8001212 <APP_Control_Process+0xa02>
 8000aec:	20000218 	.word	0x20000218
 8000af0:	20000074 	.word	0x20000074
 8000af4:	200000b0 	.word	0x200000b0
 8000af8:	447a0000 	.word	0x447a0000
 8000afc:	3df5c28f 	.word	0x3df5c28f
 8000b00:	200000ac 	.word	0x200000ac
 8000b04:	3f6147ae 	.word	0x3f6147ae
 8000b08:	200000e8 	.word	0x200000e8
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	20000000 	.word	0x20000000
 8000b14:	2000008c 	.word	0x2000008c
 8000b18:	3dcccccd 	.word	0x3dcccccd
 8000b1c:	42c80000 	.word	0x42c80000
 8000b20:	20000094 	.word	0x20000094
 8000b24:	2000007c 	.word	0x2000007c
 8000b28:	20000088 	.word	0x20000088
 8000b2c:	20000080 	.word	0x20000080


		case REG_CONTROL_MODE_POSITION_TORQUE:
			if(entering_state)
 8000b30:	4bba      	ldr	r3, [pc, #744]	; (8000e1c <APP_Control_Process+0x60c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d044      	beq.n	8000bc2 <APP_Control_Process+0x3b2>
			{
				entering_state = false;
 8000b38:	4bb8      	ldr	r3, [pc, #736]	; (8000e1c <APP_Control_Process+0x60c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000b3e:	4bb8      	ldr	r3, [pc, #736]	; (8000e20 <APP_Control_Process+0x610>)
 8000b40:	edd3 7a00 	vldr	s15, [r3]
 8000b44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b50:	ee17 3a90 	vmov	r3, s15
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4bb2      	ldr	r3, [pc, #712]	; (8000e24 <APP_Control_Process+0x614>)
 8000b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000b5e:	4bb0      	ldr	r3, [pc, #704]	; (8000e20 <APP_Control_Process+0x610>)
 8000b60:	edd3 7a00 	vldr	s15, [r3]
 8000b64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b70:	ee17 3a90 	vmov	r3, s15
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	121b      	asrs	r3, r3, #8
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4ba9      	ldr	r3, [pc, #676]	; (8000e24 <APP_Control_Process+0x614>)
 8000b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 8000b82:	4ba8      	ldr	r3, [pc, #672]	; (8000e24 <APP_Control_Process+0x614>)
 8000b84:	7e1a      	ldrb	r2, [r3, #24]
 8000b86:	4ba7      	ldr	r3, [pc, #668]	; (8000e24 <APP_Control_Process+0x614>)
 8000b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8000b8c:	4ba5      	ldr	r3, [pc, #660]	; (8000e24 <APP_Control_Process+0x614>)
 8000b8e:	7e5a      	ldrb	r2, [r3, #25]
 8000b90:	4ba4      	ldr	r3, [pc, #656]	; (8000e24 <APP_Control_Process+0x614>)
 8000b92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000b96:	4ba3      	ldr	r3, [pc, #652]	; (8000e24 <APP_Control_Process+0x614>)
 8000b98:	7e9a      	ldrb	r2, [r3, #26]
 8000b9a:	4ba2      	ldr	r3, [pc, #648]	; (8000e24 <APP_Control_Process+0x614>)
 8000b9c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000ba0:	4ba0      	ldr	r3, [pc, #640]	; (8000e24 <APP_Control_Process+0x614>)
 8000ba2:	7eda      	ldrb	r2, [r3, #27]
 8000ba4:	4b9f      	ldr	r3, [pc, #636]	; (8000e24 <APP_Control_Process+0x614>)
 8000ba6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0.0f;
 8000baa:	4b9e      	ldr	r3, [pc, #632]	; (8000e24 <APP_Control_Process+0x614>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0.0f;
 8000bb2:	4b9c      	ldr	r3, [pc, #624]	; (8000e24 <APP_Control_Process+0x614>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 8000bba:	4b99      	ldr	r3, [pc, #612]	; (8000e20 <APP_Control_Process+0x610>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a9a      	ldr	r2, [pc, #616]	; (8000e28 <APP_Control_Process+0x618>)
 8000bc0:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 8000bc2:	4b98      	ldr	r3, [pc, #608]	; (8000e24 <APP_Control_Process+0x614>)
 8000bc4:	7c5b      	ldrb	r3, [r3, #17]
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	4a96      	ldr	r2, [pc, #600]	; (8000e24 <APP_Control_Process+0x614>)
 8000bca:	7c12      	ldrb	r2, [r2, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 8000bda:	4b92      	ldr	r3, [pc, #584]	; (8000e24 <APP_Control_Process+0x614>)
 8000bdc:	7cdb      	ldrb	r3, [r3, #19]
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	4a90      	ldr	r2, [pc, #576]	; (8000e24 <APP_Control_Process+0x614>)
 8000be2:	7c92      	ldrb	r2, [r2, #18]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bee:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 8000bf2:	4b8c      	ldr	r3, [pc, #560]	; (8000e24 <APP_Control_Process+0x614>)
 8000bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	4a8a      	ldr	r2, [pc, #552]	; (8000e24 <APP_Control_Process+0x614>)
 8000bfc:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8000c00:	4313      	orrs	r3, r2
 8000c02:	ee07 3a90 	vmov	s15, r3
 8000c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8000e2c <APP_Control_Process+0x61c>
 8000c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c12:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 8000c16:	ed97 1a19 	vldr	s2, [r7, #100]	; 0x64
 8000c1a:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8000c1e:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8000c22:	f001 fc3b 	bl	800249c <fconstrain>
 8000c26:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 8000c2a:	4a7f      	ldr	r2, [pc, #508]	; (8000e28 <APP_Control_Process+0x618>)
 8000c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c2e:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 8000c30:	4b7d      	ldr	r3, [pc, #500]	; (8000e28 <APP_Control_Process+0x618>)
 8000c32:	ed93 7a00 	vldr	s14, [r3]
 8000c36:	4b7a      	ldr	r3, [pc, #488]	; (8000e20 <APP_Control_Process+0x610>)
 8000c38:	edd3 7a00 	vldr	s15, [r3]
 8000c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c40:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				// compute current setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8000c44:	4b77      	ldr	r3, [pc, #476]	; (8000e24 <APP_Control_Process+0x614>)
 8000c46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	4a75      	ldr	r2, [pc, #468]	; (8000e24 <APP_Control_Process+0x614>)
 8000c4e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8000c52:	4313      	orrs	r3, r2
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c5c:	eddf 6a74 	vldr	s13, [pc, #464]	; 8000e30 <APP_Control_Process+0x620>
 8000c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c64:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 8000c68:	4b6e      	ldr	r3, [pc, #440]	; (8000e24 <APP_Control_Process+0x614>)
 8000c6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	4a6c      	ldr	r2, [pc, #432]	; (8000e24 <APP_Control_Process+0x614>)
 8000c72:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8000c76:	4313      	orrs	r3, r2
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c80:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8000e34 <APP_Control_Process+0x624>
 8000c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c88:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 8000c8c:	4b65      	ldr	r3, [pc, #404]	; (8000e24 <APP_Control_Process+0x614>)
 8000c8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	4a63      	ldr	r2, [pc, #396]	; (8000e24 <APP_Control_Process+0x614>)
 8000c96:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cac:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8000cb0:	4b5c      	ldr	r3, [pc, #368]	; (8000e24 <APP_Control_Process+0x614>)
 8000cb2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	4a5a      	ldr	r2, [pc, #360]	; (8000e24 <APP_Control_Process+0x614>)
 8000cba:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	ee07 3a90 	vmov	s15, r3
 8000cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp(
 8000ccc:	eddf 2a5a 	vldr	s5, [pc, #360]	; 8000e38 <APP_Control_Process+0x628>
 8000cd0:	ed97 2a13 	vldr	s4, [r7, #76]	; 0x4c
 8000cd4:	edd7 1a14 	vldr	s3, [r7, #80]	; 0x50
 8000cd8:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 8000cdc:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8000ce0:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8000ce4:	4855      	ldr	r0, [pc, #340]	; (8000e3c <APP_Control_Process+0x62c>)
 8000ce6:	f001 fd0c 	bl	8002702 <pid_process_antiwindup_clamp>
 8000cea:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 8000cee:	eddf 7a54 	vldr	s15, [pc, #336]	; 8000e40 <APP_Control_Process+0x630>
 8000cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										current_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 8000cf6:	4b53      	ldr	r3, [pc, #332]	; (8000e44 <APP_Control_Process+0x634>)
 8000cf8:	edd3 7a00 	vldr	s15, [r3]
 8000cfc:	eddf 6a52 	vldr	s13, [pc, #328]	; 8000e48 <APP_Control_Process+0x638>
 8000d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8000d04:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 8000d08:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <APP_Control_Process+0x634>)
 8000d0a:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8000d0e:	4b4d      	ldr	r3, [pc, #308]	; (8000e44 <APP_Control_Process+0x634>)
 8000d10:	ed93 7a00 	vldr	s14, [r3]
 8000d14:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <APP_Control_Process+0x63c>)
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 8000d22:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <APP_Control_Process+0x614>)
 8000d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	4a3e      	ldr	r2, [pc, #248]	; (8000e24 <APP_Control_Process+0x614>)
 8000d2c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000d30:	4313      	orrs	r3, r2
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d3a:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8000e34 <APP_Control_Process+0x624>
 8000d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d42:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <APP_Control_Process+0x614>)
 8000d48:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	4a35      	ldr	r2, [pc, #212]	; (8000e24 <APP_Control_Process+0x614>)
 8000d50:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8000d54:	4313      	orrs	r3, r2
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d5e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000e30 <APP_Control_Process+0x620>
 8000d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d66:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <APP_Control_Process+0x614>)
 8000d6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	4a2c      	ldr	r2, [pc, #176]	; (8000e24 <APP_Control_Process+0x614>)
 8000d74:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	ee07 3a90 	vmov	s15, r3
 8000d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d82:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000e30 <APP_Control_Process+0x620>
 8000d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <APP_Control_Process+0x614>)
 8000d90:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <APP_Control_Process+0x614>)
 8000d98:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <APP_Control_Process+0x634>)
 8000dac:	ed93 7a00 	vldr	s14, [r3]
 8000db0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db8:	eeb0 3a67 	vmov.f32	s6, s15
 8000dbc:	eddf 2a24 	vldr	s5, [pc, #144]	; 8000e50 <APP_Control_Process+0x640>
 8000dc0:	ed97 2a0e 	vldr	s4, [r7, #56]	; 0x38
 8000dc4:	eddf 1a22 	vldr	s3, [pc, #136]	; 8000e50 <APP_Control_Process+0x640>
 8000dc8:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 8000dcc:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8000dd0:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8000dd4:	481f      	ldr	r0, [pc, #124]	; (8000e54 <APP_Control_Process+0x644>)
 8000dd6:	f001 fbe6 	bl	80025a6 <pid_process_antiwindup_clamp_with_ff>
 8000dda:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8000dde:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000e38 <APP_Control_Process+0x628>
 8000de2:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <APP_Control_Process+0x648>)
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000e5c <APP_Control_Process+0x64c>
 8000df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8000df4:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <APP_Control_Process+0x648>)
 8000dfa:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION_TORQUE)
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <APP_Control_Process+0x614>)
 8000e00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	f000 8206 	beq.w	8001216 <APP_Control_Process+0xa06>
			{
				APP_Control_Reset();
 8000e0a:	f7ff fc3f 	bl	800068c <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <APP_Control_Process+0x614>)
 8000e10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <APP_Control_Process+0x650>)
 8000e18:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e1a:	e1fc      	b.n	8001216 <APP_Control_Process+0xa06>
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000074 	.word	0x20000074
 8000e24:	200000e8 	.word	0x200000e8
 8000e28:	2000008c 	.word	0x2000008c
 8000e2c:	3dcccccd 	.word	0x3dcccccd
 8000e30:	42c80000 	.word	0x42c80000
 8000e34:	447a0000 	.word	0x447a0000
 8000e38:	3df5c28f 	.word	0x3df5c28f
 8000e3c:	20000094 	.word	0x20000094
 8000e40:	3f75c28f 	.word	0x3f75c28f
 8000e44:	20000080 	.word	0x20000080
 8000e48:	3d23d710 	.word	0x3d23d710
 8000e4c:	20000070 	.word	0x20000070
 8000e50:	00000000 	.word	0x00000000
 8000e54:	200000a0 	.word	0x200000a0
 8000e58:	2000007c 	.word	0x2000007c
 8000e5c:	3f6147ae 	.word	0x3f6147ae
 8000e60:	20000004 	.word	0x20000004


		case REG_CONTROL_MODE_POSITION_PROFIL:
			if(entering_state)
 8000e64:	4b9e      	ldr	r3, [pc, #632]	; (80010e0 <APP_Control_Process+0x8d0>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d046      	beq.n	8000efa <APP_Control_Process+0x6ea>
			{
				entering_state = false;
 8000e6c:	4b9c      	ldr	r3, [pc, #624]	; (80010e0 <APP_Control_Process+0x8d0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000e72:	4b9c      	ldr	r3, [pc, #624]	; (80010e4 <APP_Control_Process+0x8d4>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e84:	ee17 3a90 	vmov	r3, s15
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b96      	ldr	r3, [pc, #600]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000e92:	4b94      	ldr	r3, [pc, #592]	; (80010e4 <APP_Control_Process+0x8d4>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea4:	ee17 3a90 	vmov	r3, s15
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	121b      	asrs	r3, r3, #8
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b8d      	ldr	r3, [pc, #564]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 8000eb6:	4b8c      	ldr	r3, [pc, #560]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000eb8:	7d1a      	ldrb	r2, [r3, #20]
 8000eba:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 8000ec0:	4b89      	ldr	r3, [pc, #548]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000ec2:	7d5a      	ldrb	r2, [r3, #21]
 8000ec4:	4b88      	ldr	r3, [pc, #544]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 8000eca:	4b87      	ldr	r3, [pc, #540]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000ecc:	7e1a      	ldrb	r2, [r3, #24]
 8000ece:	4b86      	ldr	r3, [pc, #536]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8000ed4:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000ed6:	7e5a      	ldrb	r2, [r3, #25]
 8000ed8:	4b83      	ldr	r3, [pc, #524]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000eda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000ede:	4b82      	ldr	r3, [pc, #520]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000ee0:	7e9a      	ldrb	r2, [r3, #26]
 8000ee2:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000ee4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000ee8:	4b7f      	ldr	r3, [pc, #508]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000eea:	7eda      	ldrb	r2, [r3, #27]
 8000eec:	4b7e      	ldr	r3, [pc, #504]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000eee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 8000ef2:	4b7c      	ldr	r3, [pc, #496]	; (80010e4 <APP_Control_Process+0x8d4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a7d      	ldr	r2, [pc, #500]	; (80010ec <APP_Control_Process+0x8dc>)
 8000ef8:	6013      	str	r3, [r2, #0]
//				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
//				setpoint_pwm = ALPHA_PWM_SETPOINT * ( pid_current_kff * setpoint_current_ma +	pid_process(&pid_current,error_current,pid_current_kp,pid_current_ki,0.0f,LIMIT_PID_CURRENT_WINDUP) ) + (1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
//				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
//				setpoint_pwm = fconstrain(setpoint_pwm,-pwm_limit,pwm_limit);
//			}
			setpoint_pwm = 0.0f;
 8000efa:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <APP_Control_Process+0x8e0>)
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION)
 8000f02:	4b79      	ldr	r3, [pc, #484]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 8186 	beq.w	800121a <APP_Control_Process+0xa0a>
			{
				APP_Control_Reset();
 8000f0e:	f7ff fbbd 	bl	800068c <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000f12:	4b75      	ldr	r3, [pc, #468]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b76      	ldr	r3, [pc, #472]	; (80010f4 <APP_Control_Process+0x8e4>)
 8000f1c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f1e:	e17c      	b.n	800121a <APP_Control_Process+0xa0a>
		case REG_CONTROL_MODE_CURRENT:
			if(entering_state)
 8000f20:	4b6f      	ldr	r3, [pc, #444]	; (80010e0 <APP_Control_Process+0x8d0>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d03e      	beq.n	8000fa6 <APP_Control_Process+0x796>
			{
				entering_state = false;
 8000f28:	4b6d      	ldr	r3, [pc, #436]	; (80010e0 <APP_Control_Process+0x8d0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8000f2e:	4b6e      	ldr	r3, [pc, #440]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8000f36:	4b6c      	ldr	r3, [pc, #432]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000f3e:	4b6a      	ldr	r3, [pc, #424]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f40:	7e9a      	ldrb	r2, [r3, #26]
 8000f42:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f44:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000f48:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f4a:	7eda      	ldrb	r2, [r3, #27]
 8000f4c:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f4e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000f52:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <APP_Control_Process+0x8d4>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f64:	ee17 3a90 	vmov	r3, s15
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000f72:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <APP_Control_Process+0x8d4>)
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f84:	ee17 3a90 	vmov	r3, s15
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	121b      	asrs	r3, r3, #8
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8000f96:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8000f9e:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			{
				float const goal_current = (int16_t)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000fa8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000fb2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
				//float const current_limit = (float)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
				//setpoint_current_ma = fconstrain(goal_current,-current_limit,current_limit);
				setpoint_current_ma = goal_current;
 8000fc8:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <APP_Control_Process+0x8e8>)
 8000fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fce:	6013      	str	r3, [r2, #0]
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8000fd0:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <APP_Control_Process+0x8e8>)
 8000fd2:	ed93 7a00 	vldr	s14, [r3]
 8000fd6:	4b49      	ldr	r3, [pc, #292]	; (80010fc <APP_Control_Process+0x8ec>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/100.0f;
 8000fe4:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	4a3e      	ldr	r2, [pc, #248]	; (80010e8 <APP_Control_Process+0x8d8>)
 8000fee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffc:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001100 <APP_Control_Process+0x8f0>
 8001000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001004:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/1000.0f;
 8001008:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <APP_Control_Process+0x8d8>)
 800100a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	4a35      	ldr	r2, [pc, #212]	; (80010e8 <APP_Control_Process+0x8d8>)
 8001012:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001016:	4313      	orrs	r3, r2
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001020:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001104 <APP_Control_Process+0x8f4>
 8001024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001028:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <APP_Control_Process+0x8d8>)
 800102e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <APP_Control_Process+0x8d8>)
 8001036:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800103a:	4313      	orrs	r3, r2
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001044:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001100 <APP_Control_Process+0x8f0>
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <APP_Control_Process+0x8d8>)
 8001052:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <APP_Control_Process+0x8d8>)
 800105a:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 800105e:	4313      	orrs	r3, r2
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <APP_Control_Process+0x8e8>)
 800106e:	ed93 7a00 	vldr	s14, [r3]
 8001072:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	eeb0 3a67 	vmov.f32	s6, s15
 800107e:	eddf 2a22 	vldr	s5, [pc, #136]	; 8001108 <APP_Control_Process+0x8f8>
 8001082:	ed97 2a1b 	vldr	s4, [r7, #108]	; 0x6c
 8001086:	eddf 1a20 	vldr	s3, [pc, #128]	; 8001108 <APP_Control_Process+0x8f8>
 800108a:	ed97 1a1d 	vldr	s2, [r7, #116]	; 0x74
 800108e:	edd7 0a1e 	vldr	s1, [r7, #120]	; 0x78
 8001092:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8001096:	481d      	ldr	r0, [pc, #116]	; (800110c <APP_Control_Process+0x8fc>)
 8001098:	f001 fa85 	bl	80025a6 <pid_process_antiwindup_clamp_with_ff>
 800109c:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 80010a0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8001110 <APP_Control_Process+0x900>
 80010a4:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <APP_Control_Process+0x8e0>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001114 <APP_Control_Process+0x904>
 80010b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <APP_Control_Process+0x8e0>)
 80010bc:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_CURRENT)
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <APP_Control_Process+0x8d8>)
 80010c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	f000 80a9 	beq.w	800121e <APP_Control_Process+0xa0e>
			{
				APP_Control_Reset();
 80010cc:	f7ff fade 	bl	800068c <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <APP_Control_Process+0x8d8>)
 80010d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <APP_Control_Process+0x8e4>)
 80010da:	601a      	str	r2, [r3, #0]
			}
			break;
 80010dc:	e09f      	b.n	800121e <APP_Control_Process+0xa0e>
 80010de:	bf00      	nop
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000074 	.word	0x20000074
 80010e8:	200000e8 	.word	0x200000e8
 80010ec:	2000008c 	.word	0x2000008c
 80010f0:	2000007c 	.word	0x2000007c
 80010f4:	20000004 	.word	0x20000004
 80010f8:	20000080 	.word	0x20000080
 80010fc:	20000070 	.word	0x20000070
 8001100:	42c80000 	.word	0x42c80000
 8001104:	447a0000 	.word	0x447a0000
 8001108:	00000000 	.word	0x00000000
 800110c:	200000a0 	.word	0x200000a0
 8001110:	3df5c28f 	.word	0x3df5c28f
 8001114:	3f6147ae 	.word	0x3f6147ae
		case REG_CONTROL_MODE_PWM:
			if(entering_state)
 8001118:	4b6b      	ldr	r3, [pc, #428]	; (80012c8 <APP_Control_Process+0xab8>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d03c      	beq.n	800119a <APP_Control_Process+0x98a>
			{
				entering_state = false;
 8001120:	4b69      	ldr	r3, [pc, #420]	; (80012c8 <APP_Control_Process+0xab8>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = 0;
 8001126:	4b69      	ldr	r3, [pc, #420]	; (80012cc <APP_Control_Process+0xabc>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = 0;
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <APP_Control_Process+0xabc>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001136:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <APP_Control_Process+0xac0>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001148:	ee17 3a90 	vmov	r3, s15
 800114c:	b21b      	sxth	r3, r3
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <APP_Control_Process+0xabc>)
 8001152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <APP_Control_Process+0xac0>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001168:	ee17 3a90 	vmov	r3, s15
 800116c:	b21b      	sxth	r3, r3
 800116e:	121b      	asrs	r3, r3, #8
 8001170:	b21b      	sxth	r3, r3
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <APP_Control_Process+0xabc>)
 8001176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 800117a:	4b54      	ldr	r3, [pc, #336]	; (80012cc <APP_Control_Process+0xabc>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001182:	4b52      	ldr	r3, [pc, #328]	; (80012cc <APP_Control_Process+0xabc>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 800118a:	4b50      	ldr	r3, [pc, #320]	; (80012cc <APP_Control_Process+0xabc>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <APP_Control_Process+0xabc>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			}
			// compute pwm setpoint from goal pwm
			{
				float const goal_pwm = (int16_t)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 800119a:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <APP_Control_Process+0xabc>)
 800119c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <APP_Control_Process+0xabc>)
 80011a6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_MAX_PWM_100_L],regs[REG_MAX_PWM_100_H]));
 80011bc:	4b43      	ldr	r3, [pc, #268]	; (80012cc <APP_Control_Process+0xabc>)
 80011be:	7edb      	ldrb	r3, [r3, #27]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	4a42      	ldr	r2, [pc, #264]	; (80012cc <APP_Control_Process+0xabc>)
 80011c4:	7e92      	ldrb	r2, [r2, #26]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				setpoint_pwm = fconstrain(goal_pwm,-pwm_limit,pwm_limit);
 80011d4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80011d8:	eef1 7a67 	vneg.f32	s15, s15
 80011dc:	ed97 1a21 	vldr	s2, [r7, #132]	; 0x84
 80011e0:	eef0 0a67 	vmov.f32	s1, s15
 80011e4:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80011e8:	f001 f958 	bl	800249c <fconstrain>
 80011ec:	eef0 7a40 	vmov.f32	s15, s0
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <APP_Control_Process+0xac4>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_PWM)
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <APP_Control_Process+0xabc>)
 80011f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d010      	beq.n	8001222 <APP_Control_Process+0xa12>
			{
				APP_Control_Reset();
 8001200:	f7ff fa44 	bl	800068c <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <APP_Control_Process+0xabc>)
 8001206:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800120a:	461a      	mov	r2, r3
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <APP_Control_Process+0xac8>)
 800120e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001210:	e007      	b.n	8001222 <APP_Control_Process+0xa12>
			break;
 8001212:	bf00      	nop
 8001214:	e006      	b.n	8001224 <APP_Control_Process+0xa14>
			break;
 8001216:	bf00      	nop
 8001218:	e004      	b.n	8001224 <APP_Control_Process+0xa14>
			break;
 800121a:	bf00      	nop
 800121c:	e002      	b.n	8001224 <APP_Control_Process+0xa14>
			break;
 800121e:	bf00      	nop
 8001220:	e000      	b.n	8001224 <APP_Control_Process+0xa14>
			break;
 8001222:	bf00      	nop
		}

		// motor leads maybe inverted, user can reverse polarity of motor (EEPROM parameter)
		float const pwm_inv = regs[REG_INV_ROTATION_MOTOR] > 0 ? -1.0f : 1.0f;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <APP_Control_Process+0xabc>)
 8001226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <APP_Control_Process+0xa22>
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <APP_Control_Process+0xacc>)
 8001230:	e001      	b.n	8001236 <APP_Control_Process+0xa26>
 8001232:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001236:	617b      	str	r3, [r7, #20]
		float pwm = pwm_inv * setpoint_pwm;
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <APP_Control_Process+0xac4>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	edc7 7a04 	vstr	s15, [r7, #16]

		// apply pwm
		if(pwm>=0.0f)
 800124a:	edd7 7a04 	vldr	s15, [r7, #16]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	db11      	blt.n	800127c <APP_Control_Process+0xa6c>
		{
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE);
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <APP_Control_Process+0xad0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2263      	movs	r2, #99	; 0x63
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE-pwm);
 8001260:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012e4 <APP_Control_Process+0xad4>
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <APP_Control_Process+0xad0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001274:	ee17 2a90 	vmov	r2, s15
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
 800127a:	e01b      	b.n	80012b4 <APP_Control_Process+0xaa4>


		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE+pwm);
 800127c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001280:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80012e4 <APP_Control_Process+0xad4>
 8001284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <APP_Control_Process+0xad0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001290:	ee17 2a90 	vmov	r2, s15
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE);
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <APP_Control_Process+0xad0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2263      	movs	r2, #99	; 0x63
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
 800129e:	e009      	b.n	80012b4 <APP_Control_Process+0xaa4>
		}
	}
	else
	{
		APP_Control_Reset();
 80012a0:	f7ff f9f4 	bl	800068c <APP_Control_Reset>
		// motor brake
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE);
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <APP_Control_Process+0xad0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2263      	movs	r2, #99	; 0x63
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE);
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <APP_Control_Process+0xad0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2263      	movs	r2, #99	; 0x63
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// Note : This is an unipolar current sensing architecture,
	// then motor current is always positive in FORWARD and REVERSE drive phase,
	// and zero in BRAKE phases. So, the sign of the current, is build from the sign of the PWM setpoint
	pwm_sign = ( setpoint_pwm < 0.0f ) ? -1.0f : 1.0f;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <APP_Control_Process+0xac4>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	d511      	bpl.n	80012e8 <APP_Control_Process+0xad8>
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <APP_Control_Process+0xacc>)
 80012c6:	e011      	b.n	80012ec <APP_Control_Process+0xadc>
 80012c8:	20000000 	.word	0x20000000
 80012cc:	200000e8 	.word	0x200000e8
 80012d0:	20000074 	.word	0x20000074
 80012d4:	2000007c 	.word	0x2000007c
 80012d8:	20000004 	.word	0x20000004
 80012dc:	bf800000 	.word	0xbf800000
 80012e0:	200001cc 	.word	0x200001cc
 80012e4:	42c60000 	.word	0x42c60000
 80012e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ec:	4ab8      	ldr	r2, [pc, #736]	; (80015d0 <APP_Control_Process+0xdc0>)
 80012ee:	6013      	str	r3, [r2, #0]
	pwm_ratio = fabsf(setpoint_pwm)/100.0f;
 80012f0:	4bb8      	ldr	r3, [pc, #736]	; (80015d4 <APP_Control_Process+0xdc4>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	eeb0 7ae7 	vabs.f32	s14, s15
 80012fa:	eddf 6ab7 	vldr	s13, [pc, #732]	; 80015d8 <APP_Control_Process+0xdc8>
 80012fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001302:	4bb6      	ldr	r3, [pc, #728]	; (80015dc <APP_Control_Process+0xdcc>)
 8001304:	edc3 7a00 	vstr	s15, [r3]

	// live update of RAM regs
	regs[REG_PRESENT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(present_position_deg*10.0f));
 8001308:	4bb5      	ldr	r3, [pc, #724]	; (80015e0 <APP_Control_Process+0xdd0>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131a:	ee17 3a90 	vmov	r3, s15
 800131e:	b29b      	uxth	r3, r3
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4bb0      	ldr	r3, [pc, #704]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001324:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(present_position_deg*10.0f));
 8001328:	4bad      	ldr	r3, [pc, #692]	; (80015e0 <APP_Control_Process+0xdd0>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133a:	ee17 3a90 	vmov	r3, s15
 800133e:	b29b      	uxth	r3, r3
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29b      	uxth	r3, r3
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4ba7      	ldr	r3, [pc, #668]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001348:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	regs[REG_PRESENT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)present_velocity_dps);
 800134c:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <APP_Control_Process+0xdd8>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001356:	ee17 3a90 	vmov	r3, s15
 800135a:	b21b      	sxth	r3, r3
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4ba1      	ldr	r3, [pc, #644]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001360:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)present_velocity_dps);
 8001364:	4ba0      	ldr	r3, [pc, #640]	; (80015e8 <APP_Control_Process+0xdd8>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	b21b      	sxth	r3, r3
 8001374:	121b      	asrs	r3, r3, #8
 8001376:	b21b      	sxth	r3, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b9a      	ldr	r3, [pc, #616]	; (80015e4 <APP_Control_Process+0xdd4>)
 800137c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	regs[REG_PRESENT_CURRENT_MA_L] = LOW_BYTE((int16_t)present_motor_current_ma);
 8001380:	4b9a      	ldr	r3, [pc, #616]	; (80015ec <APP_Control_Process+0xddc>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138a:	ee17 3a90 	vmov	r3, s15
 800138e:	b21b      	sxth	r3, r3
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = HIGH_BYTE((int16_t)present_motor_current_ma);
 8001398:	4b94      	ldr	r3, [pc, #592]	; (80015ec <APP_Control_Process+0xddc>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	ee17 3a90 	vmov	r3, s15
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	121b      	asrs	r3, r3, #8
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b8d      	ldr	r3, [pc, #564]	; (80015e4 <APP_Control_Process+0xdd4>)
 80013b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	regs[REG_PRESENT_VOLTAGE] = (uint8_t)(present_voltage_0v1);
 80013b4:	4b8e      	ldr	r3, [pc, #568]	; (80015f0 <APP_Control_Process+0xde0>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013be:	edc7 7a01 	vstr	s15, [r7, #4]
 80013c2:	793b      	ldrb	r3, [r7, #4]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b87      	ldr	r3, [pc, #540]	; (80015e4 <APP_Control_Process+0xdd4>)
 80013c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 80013cc:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <APP_Control_Process+0xdd4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	float moving_threshold = regs[REG_MOVING_THRESHOLD_DPS];
 80013d4:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <APP_Control_Process+0xdd4>)
 80013d6:	7fdb      	ldrb	r3, [r3, #31]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	edc7 7a03 	vstr	s15, [r7, #12]
	regs[REG_MOVING] = ( fabs(present_velocity_dps) > moving_threshold ) ? 1 : 0;
 80013e4:	4b80      	ldr	r3, [pc, #512]	; (80015e8 <APP_Control_Process+0xdd8>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eef0 7ae7 	vabs.f32	s15, s15
 80013ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80013f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	bf4c      	ite	mi
 80013fc:	2301      	movmi	r3, #1
 80013fe:	2300      	movpl	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001406:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 800140a:	4b7a      	ldr	r3, [pc, #488]	; (80015f4 <APP_Control_Process+0xde4>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141c:	ee17 3a90 	vmov	r3, s15
 8001420:	b29b      	uxth	r3, r3
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001426:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 800142a:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <APP_Control_Process+0xde4>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143c:	ee17 3a90 	vmov	r3, s15
 8001440:	b29b      	uxth	r3, r3
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <APP_Control_Process+0xdd4>)
 800144a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	//regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)setpoint_velocity_dps);
	//regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)setpoint_velocity_dps);
	regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)pid_position.err_integral);
 800144e:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <APP_Control_Process+0xde8>)
 8001450:	edd3 7a01 	vldr	s15, [r3, #4]
 8001454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001458:	ee17 3a90 	vmov	r3, s15
 800145c:	b21b      	sxth	r3, r3
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b60      	ldr	r3, [pc, #384]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)pid_position.err_integral);
 8001466:	4b64      	ldr	r3, [pc, #400]	; (80015f8 <APP_Control_Process+0xde8>)
 8001468:	edd3 7a01 	vldr	s15, [r3, #4]
 800146c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001470:	ee17 3a90 	vmov	r3, s15
 8001474:	b21b      	sxth	r3, r3
 8001476:	121b      	asrs	r3, r3, #8
 8001478:	b21b      	sxth	r3, r3
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <APP_Control_Process+0xdd4>)
 800147e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	regs[REG_SETPOINT_CURRENT_MA_L] = LOW_BYTE((int16_t)setpoint_current_ma);
 8001482:	4b5e      	ldr	r3, [pc, #376]	; (80015fc <APP_Control_Process+0xdec>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148c:	ee17 3a90 	vmov	r3, s15
 8001490:	b21b      	sxth	r3, r3
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001496:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = HIGH_BYTE((int16_t)setpoint_current_ma);
 800149a:	4b58      	ldr	r3, [pc, #352]	; (80015fc <APP_Control_Process+0xdec>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a4:	ee17 3a90 	vmov	r3, s15
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	121b      	asrs	r3, r3, #8
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <APP_Control_Process+0xdd4>)
 80014b2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	regs[REG_SETPOINT_PWM_100_L] = LOW_BYTE((int16_t)setpoint_pwm);
 80014b6:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <APP_Control_Process+0xdc4>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c0:	ee17 3a90 	vmov	r3, s15
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <APP_Control_Process+0xdd4>)
 80014ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = HIGH_BYTE((int16_t)setpoint_pwm);
 80014ce:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <APP_Control_Process+0xdc4>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d8:	ee17 3a90 	vmov	r3, s15
 80014dc:	b21b      	sxth	r3, r3
 80014de:	121b      	asrs	r3, r3, #8
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <APP_Control_Process+0xdd4>)
 80014e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = LOW_BYTE((uint16_t)motor_current_input_adc);
 80014ea:	4b45      	ldr	r3, [pc, #276]	; (8001600 <APP_Control_Process+0xdf0>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f4:	ee17 3a90 	vmov	r3, s15
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <APP_Control_Process+0xdd4>)
 80014fe:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = HIGH_BYTE((uint16_t)motor_current_input_adc);
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <APP_Control_Process+0xdf0>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800150c:	ee17 3a90 	vmov	r3, s15
 8001510:	b29b      	uxth	r3, r3
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <APP_Control_Process+0xdd4>)
 800151a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = LOW_BYTE((uint16_t)motor_current_input_adc_offset);
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <APP_Control_Process+0xdf4>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001528:	ee17 3a90 	vmov	r3, s15
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001532:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = HIGH_BYTE((uint16_t)motor_current_input_adc_offset);
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <APP_Control_Process+0xdf4>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001540:	ee17 3a90 	vmov	r3, s15
 8001544:	b29b      	uxth	r3, r3
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	b29b      	uxth	r3, r3
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <APP_Control_Process+0xdd4>)
 800154e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	regs[REG_POSITION_INPUT_ADC_L] = LOW_BYTE((uint16_t)position_input_adc);
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <APP_Control_Process+0xdf8>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155c:	ee17 3a90 	vmov	r3, s15
 8001560:	b29b      	uxth	r3, r3
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001566:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = HIGH_BYTE((uint16_t)position_input_adc);
 800156a:	4b27      	ldr	r3, [pc, #156]	; (8001608 <APP_Control_Process+0xdf8>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001574:	ee17 3a90 	vmov	r3, s15
 8001578:	b29b      	uxth	r3, r3
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	b29b      	uxth	r3, r3
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <APP_Control_Process+0xdd4>)
 8001582:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

	regs[REG_VOLTAGE_INPUT_ADC_L] = LOW_BYTE((uint16_t)voltage_input_adc);
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <APP_Control_Process+0xdfc>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	b29b      	uxth	r3, r3
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <APP_Control_Process+0xdd4>)
 800159a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = HIGH_BYTE((uint16_t)voltage_input_adc);
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <APP_Control_Process+0xdfc>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a8:	ee17 3a90 	vmov	r3, s15
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <APP_Control_Process+0xdd4>)
 80015b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	// steps
	++counter;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <APP_Control_Process+0xe00>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a13      	ldr	r2, [pc, #76]	; (8001610 <APP_Control_Process+0xe00>)
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e000      	b.n	80015c8 <APP_Control_Process+0xdb8>
		return;
 80015c6:	bf00      	nop
}
 80015c8:	3798      	adds	r7, #152	; 0x98
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000068 	.word	0x20000068
 80015d4:	2000007c 	.word	0x2000007c
 80015d8:	42c80000 	.word	0x42c80000
 80015dc:	2000006c 	.word	0x2000006c
 80015e0:	20000074 	.word	0x20000074
 80015e4:	200000e8 	.word	0x200000e8
 80015e8:	200000ac 	.word	0x200000ac
 80015ec:	20000070 	.word	0x20000070
 80015f0:	20000078 	.word	0x20000078
 80015f4:	2000008c 	.word	0x2000008c
 80015f8:	20000094 	.word	0x20000094
 80015fc:	20000080 	.word	0x20000080
 8001600:	20000058 	.word	0x20000058
 8001604:	20000064 	.word	0x20000064
 8001608:	2000005c 	.word	0x2000005c
 800160c:	20000060 	.word	0x20000060
 8001610:	20000090 	.word	0x20000090

08001614 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3c      	ldr	r2, [pc, #240]	; (8001710 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d170      	bne.n	8001706 <HAL_ADC_ConvCpltCallback+0xf2>
	{
		// Filter (EWMA) position and voltage ADC samples
		voltage_input_adc = ALPHA_VOLTAGE * (float)(ADC_DMA[2]) + (1.0f-ALPHA_VOLTAGE) * voltage_input_adc;
 8001624:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_ADC_ConvCpltCallback+0x100>)
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	b29b      	uxth	r3, r3
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001632:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001718 <HAL_ADC_ConvCpltCallback+0x104>
 8001636:	ee27 7a87 	vmul.f32	s14, s15, s14
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_ADC_ConvCpltCallback+0x108>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001720 <HAL_ADC_ConvCpltCallback+0x10c>
 8001644:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_ADC_ConvCpltCallback+0x108>)
 800164e:	edc3 7a00 	vstr	s15, [r3]
		position_input_adc = ALPHA_POSITION * (float)(ADC_DMA[1]) + (1.0f-ALPHA_POSITION) * position_input_adc;
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_ADC_ConvCpltCallback+0x100>)
 8001654:	885b      	ldrh	r3, [r3, #2]
 8001656:	b29b      	uxth	r3, r3
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001660:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001718 <HAL_ADC_ConvCpltCallback+0x104>
 8001664:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_ADC_ConvCpltCallback+0x110>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001720 <HAL_ADC_ConvCpltCallback+0x10c>
 8001672:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <HAL_ADC_ConvCpltCallback+0x110>)
 800167c:	edc3 7a00 	vstr	s15, [r3]
		// TIM4 is 40KHz, motor PWM is 20KHz
		// So ADC is triggered twice per motor PWM period by TIM4
		// We will measure ON and OFF instant motor current

		// In FORWARD or REVERSE DRIVE phases, PWM is ON, counter decreases
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <HAL_ADC_ConvCpltCallback+0x114>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b10      	cmp	r3, #16
 800168c:	d117      	bne.n	80016be <HAL_ADC_ConvCpltCallback+0xaa>
		{
			// filter motor current
			motor_current_input_adc = ALPHA_CURRENT_SENSE*(float)(ADC_DMA[0]) + (1.0f-ALPHA_CURRENT_SENSE)*motor_current_input_adc;
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_ADC_ConvCpltCallback+0x100>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800169c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001718 <HAL_ADC_ConvCpltCallback+0x104>
 80016a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_ADC_ConvCpltCallback+0x118>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001720 <HAL_ADC_ConvCpltCallback+0x10c>
 80016ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_ADC_ConvCpltCallback+0x118>)
 80016b8:	edc3 7a00 	vstr	s15, [r3]
 80016bc:	e01e      	b.n	80016fc <HAL_ADC_ConvCpltCallback+0xe8>
		}
		// In BRAKE phase, PWM is OFF, counter increases
		else
		{
			// self-calibrate ADC offset (b) when motor is stopped
			if(setpoint_pwm==0.0f)
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_ADC_ConvCpltCallback+0x11c>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d116      	bne.n	80016fc <HAL_ADC_ConvCpltCallback+0xe8>
			{
				motor_current_input_adc_offset = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC_DMA[0]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_ADC_ConvCpltCallback+0x100>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016dc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001734 <HAL_ADC_ConvCpltCallback+0x120>
 80016e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_ADC_ConvCpltCallback+0x124>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eddf 6a14 	vldr	s13, [pc, #80]	; 800173c <HAL_ADC_ConvCpltCallback+0x128>
 80016ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_ADC_ConvCpltCallback+0x124>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		// restart ADC
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 80016fc:	2203      	movs	r2, #3
 80016fe:	4905      	ldr	r1, [pc, #20]	; (8001714 <HAL_ADC_ConvCpltCallback+0x100>)
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001702:	f002 fdcb 	bl	800429c <HAL_ADC_Start_DMA>
	}
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002a0 	.word	0x200002a0
 8001714:	20000050 	.word	0x20000050
 8001718:	3d4ccccd 	.word	0x3d4ccccd
 800171c:	20000060 	.word	0x20000060
 8001720:	3f733333 	.word	0x3f733333
 8001724:	2000005c 	.word	0x2000005c
 8001728:	200001cc 	.word	0x200001cc
 800172c:	20000058 	.word	0x20000058
 8001730:	2000007c 	.word	0x2000007c
 8001734:	3a83126f 	.word	0x3a83126f
 8001738:	20000064 	.word	0x20000064
 800173c:	3f7fbe77 	.word	0x3f7fbe77

08001740 <factory_reset_eeprom_regs>:
#include "stm32g4xx_hal.h"

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 8001744:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001746:	225c      	movs	r2, #92	; 0x5c
 8001748:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 800174a:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800174c:	2200      	movs	r2, #0
 800174e:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 8001750:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001752:	2200      	movs	r2, #0
 8001754:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 8001756:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001758:	2201      	movs	r2, #1
 800175a:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800175e:	2203      	movs	r2, #3
 8001760:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 8001762:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001764:	2200      	movs	r2, #0
 8001766:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8001768:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800176a:	221e      	movs	r2, #30
 800176c:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 800176e:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001770:	2200      	movs	r2, #0
 8001772:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001776:	2296      	movs	r2, #150	; 0x96
 8001778:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 800177a:	4b52      	ldr	r3, [pc, #328]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800177c:	2200      	movs	r2, #0
 800177e:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001782:	2220      	movs	r2, #32
 8001784:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8001786:	4b4f      	ldr	r3, [pc, #316]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001788:	2203      	movs	r2, #3
 800178a:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 800178c:	4b4d      	ldr	r3, [pc, #308]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8001792:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001794:	221f      	movs	r2, #31
 8001796:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8001798:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800179a:	22fa      	movs	r2, #250	; 0xfa
 800179c:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	765a      	strb	r2, [r3, #25]
	regs[REG_MAX_PWM_100_L] = LOW_BYTE(REG_MAX_PWM_100_VALUE);
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017a6:	2232      	movs	r2, #50	; 0x32
 80017a8:	769a      	strb	r2, [r3, #26]
	regs[REG_MAX_PWM_100_H] = HIGH_BYTE(REG_MAX_PWM_100_VALUE);
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	76da      	strb	r2, [r3, #27]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017b2:	223c      	movs	r2, #60	; 0x3c
 80017b4:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 80017b6:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017b8:	222d      	movs	r2, #45	; 0x2d
 80017ba:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017be:	225f      	movs	r2, #95	; 0x5f
 80017c0:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 80017c2:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017c4:	2205      	movs	r2, #5
 80017c6:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 80017c8:	4b3e      	ldr	r3, [pc, #248]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017ca:	2202      	movs	r2, #2
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 80017d0:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017d2:	2224      	movs	r2, #36	; 0x24
 80017d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017da:	2224      	movs	r2, #36	; 0x24
 80017dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_MIN_POSITION_ADC_L] = LOW_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80017e0:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017e2:	2232      	movs	r2, #50	; 0x32
 80017e4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MIN_POSITION_ADC_H] = HIGH_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MAX_POSITION_ADC_L] = LOW_BYTE(REG_MAX_POSITION_ADC_VALUE);
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017f2:	226e      	movs	r2, #110	; 0x6e
 80017f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MAX_POSITION_ADC_H] = HIGH_BYTE(REG_MAX_POSITION_ADC_VALUE);
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80017fa:	220f      	movs	r2, #15
 80017fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_MAX_ROTATION_DEG] = REG_MAX_ROTATION_DEG_VALUE;
 8001800:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001802:	22b4      	movs	r2, #180	; 0xb4
 8001804:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	regs[REG_INV_ROTATION_MOTOR] = REG_INV_ROTATION_MOTOR_VALUE;
 8001808:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	regs[REG_INV_ROTATION_SENSOR] = REG_INV_ROTATION_SENSOR_VALUE;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800181a:	22d0      	movs	r2, #208	; 0xd0
 800181c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001822:	2207      	movs	r2, #7
 8001824:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800182a:	2228      	movs	r2, #40	; 0x28
 800182c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001832:	2200      	movs	r2, #0
 8001834:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800183a:	22d0      	movs	r2, #208	; 0xd0
 800183c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001842:	2207      	movs	r2, #7
 8001844:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	regs[REG_PID_CURRENT_KP_L] = LOW_BYTE(REG_PID_CURRENT_KP_VALUE);
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800186a:	22e8      	movs	r2, #232	; 0xe8
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_CURRENT_KP_H] = HIGH_BYTE(REG_PID_CURRENT_KP_VALUE);
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001872:	2203      	movs	r2, #3
 8001874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_CURRENT_KI_L] = LOW_BYTE(REG_PID_CURRENT_KI_VALUE);
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_CURRENT_KI_H] = HIGH_BYTE(REG_PID_CURRENT_KI_VALUE);
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_CURRENT_KFF_L] = LOW_BYTE(REG_PID_CURRENT_KFF_VALUE);
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800188a:	220a      	movs	r2, #10
 800188c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_CURRENT_KFF_VALUE);
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_CAL_CURRENT_SENSE_A_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_CAL_CURRENT_SENSE_A_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80018a2:	2207      	movs	r2, #7
 80018a4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_CAL_CURRENT_SENSE_B_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80018aa:	22b5      	movs	r2, #181	; 0xb5
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_CAL_CURRENT_SENSE_B_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80018b2:	2204      	movs	r2, #4
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80018b8:	2140      	movs	r1, #64	; 0x40
 80018ba:	4802      	ldr	r0, [pc, #8]	; (80018c4 <factory_reset_eeprom_regs+0x184>)
 80018bc:	f000 f8e0 	bl	8001a80 <eeprom_store>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000e8 	.word	0x200000e8

080018c8 <load_eeprom_regs>:


void load_eeprom_regs()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	4802      	ldr	r0, [pc, #8]	; (80018d8 <load_eeprom_regs+0x10>)
 80018d0:	f000 f8c2 	bl	8001a58 <eeprom_restore>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000e8 	.word	0x200000e8

080018dc <store_eeprom_regs>:

void store_eeprom_regs()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80018e0:	2140      	movs	r1, #64	; 0x40
 80018e2:	4802      	ldr	r0, [pc, #8]	; (80018ec <store_eeprom_regs+0x10>)
 80018e4:	f000 f8cc 	bl	8001a80 <eeprom_store>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200000e8 	.word	0x200000e8

080018f0 <reset_ram_regs>:

void reset_ram_regs()
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

	regs[REG_TORQUE_ENABLE] = 0; 	// OFF
 80018f4:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <reset_ram_regs+0x140>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_LED] = 0;				// OFF
 80018fc:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <reset_ram_regs+0x140>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_CONTROL_MODE] = 1;		// POSITION CONTROL
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <reset_ram_regs+0x140>)
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	regs[REG_GOAL_POSITION_DEG_L] = 0;
 800190c:	4b48      	ldr	r3, [pc, #288]	; (8001a30 <reset_ram_regs+0x140>)
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = 0;
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <reset_ram_regs+0x140>)
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 800191c:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <reset_ram_regs+0x140>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001924:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <reset_ram_regs+0x140>)
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_GOAL_CURRENT_MA_L] = 0;
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <reset_ram_regs+0x140>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001934:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <reset_ram_regs+0x140>)
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_GOAL_PWM_100_L] = 0;
 800193c:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <reset_ram_regs+0x140>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	regs[REG_GOAL_PWM_100_H] = 0;
 8001944:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <reset_ram_regs+0x140>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	regs[REG_PRESENT_POSITION_DEG_L] = 0;
 800194c:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <reset_ram_regs+0x140>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = 0;
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <reset_ram_regs+0x140>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_PRESENT_VELOCITY_DPS_L] = 0;
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <reset_ram_regs+0x140>)
 800195e:	2200      	movs	r2, #0
 8001960:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = 0;
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <reset_ram_regs+0x140>)
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_PRESENT_CURRENT_MA_L] = 0;
 800196c:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <reset_ram_regs+0x140>)
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = 0;
 8001974:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <reset_ram_regs+0x140>)
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_PRESENT_VOLTAGE] = 0;
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <reset_ram_regs+0x140>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <reset_ram_regs+0x140>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	regs[REG_MOVING] = 0;
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <reset_ram_regs+0x140>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = 0;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <reset_ram_regs+0x140>)
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = 0;
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <reset_ram_regs+0x140>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	regs[REG_SETPOINT_VELOCITY_DPS_L] = 0;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <reset_ram_regs+0x140>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = 0;
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <reset_ram_regs+0x140>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	regs[REG_SETPOINT_CURRENT_MA_L] = 0;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <reset_ram_regs+0x140>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = 0;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <reset_ram_regs+0x140>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	regs[REG_SETPOINT_PWM_100_L] = 0;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <reset_ram_regs+0x140>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = 0;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <reset_ram_regs+0x140>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = 0;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <reset_ram_regs+0x140>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = 0;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <reset_ram_regs+0x140>)
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = 0;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <reset_ram_regs+0x140>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = 0;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <reset_ram_regs+0x140>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	regs[REG_POSITION_INPUT_ADC_L] = 0;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <reset_ram_regs+0x140>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = 0;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <reset_ram_regs+0x140>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	regs[REG_VOLTAGE_INPUT_ADC_L] = 0;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <reset_ram_regs+0x140>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = 0;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <reset_ram_regs+0x140>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	regs[REG_PROTOCOL_CRC_FAIL] = 0;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <reset_ram_regs+0x140>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	regs[REG_HARDWARE_ERROR_STATUS] = 0;
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <reset_ram_regs+0x140>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200000e8 	.word	0x200000e8

08001a34 <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <eeprom_empty+0x20>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	bf0c      	ite	eq
 8001a42:	2301      	moveq	r3, #1
 8001a44:	2300      	movne	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	0801f800 	.word	0x0801f800

08001a58 <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <eeprom_restore+0x20>)
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f008 fa6f 	bl	8009f4c <memcpy>
	return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	0801f800 	.word	0x0801f800
 8001a7c:	00000000 	.word	0x00000000

08001a80 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b08d      	sub	sp, #52	; 0x34
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8001a8a:	f004 f921 	bl	8005cd0 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	2301      	movs	r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	233f      	movs	r3, #63	; 0x3f
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001aa2:	f107 0210 	add.w	r2, r7, #16
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f004 fa03 	bl	8005eb8 <HAL_FLASHEx_Erase>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 8001ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 8001ac0:	f004 f928 	bl	8005d14 <HAL_FLASH_Lock>
			return result;
 8001ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ac8:	e03b      	b.n	8001b42 <eeprom_store+0xc2>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001aca:	a422      	add	r4, pc, #136	; (adr r4, 8001b54 <eeprom_store+0xd4>)
 8001acc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ad0:	e9c7 3402 	strd	r3, r4, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad8:	e02c      	b.n	8001b34 <eeprom_store+0xb4>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	18d1      	adds	r1, r2, r3
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f008 fa30 	bl	8009f4c <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 8001aec:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <eeprom_store+0xd0>)
 8001aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af0:	18d1      	adds	r1, r2, r3
 8001af2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001af6:	461a      	mov	r2, r3
 8001af8:	4623      	mov	r3, r4
 8001afa:	2000      	movs	r0, #0
 8001afc:	f004 f892 	bl	8005c24 <HAL_FLASH_Program>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 8001b06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00f      	beq.n	8001b2e <eeprom_store+0xae>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001b0e:	f004 f91b 	bl	8005d48 <HAL_FLASH_GetError>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <eeprom_store+0xa4>
				{
					HAL_FLASH_Lock();
 8001b1a:	f004 f8fb 	bl	8005d14 <HAL_FLASH_Lock>
					return error;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e00e      	b.n	8001b42 <eeprom_store+0xc2>
				}
				HAL_FLASH_Lock();
 8001b24:	f004 f8f6 	bl	8005d14 <HAL_FLASH_Lock>
				return result;
 8001b28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b2c:	e009      	b.n	8001b42 <eeprom_store+0xc2>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	3308      	adds	r3, #8
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3ce      	bcc.n	8001ada <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001b3c:	f004 f8ea 	bl	8005d14 <HAL_FLASH_Lock>
	return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3734      	adds	r7, #52	; 0x34
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	f3af 8000 	nop.w
 8001b50:	0801f800 	.word	0x0801f800
 8001b54:	deadbeef 	.word	0xdeadbeef
 8001b58:	00000000 	.word	0x00000000

08001b5c <stop_blinking>:
static uint32_t last_state_change_time[LED_COUNT]; // ms

/* Private functions ---------------------------------------------------------*/

void stop_blinking(int id)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    blinkin_period[id]=0;
 8001b64:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <stop_blinking+0x3c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_counter[id]=0;
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <stop_blinking+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2100      	movs	r1, #0
 8001b74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_infinite[id]=false;
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <stop_blinking+0x44>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=0;
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <stop_blinking+0x48>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2100      	movs	r1, #0
 8001b88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	200000b8 	.word	0x200000b8
 8001b9c:	200000bc 	.word	0x200000bc
 8001ba0:	200000c0 	.word	0x200000c0
 8001ba4:	200000c4 	.word	0x200000c4

08001ba8 <HAL_Led_Init>:

/* HAL functions ---------------------------------------------------------*/

void HAL_Led_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
    // Init private data & ALL OFF
    int id = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	e00d      	b.n	8001bd4 <HAL_Led_Init+0x2c>
    {
        stop_blinking(id);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ffcf 	bl	8001b5c <stop_blinking>
        HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8001bbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 fc33 	bl	8006434 <HAL_GPIO_WritePin>
    for(id=0;id<LED_COUNT;++id)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	ddee      	ble.n	8001bb8 <HAL_Led_Init+0x10>
    }
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_Led_Process>:

void HAL_Led_Process(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
    uint32_t const current_time = HAL_GetTick();
 8001bea:	f001 ff61 	bl	8003ab0 <HAL_GetTick>
 8001bee:	6038      	str	r0, [r7, #0]
    int id = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	e058      	b.n	8001cac <HAL_Led_Process+0xc8>
    {
        // have to blink ?
        if( blinkin_period[id]!=0 )
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <HAL_Led_Process+0xd8>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d04f      	beq.n	8001ca6 <HAL_Led_Process+0xc2>
        {
            // is it time to blink ?
            if( current_time >= last_state_change_time[id]+blinkin_period[id] )
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_Led_Process+0xdc>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	492b      	ldr	r1, [pc, #172]	; (8001cbc <HAL_Led_Process+0xd8>)
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c16:	4413      	add	r3, r2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d343      	bcc.n	8001ca6 <HAL_Led_Process+0xc2>
            {
                // blink
                if(HAL_GPIO_ReadPin(hal_led_id_to_port[id],hal_led_id_to_pin[id])==GPIO_PIN_RESET)
 8001c1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fbeb 	bl	8006404 <HAL_GPIO_ReadPin>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d108      	bne.n	8001c46 <HAL_Led_Process+0x62>
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8001c34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 fbf8 	bl	8006434 <HAL_GPIO_WritePin>
 8001c44:	e007      	b.n	8001c56 <HAL_Led_Process+0x72>
                else
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001c46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f004 fbef 	bl	8006434 <HAL_GPIO_WritePin>
                // next time
                last_state_change_time[id]+=blinkin_period[id];
 8001c56:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <HAL_Led_Process+0xdc>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	4917      	ldr	r1, [pc, #92]	; (8001cbc <HAL_Led_Process+0xd8>)
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c66:	441a      	add	r2, r3
 8001c68:	4915      	ldr	r1, [pc, #84]	; (8001cc0 <HAL_Led_Process+0xdc>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if(!blinkin_infinite[id])
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <HAL_Led_Process+0xe0>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d011      	beq.n	8001ca6 <HAL_Led_Process+0xc2>
                {
                    --blinkin_counter[id];
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_Led_Process+0xe4>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	490e      	ldr	r1, [pc, #56]	; (8001cc8 <HAL_Led_Process+0xe4>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if(blinkin_counter[id]==0)
 8001c94:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_Led_Process+0xe4>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <HAL_Led_Process+0xc2>
                    {
                        stop_blinking(id);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff5b 	bl	8001b5c <stop_blinking>
    for(id=0;id<LED_COUNT;++id)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dda3      	ble.n	8001bfa <HAL_Led_Process+0x16>
            }
            // else don't change led state
        }
        // else don't change led state
    }
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200000b8 	.word	0x200000b8
 8001cc0:	200000c4 	.word	0x200000c4
 8001cc4:	200000c0 	.word	0x200000c0
 8001cc8:	200000bc 	.word	0x200000bc

08001ccc <HAL_Led_Set>:

void HAL_Led_Set(int id)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff41 	bl	8001b5c <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001cda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f004 fba5 	bl	8006434 <HAL_GPIO_WritePin>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_Led_Reset>:

void HAL_Led_Reset(int id)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff2e 	bl	8001b5c <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8001d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fb92 	bl	8006434 <HAL_GPIO_WritePin>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_Led_Blink>:
    else
        return LED_OFF;
}

void HAL_Led_Blink(int id, int times, int period_ms)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
    blinkin_period[id]=period_ms;
 8001d24:	4917      	ldr	r1, [pc, #92]	; (8001d84 <HAL_Led_Blink+0x6c>)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    blinkin_counter[id]=times!=0?times*2-1:0;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_Led_Blink+0x24>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_Led_Blink+0x26>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	4912      	ldr	r1, [pc, #72]	; (8001d88 <HAL_Led_Blink+0x70>)
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    blinkin_infinite[id]=(times==0);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2d9      	uxtb	r1, r3
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_Led_Blink+0x74>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	460a      	mov	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=HAL_GetTick();
 8001d5c:	f001 fea8 	bl	8003ab0 <HAL_GetTick>
 8001d60:	4601      	mov	r1, r0
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_Led_Blink+0x78>)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // ON at once
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001d6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d72:	2200      	movs	r2, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fb5d 	bl	8006434 <HAL_GPIO_WritePin>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200000b8 	.word	0x200000b8
 8001d88:	200000bc 	.word	0x200000bc
 8001d8c:	200000c0 	.word	0x200000c0
 8001d90:	200000c4 	.word	0x200000c4

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9a:	f001 fe24 	bl	80039e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9e:	f000 f86b 	bl	8001e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da2:	f000 faf9 	bl	8002398 <MX_GPIO_Init>
  MX_DMA_Init();
 8001da6:	f000 fabd 	bl	8002324 <MX_DMA_Init>
  MX_TIM4_Init();
 8001daa:	f000 f997 	bl	80020dc <MX_TIM4_Init>
  MX_TIM15_Init();
 8001dae:	f000 fa19 	bl	80021e4 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001db2:	f000 fa69 	bl	8002288 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001db6:	f000 f8c9 	bl	8001f4c <MX_ADC1_Init>
  MX_OPAMP1_Init();
 8001dba:	f000 f961 	bl	8002080 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Led_Init();
 8001dbe:	f7ff fef3 	bl	8001ba8 <HAL_Led_Init>
  HAL_Led_Blink(LED0,10,150);
 8001dc2:	2296      	movs	r2, #150	; 0x96
 8001dc4:	210a      	movs	r1, #10
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff ffa6 	bl	8001d18 <HAL_Led_Blink>
  HAL_Serial_Init_Half_Duplex(
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9303      	str	r3, [sp, #12]
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <main+0xd4>)
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001de4:	4921      	ldr	r1, [pc, #132]	; (8001e6c <main+0xd8>)
 8001de6:	4822      	ldr	r0, [pc, #136]	; (8001e70 <main+0xdc>)
 8001de8:	f001 f88e 	bl	8002f08 <HAL_Serial_Init_Half_Duplex>
	GPIO_PIN_RESET,
	UART2_DIR_RX_GPIO_Port,
	UART2_DIR_RX_Pin,
	GPIO_PIN_RESET
	);
	if(eeprom_empty())
 8001dec:	f7ff fe22 	bl	8001a34 <eeprom_empty>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <main+0x66>
		factory_reset_eeprom_regs();
 8001df6:	f7ff fca3 	bl	8001740 <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8001dfa:	f7ff fd65 	bl	80018c8 <load_eeprom_regs>
	reset_ram_regs();
 8001dfe:	f7ff fd77 	bl	80018f0 <reset_ram_regs>
	APP_Control_Init();
 8001e02:	f7fe fcab 	bl	800075c <APP_Control_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start_time = HAL_GetTick();
 8001e06:	f001 fe53 	bl	8003ab0 <HAL_GetTick>
 8001e0a:	6078      	str	r0, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle LED
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8001e0c:	f001 fe50 	bl	8003ab0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d910      	bls.n	8001e3e <main+0xaa>
	{
		if(regs[REG_LED]==0)
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <main+0xe0>)
 8001e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <main+0x9a>
		{
			HAL_Led_Reset(LED0);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff ff63 	bl	8001cf2 <HAL_Led_Reset>
 8001e2c:	e007      	b.n	8001e3e <main+0xaa>
		}
		else if(regs[REG_LED]==1)
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <main+0xe0>)
 8001e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <main+0xaa>
		{
			HAL_Led_Set(LED0);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff ff47 	bl	8001ccc <HAL_Led_Set>
		}
	}
	HAL_Led_Process();
 8001e3e:	f7ff fed1 	bl	8001be4 <HAL_Led_Process>

	// Handle communication
	while(HAL_Serial_Available(&serial))
 8001e42:	e008      	b.n	8001e56 <main+0xc2>
	{
	  char c = HAL_Serial_GetChar(&serial);
 8001e44:	4809      	ldr	r0, [pc, #36]	; (8001e6c <main+0xd8>)
 8001e46:	f001 f925 	bl	8003094 <HAL_Serial_GetChar>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	70fb      	strb	r3, [r7, #3]
	  packet_handler(c);
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 feef 	bl	8002c34 <packet_handler>
	while(HAL_Serial_Available(&serial))
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <main+0xd8>)
 8001e58:	f001 f8ec 	bl	8003034 <HAL_Serial_Available>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <main+0xb0>
	}

	// regulation
	APP_Control_Process();
 8001e62:	f7fe fcd5 	bl	8000810 <APP_Control_Process>
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8001e66:	e7d1      	b.n	8001e0c <main+0x78>
 8001e68:	48000400 	.word	0x48000400
 8001e6c:	2000036c 	.word	0x2000036c
 8001e70:	20002c74 	.word	0x20002c74
 8001e74:	200000e8 	.word	0x200000e8

08001e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0a4      	sub	sp, #144	; 0x90
 8001e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e82:	2238      	movs	r2, #56	; 0x38
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f008 f86b 	bl	8009f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2244      	movs	r2, #68	; 0x44
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f008 f85d 	bl	8009f62 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eac:	f004 fbdc 	bl	8006668 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eba:	2340      	movs	r3, #64	; 0x40
 8001ebc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001eca:	234b      	movs	r3, #75	; 0x4b
 8001ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fc72 	bl	80067d0 <HAL_RCC_OscConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001ef2:	f000 facf 	bl	8002494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef6:	230f      	movs	r3, #15
 8001ef8:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efa:	2303      	movs	r3, #3
 8001efc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 ff75 	bl	8006e00 <HAL_RCC_ClockConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001f1c:	f000 faba 	bl	8002494 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001f20:	f248 0302 	movw	r3, #32770	; 0x8002
 8001f24:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f30:	463b      	mov	r3, r7
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 f980 	bl	8007238 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001f3e:	f000 faa9 	bl	8002494 <Error_Handler>
  }
}
 8001f42:	bf00      	nop
 8001f44:	3790      	adds	r7, #144	; 0x90
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2220      	movs	r2, #32
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 fffc 	bl	8009f62 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <MX_ADC1_Init+0x124>)
 8001f6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f72:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <MX_ADC1_Init+0x124>)
 8001f74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <MX_ADC1_Init+0x124>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f80:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <MX_ADC1_Init+0x124>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <MX_ADC1_Init+0x124>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <MX_ADC1_Init+0x124>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <MX_ADC1_Init+0x124>)
 8001f94:	2208      	movs	r2, #8
 8001f96:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <MX_ADC1_Init+0x124>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001fa4:	4b32      	ldr	r3, [pc, #200]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fb4:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fda:	4825      	ldr	r0, [pc, #148]	; (8002070 <MX_ADC1_Init+0x124>)
 8001fdc:	f001 ffd6 	bl	8003f8c <HAL_ADC_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001fe6:	f000 fa55 	bl	8002494 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	481e      	ldr	r0, [pc, #120]	; (8002070 <MX_ADC1_Init+0x124>)
 8001ff6:	f003 f973 	bl	80052e0 <HAL_ADCEx_MultiModeConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002000:	f000 fa48 	bl	8002494 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_ADC1_Init+0x128>)
 8002006:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002008:	2306      	movs	r3, #6
 800200a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800200c:	2303      	movs	r3, #3
 800200e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002010:	237f      	movs	r3, #127	; 0x7f
 8002012:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002014:	2304      	movs	r3, #4
 8002016:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	4619      	mov	r1, r3
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <MX_ADC1_Init+0x124>)
 8002022:	f002 fc27 	bl	8004874 <HAL_ADC_ConfigChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800202c:	f000 fa32 	bl	8002494 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_ADC1_Init+0x12c>)
 8002032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002034:	230c      	movs	r3, #12
 8002036:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4619      	mov	r1, r3
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <MX_ADC1_Init+0x124>)
 800203e:	f002 fc19 	bl	8004874 <HAL_ADC_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002048:	f000 fa24 	bl	8002494 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <MX_ADC1_Init+0x130>)
 800204e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002050:	2312      	movs	r3, #18
 8002052:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_ADC1_Init+0x124>)
 800205a:	f002 fc0b 	bl	8004874 <HAL_ADC_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002064:	f000 fa16 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200002a0 	.word	0x200002a0
 8002074:	b6902000 	.word	0xb6902000
 8002078:	3ef08000 	.word	0x3ef08000
 800207c:	2a000400 	.word	0x2a000400

08002080 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <MX_OPAMP1_Init+0x58>)
 8002088:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 800209e:	2201      	movs	r2, #1
 80020a0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 80020aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_8_OR_MINUS_7;
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 80020b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_OPAMP1_Init+0x54>)
 80020c0:	f004 f9d0 	bl	8006464 <HAL_OPAMP_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 80020ca:	f000 f9e3 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000264 	.word	0x20000264
 80020d8:	40010300 	.word	0x40010300

080020dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08e      	sub	sp, #56	; 0x38
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]
 800210a:	615a      	str	r2, [r3, #20]
 800210c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <MX_TIM4_Init+0x100>)
 8002110:	4a33      	ldr	r2, [pc, #204]	; (80021e0 <MX_TIM4_Init+0x104>)
 8002112:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 37;
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <MX_TIM4_Init+0x100>)
 8002116:	2225      	movs	r2, #37	; 0x25
 8002118:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <MX_TIM4_Init+0x100>)
 800211c:	2220      	movs	r2, #32
 800211e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <MX_TIM4_Init+0x100>)
 8002122:	2263      	movs	r2, #99	; 0x63
 8002124:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <MX_TIM4_Init+0x100>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <MX_TIM4_Init+0x100>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002132:	482a      	ldr	r0, [pc, #168]	; (80021dc <MX_TIM4_Init+0x100>)
 8002134:	f005 fa70 	bl	8007618 <HAL_TIM_Base_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800213e:	f000 f9a9 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214c:	4619      	mov	r1, r3
 800214e:	4823      	ldr	r0, [pc, #140]	; (80021dc <MX_TIM4_Init+0x100>)
 8002150:	f005 ff54 	bl	8007ffc <HAL_TIM_ConfigClockSource>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800215a:	f000 f99b 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800215e:	481f      	ldr	r0, [pc, #124]	; (80021dc <MX_TIM4_Init+0x100>)
 8002160:	f005 fb14 	bl	800778c <HAL_TIM_PWM_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800216a:	f000 f993 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800216e:	2320      	movs	r3, #32
 8002170:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4817      	ldr	r0, [pc, #92]	; (80021dc <MX_TIM4_Init+0x100>)
 800217e:	f006 fc89 	bl	8008a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002188:	f000 f984 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218c:	2360      	movs	r3, #96	; 0x60
 800218e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	480e      	ldr	r0, [pc, #56]	; (80021dc <MX_TIM4_Init+0x100>)
 80021a4:	f005 fe1a 	bl	8007ddc <HAL_TIM_PWM_ConfigChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80021ae:	f000 f971 	bl	8002494 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b6:	463b      	mov	r3, r7
 80021b8:	2204      	movs	r2, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_TIM4_Init+0x100>)
 80021be:	f005 fe0d 	bl	8007ddc <HAL_TIM_PWM_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 80021c8:	f000 f964 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <MX_TIM4_Init+0x100>)
 80021ce:	f001 fa69 	bl	80036a4 <HAL_TIM_MspPostInit>

}
 80021d2:	bf00      	nop
 80021d4:	3738      	adds	r7, #56	; 0x38
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200001cc 	.word	0x200001cc
 80021e0:	40000800 	.word	0x40000800

080021e4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <MX_TIM15_Init+0x9c>)
 8002204:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <MX_TIM15_Init+0xa0>)
 8002206:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 149;
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <MX_TIM15_Init+0x9c>)
 800220a:	2295      	movs	r2, #149	; 0x95
 800220c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <MX_TIM15_Init+0x9c>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <MX_TIM15_Init+0x9c>)
 8002216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <MX_TIM15_Init+0x9c>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <MX_TIM15_Init+0x9c>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_TIM15_Init+0x9c>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800222e:	4814      	ldr	r0, [pc, #80]	; (8002280 <MX_TIM15_Init+0x9c>)
 8002230:	f005 f9f2 	bl	8007618 <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800223a:	f000 f92b 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	4619      	mov	r1, r3
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <MX_TIM15_Init+0x9c>)
 800224c:	f005 fed6 	bl	8007ffc <HAL_TIM_ConfigClockSource>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002256:	f000 f91d 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <MX_TIM15_Init+0x9c>)
 8002268:	f006 fc14 	bl	8008a94 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002272:	f000 f90f 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000218 	.word	0x20000218
 8002284:	40014000 	.word	0x40014000

08002288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <MX_USART2_UART_Init+0x90>)
 800228e:	4a23      	ldr	r2, [pc, #140]	; (800231c <MX_USART2_UART_Init+0x94>)
 8002290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <MX_USART2_UART_Init+0x90>)
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <MX_USART2_UART_Init+0x98>)
 8002296:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MX_USART2_UART_Init+0x90>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022ac:	220c      	movs	r2, #12
 80022ae:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ce:	4812      	ldr	r0, [pc, #72]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022d0:	f006 fca8 	bl	8008c24 <HAL_UART_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80022da:	f000 f8db 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022de:	2100      	movs	r1, #0
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022e2:	f007 fd2a 	bl	8009d3a <HAL_UARTEx_SetTxFifoThreshold>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80022ec:	f000 f8d2 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f0:	2100      	movs	r1, #0
 80022f2:	4809      	ldr	r0, [pc, #36]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022f4:	f007 fd5f 	bl	8009db6 <HAL_UARTEx_SetRxFifoThreshold>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80022fe:	f000 f8c9 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_USART2_UART_Init+0x90>)
 8002304:	f007 fce0 	bl	8009cc8 <HAL_UARTEx_DisableFifoMode>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800230e:	f000 f8c1 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20002c74 	.word	0x20002c74
 800231c:	40004400 	.word	0x40004400
 8002320:	0007a120 	.word	0x0007a120

08002324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <MX_DMA_Init+0x70>)
 800232c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <MX_DMA_Init+0x70>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6493      	str	r3, [r2, #72]	; 0x48
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <MX_DMA_Init+0x70>)
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_DMA_Init+0x70>)
 8002344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <MX_DMA_Init+0x70>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6493      	str	r3, [r2, #72]	; 0x48
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_DMA_Init+0x70>)
 8002350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	200b      	movs	r0, #11
 8002360:	f003 f94d 	bl	80055fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002364:	200b      	movs	r0, #11
 8002366:	f003 f964 	bl	8005632 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	200c      	movs	r0, #12
 8002370:	f003 f945 	bl	80055fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002374:	200c      	movs	r0, #12
 8002376:	f003 f95c 	bl	8005632 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	200d      	movs	r0, #13
 8002380:	f003 f93d 	bl	80055fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002384:	200d      	movs	r0, #13
 8002386:	f003 f954 	bl	8005632 <HAL_NVIC_EnableIRQ>

}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <MX_GPIO_Init+0xf4>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	4a36      	ldr	r2, [pc, #216]	; (800248c <MX_GPIO_Init+0xf4>)
 80023b4:	f043 0320 	orr.w	r3, r3, #32
 80023b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ba:	4b34      	ldr	r3, [pc, #208]	; (800248c <MX_GPIO_Init+0xf4>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <MX_GPIO_Init+0xf4>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	4a30      	ldr	r2, [pc, #192]	; (800248c <MX_GPIO_Init+0xf4>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <MX_GPIO_Init+0xf4>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <MX_GPIO_Init+0xf4>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	4a2a      	ldr	r2, [pc, #168]	; (800248c <MX_GPIO_Init+0xf4>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <MX_GPIO_Init+0xf4>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|UART2_DIR_TX_Pin, GPIO_PIN_RESET);
 80023f6:	2200      	movs	r2, #0
 80023f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002400:	f004 f818 	bl	8006434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_DIR_RX_GPIO_Port, UART2_DIR_RX_Pin, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	2110      	movs	r1, #16
 8002408:	4821      	ldr	r0, [pc, #132]	; (8002490 <MX_GPIO_Init+0xf8>)
 800240a:	f004 f813 	bl	8006434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800240e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002414:	2311      	movs	r3, #17
 8002416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242a:	f003 fe69 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_DIR_TX_Pin */
  GPIO_InitStruct.Pin = UART2_DIR_TX_Pin;
 800242e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002434:	2311      	movs	r3, #17
 8002436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002438:	2301      	movs	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_DIR_TX_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4619      	mov	r1, r3
 8002446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244a:	f003 fe59 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_DIR_RX_Pin */
  GPIO_InitStruct.Pin = UART2_DIR_RX_Pin;
 800244e:	2310      	movs	r3, #16
 8002450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002452:	2311      	movs	r3, #17
 8002454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002456:	2301      	movs	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_DIR_RX_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4619      	mov	r1, r3
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <MX_GPIO_Init+0xf8>)
 8002466:	f003 fe4b 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 800246a:	2320      	movs	r3, #32
 800246c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002472:	2301      	movs	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	4619      	mov	r1, r3
 800247c:	4804      	ldr	r0, [pc, #16]	; (8002490 <MX_GPIO_Init+0xf8>)
 800247e:	f003 fe3f 	bl	8006100 <HAL_GPIO_Init>

}
 8002482:	bf00      	nop
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	48000400 	.word	0x48000400

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249a:	e7fe      	b.n	800249a <Error_Handler+0x6>

0800249c <fconstrain>:
    else
        return x;
}

float fconstrain(float x, float min, float max)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80024a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80024aa:	ed87 1a01 	vstr	s2, [r7, #4]
    if(x<min)
 80024ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80024b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80024b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024be:	d501      	bpl.n	80024c4 <fconstrain+0x28>
        return min;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	e00b      	b.n	80024dc <fconstrain+0x40>
    else if(x>max)
 80024c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80024c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	dd01      	ble.n	80024da <fconstrain+0x3e>
        return max;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	e000      	b.n	80024dc <fconstrain+0x40>
    else
        return x;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	ee07 3a90 	vmov	s15, r3
}
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <fmap>:
    else
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float fmap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	ed87 0a05 	vstr	s0, [r7, #20]
 80024f8:	edc7 0a04 	vstr	s1, [r7, #16]
 80024fc:	ed87 1a03 	vstr	s2, [r7, #12]
 8002500:	edc7 1a02 	vstr	s3, [r7, #8]
 8002504:	ed87 2a01 	vstr	s4, [r7, #4]
    if(x<=in_min)
 8002508:	ed97 7a05 	vldr	s14, [r7, #20]
 800250c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	d802      	bhi.n	8002520 <fmap+0x32>
        return out_min;
 800251a:	edd7 7a02 	vldr	s15, [r7, #8]
 800251e:	e025      	b.n	800256c <fmap+0x7e>
    else if(x>=in_max)
 8002520:	ed97 7a05 	vldr	s14, [r7, #20]
 8002524:	edd7 7a03 	vldr	s15, [r7, #12]
 8002528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	db02      	blt.n	8002538 <fmap+0x4a>
        return out_max;
 8002532:	edd7 7a01 	vldr	s15, [r7, #4]
 8002536:	e019      	b.n	800256c <fmap+0x7e>
    else
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002538:	ed97 7a05 	vldr	s14, [r7, #20]
 800253c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002540:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002544:	edd7 6a01 	vldr	s13, [r7, #4]
 8002548:	edd7 7a02 	vldr	s15, [r7, #8]
 800254c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002550:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002554:	ed97 7a03 	vldr	s14, [r7, #12]
 8002558:	edd7 7a04 	vldr	s15, [r7, #16]
 800255c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002564:	edd7 7a02 	vldr	s15, [r7, #8]
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <pid_reset>:
#include <string.h>
#include <stdbool.h>
#include "math_tool.h"

void pid_reset( pid_context_t * ctx )
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	ctx->err_last_one = 0.0f;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
	ctx->err_integral = 0.0f;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
	ctx->derivative_filtered = 0.0f;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <pid_process_antiwindup_clamp_with_ff>:
		float kd,
		float output_limit,
		float alpha_derivative,
		float feed_forward
)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b08e      	sub	sp, #56	; 0x38
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	61f8      	str	r0, [r7, #28]
 80025ae:	ed87 0a06 	vstr	s0, [r7, #24]
 80025b2:	edc7 0a05 	vstr	s1, [r7, #20]
 80025b6:	ed87 1a04 	vstr	s2, [r7, #16]
 80025ba:	edc7 1a03 	vstr	s3, [r7, #12]
 80025be:	ed87 2a02 	vstr	s4, [r7, #8]
 80025c2:	edc7 2a01 	vstr	s5, [r7, #4]
 80025c6:	ed87 3a00 	vstr	s6, [r7]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80025d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 8002606:	ed97 7a05 	vldr	s14, [r7, #20]
 800260a:	edd7 7a06 	vldr	s15, [r7, #24]
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002622:	ed97 7a03 	vldr	s14, [r7, #12]
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term + feed_forward;
 800262e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002632:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	ed97 7a00 	vldr	s14, [r7]
 8002646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 800264e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002652:	eef1 7a67 	vneg.f32	s15, s15
 8002656:	ed97 1a02 	vldr	s2, [r7, #8]
 800265a:	eef0 0a67 	vmov.f32	s1, s15
 800265e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002662:	f7ff ff1b 	bl	800249c <fconstrain>
 8002666:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 800266a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800266e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002672:	eeb4 7a67 	vcmp.f32	s14, s15
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 8002684:	ed97 7a06 	vldr	s14, [r7, #24]
 8002688:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800268c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	bfac      	ite	ge
 800269a:	2301      	movge	r3, #1
 800269c:	2300      	movlt	r3, #0
 800269e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 80026a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <pid_process_antiwindup_clamp_with_ff+0x110>
 80026aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <pid_process_antiwindup_clamp_with_ff+0x110>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <pid_process_antiwindup_clamp_with_ff+0x112>
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80026bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 80026c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00d      	beq.n	80026f2 <pid_process_antiwindup_clamp_with_ff+0x14c>
		ctx->err_integral = ctx->err_integral + ki*error;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80026dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80026e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80026e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	ee07 3a90 	vmov	s15, r3
}
 80026f8:	eeb0 0a67 	vmov.f32	s0, s15
 80026fc:	3738      	adds	r7, #56	; 0x38
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <pid_process_antiwindup_clamp>:
		float ki,
		float kd,
		float output_limit,
		float alpha_derivative
)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b08e      	sub	sp, #56	; 0x38
 8002706:	af00      	add	r7, sp, #0
 8002708:	61f8      	str	r0, [r7, #28]
 800270a:	ed87 0a06 	vstr	s0, [r7, #24]
 800270e:	edc7 0a05 	vstr	s1, [r7, #20]
 8002712:	ed87 1a04 	vstr	s2, [r7, #16]
 8002716:	edc7 1a03 	vstr	s3, [r7, #12]
 800271a:	ed87 2a02 	vstr	s4, [r7, #8]
 800271e:	edc7 2a01 	vstr	s5, [r7, #4]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	ed97 7a06 	vldr	s14, [r7, #24]
 800272c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002730:	edd7 7a01 	vldr	s15, [r7, #4]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800273c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002740:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	edd3 7a02 	vldr	s15, [r3, #8]
 800274a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 800275e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002762:	edd7 7a06 	vldr	s15, [r7, #24]
 8002766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	edd3 7a02 	vldr	s15, [r3, #8]
 800277a:	ed97 7a03 	vldr	s14, [r7, #12]
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term;
 8002786:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800278a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 800279e:	edd7 7a02 	vldr	s15, [r7, #8]
 80027a2:	eef1 7a67 	vneg.f32	s15, s15
 80027a6:	ed97 1a02 	vldr	s2, [r7, #8]
 80027aa:	eef0 0a67 	vmov.f32	s1, s15
 80027ae:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80027b2:	f7ff fe73 	bl	800249c <fconstrain>
 80027b6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 80027ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80027be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80027c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80027c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 80027d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80027d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80027dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	bfac      	ite	ge
 80027ea:	2301      	movge	r3, #1
 80027ec:	2300      	movlt	r3, #0
 80027ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 80027f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <pid_process_antiwindup_clamp+0x104>
 80027fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <pid_process_antiwindup_clamp+0x104>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <pid_process_antiwindup_clamp+0x106>
 8002806:	2300      	movs	r3, #0
 8002808:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800280c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 8002818:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800281c:	f083 0301 	eor.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <pid_process_antiwindup_clamp+0x140>
		ctx->err_integral = ctx->err_integral + ki*error;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	ed93 7a01 	vldr	s14, [r3, #4]
 800282c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002830:	edd7 7a06 	vldr	s15, [r7, #24]
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	ee07 3a90 	vmov	s15, r3
}
 8002848:	eeb0 0a67 	vmov.f32	s0, s15
 800284c:	3738      	adds	r7, #56	; 0x38
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	80fb      	strh	r3, [r7, #6]
 8002860:	4613      	mov	r3, r2
 8002862:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 8002864:	2300      	movs	r3, #0
 8002866:	81fb      	strh	r3, [r7, #14]
 8002868:	e019      	b.n	800289e <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b29a      	uxth	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	4053      	eors	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	b21a      	sxth	r2, r3
 8002888:	89bb      	ldrh	r3, [r7, #12]
 800288a:	490a      	ldr	r1, [pc, #40]	; (80028b4 <updateCRC+0x60>)
 800288c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002890:	b21b      	sxth	r3, r3
 8002892:	4053      	eors	r3, r2
 8002894:	b21b      	sxth	r3, r3
 8002896:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	3301      	adds	r3, #1
 800289c:	81fb      	strh	r3, [r7, #14]
 800289e:	89fa      	ldrh	r2, [r7, #14]
 80028a0:	88bb      	ldrh	r3, [r7, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d3e1      	bcc.n	800286a <updateCRC+0x16>
  }

  return crc_accum;
 80028a6:	88fb      	ldrh	r3, [r7, #6]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	08009f9c 	.word	0x08009f9c

080028b8 <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <packet_encapsulate+0x84>)
 80028c2:	22ff      	movs	r2, #255	; 0xff
 80028c4:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <packet_encapsulate+0x84>)
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <packet_encapsulate+0x84>)
 80028ce:	22fd      	movs	r2, #253	; 0xfd
 80028d0:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <packet_encapsulate+0x84>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <packet_encapsulate+0x88>)
 80028da:	78da      	ldrb	r2, [r3, #3]
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <packet_encapsulate+0x84>)
 80028de:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3302      	adds	r3, #2
 80028e6:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <packet_encapsulate+0x84>)
 80028ee:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 80028f0:	89fb      	ldrh	r3, [r7, #14]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <packet_encapsulate+0x84>)
 80028fa:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 80028fc:	89fb      	ldrh	r3, [r7, #14]
 80028fe:	3305      	adds	r3, #5
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	490d      	ldr	r1, [pc, #52]	; (800293c <packet_encapsulate+0x84>)
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff ffa4 	bl	8002854 <updateCRC>
 800290c:	4603      	mov	r3, r0
 800290e:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3307      	adds	r3, #7
 8002914:	89ba      	ldrh	r2, [r7, #12]
 8002916:	b2d1      	uxtb	r1, r2
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <packet_encapsulate+0x84>)
 800291a:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 800291c:	89bb      	ldrh	r3, [r7, #12]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3308      	adds	r3, #8
 8002926:	b2d1      	uxtb	r1, r2
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <packet_encapsulate+0x84>)
 800292a:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3309      	adds	r3, #9
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <packet_encapsulate+0x8c>)
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000314c 	.word	0x2000314c
 8002940:	200000e8 	.word	0x200000e8
 8002944:	200000d0 	.word	0x200000d0

08002948 <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 800294e:	4b9b      	ldr	r3, [pc, #620]	; (8002bbc <instruction_handler+0x274>)
 8002950:	79db      	ldrb	r3, [r3, #7]
 8002952:	2b06      	cmp	r3, #6
 8002954:	f000 811a 	beq.w	8002b8c <instruction_handler+0x244>
 8002958:	2b06      	cmp	r3, #6
 800295a:	dc06      	bgt.n	800296a <instruction_handler+0x22>
 800295c:	2b02      	cmp	r3, #2
 800295e:	d02b      	beq.n	80029b8 <instruction_handler+0x70>
 8002960:	2b03      	cmp	r3, #3
 8002962:	d070      	beq.n	8002a46 <instruction_handler+0xfe>
 8002964:	2b01      	cmp	r3, #1
 8002966:	d00a      	beq.n	800297e <instruction_handler+0x36>
 8002968:	e148      	b.n	8002bfc <instruction_handler+0x2b4>
 800296a:	2b82      	cmp	r3, #130	; 0x82
 800296c:	f000 8157 	beq.w	8002c1e <instruction_handler+0x2d6>
 8002970:	2b83      	cmp	r3, #131	; 0x83
 8002972:	f000 80b5 	beq.w	8002ae0 <instruction_handler+0x198>
 8002976:	2b08      	cmp	r3, #8
 8002978:	f000 812a 	beq.w	8002bd0 <instruction_handler+0x288>
 800297c:	e13e      	b.n	8002bfc <instruction_handler+0x2b4>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800297e:	4b90      	ldr	r3, [pc, #576]	; (8002bc0 <instruction_handler+0x278>)
 8002980:	2255      	movs	r2, #85	; 0x55
 8002982:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8002984:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <instruction_handler+0x278>)
 8002986:	2200      	movs	r2, #0
 8002988:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 800298a:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <instruction_handler+0x27c>)
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <instruction_handler+0x278>)
 8002990:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 8002992:	4b8c      	ldr	r3, [pc, #560]	; (8002bc4 <instruction_handler+0x27c>)
 8002994:	785a      	ldrb	r2, [r3, #1]
 8002996:	4b8a      	ldr	r3, [pc, #552]	; (8002bc0 <instruction_handler+0x278>)
 8002998:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 800299a:	4b8a      	ldr	r3, [pc, #552]	; (8002bc4 <instruction_handler+0x27c>)
 800299c:	789a      	ldrb	r2, [r3, #2]
 800299e:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <instruction_handler+0x278>)
 80029a0:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 80029a2:	2005      	movs	r0, #5
 80029a4:	f7ff ff88 	bl	80028b8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80029a8:	4b87      	ldr	r3, [pc, #540]	; (8002bc8 <instruction_handler+0x280>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4984      	ldr	r1, [pc, #528]	; (8002bc0 <instruction_handler+0x278>)
 80029b0:	4886      	ldr	r0, [pc, #536]	; (8002bcc <instruction_handler+0x284>)
 80029b2:	f000 fbbf 	bl	8003134 <HAL_Serial_Write>
		}
		break;
 80029b6:	e133      	b.n	8002c20 <instruction_handler+0x2d8>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80029b8:	4b80      	ldr	r3, [pc, #512]	; (8002bbc <instruction_handler+0x274>)
 80029ba:	7a5b      	ldrb	r3, [r3, #9]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	b21a      	sxth	r2, r3
 80029c0:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <instruction_handler+0x274>)
 80029c2:	7a1b      	ldrb	r3, [r3, #8]
 80029c4:	b21b      	sxth	r3, r3
 80029c6:	4313      	orrs	r3, r2
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80029cc:	4b7b      	ldr	r3, [pc, #492]	; (8002bbc <instruction_handler+0x274>)
 80029ce:	7adb      	ldrb	r3, [r3, #11]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	4b79      	ldr	r3, [pc, #484]	; (8002bbc <instruction_handler+0x274>)
 80029d6:	7a9b      	ldrb	r3, [r3, #10]
 80029d8:	b21b      	sxth	r3, r3
 80029da:	4313      	orrs	r3, r2
 80029dc:	b21b      	sxth	r3, r3
 80029de:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	2b81      	cmp	r3, #129	; 0x81
 80029e4:	d81e      	bhi.n	8002a24 <instruction_handler+0xdc>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <instruction_handler+0x278>)
 80029e8:	2255      	movs	r2, #85	; 0x55
 80029ea:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80029ec:	4b74      	ldr	r3, [pc, #464]	; (8002bc0 <instruction_handler+0x278>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 80029f2:	2300      	movs	r3, #0
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f6:	e00b      	b.n	8002a10 <instruction_handler+0xc8>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 80029f8:	887a      	ldrh	r2, [r7, #2]
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	441a      	add	r2, r3
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	3309      	adds	r3, #9
 8002a02:	4970      	ldr	r1, [pc, #448]	; (8002bc4 <instruction_handler+0x27c>)
 8002a04:	5c89      	ldrb	r1, [r1, r2]
 8002a06:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <instruction_handler+0x278>)
 8002a08:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a10:	883b      	ldrh	r3, [r7, #0]
 8002a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3ef      	bcc.n	80029f8 <instruction_handler+0xb0>
				packet_encapsulate(2+length);
 8002a18:	883b      	ldrh	r3, [r7, #0]
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff4b 	bl	80028b8 <packet_encapsulate>
 8002a22:	e008      	b.n	8002a36 <instruction_handler+0xee>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002a24:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <instruction_handler+0x278>)
 8002a26:	2255      	movs	r2, #85	; 0x55
 8002a28:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 8002a2a:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <instruction_handler+0x278>)
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8002a30:	2002      	movs	r0, #2
 8002a32:	f7ff ff41 	bl	80028b8 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002a36:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <instruction_handler+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4960      	ldr	r1, [pc, #384]	; (8002bc0 <instruction_handler+0x278>)
 8002a3e:	4863      	ldr	r0, [pc, #396]	; (8002bcc <instruction_handler+0x284>)
 8002a40:	f000 fb78 	bl	8003134 <HAL_Serial_Write>
		}
		break;
 8002a44:	e0ec      	b.n	8002c20 <instruction_handler+0x2d8>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8002a46:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <instruction_handler+0x274>)
 8002a48:	7a5b      	ldrb	r3, [r3, #9]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	; (8002bbc <instruction_handler+0x274>)
 8002a50:	7a1b      	ldrb	r3, [r3, #8]
 8002a52:	b21b      	sxth	r3, r3
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 8002a5a:	4b58      	ldr	r3, [pc, #352]	; (8002bbc <instruction_handler+0x274>)
 8002a5c:	799b      	ldrb	r3, [r3, #6]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	4b56      	ldr	r3, [pc, #344]	; (8002bbc <instruction_handler+0x274>)
 8002a64:	795b      	ldrb	r3, [r3, #5]
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b05      	subs	r3, #5
 8002a70:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b81      	cmp	r3, #129	; 0x81
 8002a76:	d822      	bhi.n	8002abe <instruction_handler+0x176>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7c:	e00c      	b.n	8002a98 <instruction_handler+0x150>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	f103 020a 	add.w	r2, r3, #10
 8002a84:	88f9      	ldrh	r1, [r7, #6]
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	440b      	add	r3, r1
 8002a8a:	494c      	ldr	r1, [pc, #304]	; (8002bbc <instruction_handler+0x274>)
 8002a8c:	5c89      	ldrb	r1, [r1, r2]
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <instruction_handler+0x27c>)
 8002a90:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	3301      	adds	r3, #1
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a98:	88bb      	ldrh	r3, [r7, #4]
 8002a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d3ee      	bcc.n	8002a7e <instruction_handler+0x136>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	2b3f      	cmp	r3, #63	; 0x3f
 8002aa4:	d801      	bhi.n	8002aaa <instruction_handler+0x162>
				{
					store_eeprom_regs();
 8002aa6:	f7fe ff19 	bl	80018dc <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002aaa:	4b45      	ldr	r3, [pc, #276]	; (8002bc0 <instruction_handler+0x278>)
 8002aac:	2255      	movs	r2, #85	; 0x55
 8002aae:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <instruction_handler+0x278>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8002ab6:	2002      	movs	r0, #2
 8002ab8:	f7ff fefe 	bl	80028b8 <packet_encapsulate>
 8002abc:	e008      	b.n	8002ad0 <instruction_handler+0x188>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002abe:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <instruction_handler+0x278>)
 8002ac0:	2255      	movs	r2, #85	; 0x55
 8002ac2:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <instruction_handler+0x278>)
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8002aca:	2002      	movs	r0, #2
 8002acc:	f7ff fef4 	bl	80028b8 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002ad0:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <instruction_handler+0x280>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	493a      	ldr	r1, [pc, #232]	; (8002bc0 <instruction_handler+0x278>)
 8002ad8:	483c      	ldr	r0, [pc, #240]	; (8002bcc <instruction_handler+0x284>)
 8002ada:	f000 fb2b 	bl	8003134 <HAL_Serial_Write>
		}
		break;
 8002ade:	e09f      	b.n	8002c20 <instruction_handler+0x2d8>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 8002ae0:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <instruction_handler+0x274>)
 8002ae2:	799b      	ldrb	r3, [r3, #6]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	b21a      	sxth	r2, r3
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <instruction_handler+0x274>)
 8002aea:	795b      	ldrb	r3, [r3, #5]
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b07      	subs	r3, #7
 8002af6:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8002af8:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <instruction_handler+0x274>)
 8002afa:	7a5b      	ldrb	r3, [r3, #9]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	b21a      	sxth	r2, r3
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <instruction_handler+0x274>)
 8002b02:	7a1b      	ldrb	r3, [r3, #8]
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <instruction_handler+0x274>)
 8002b0e:	7adb      	ldrb	r3, [r3, #11]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <instruction_handler+0x274>)
 8002b14:	7a92      	ldrb	r2, [r2, #10]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 8002b1a:	8bfa      	ldrh	r2, [r7, #30]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <instruction_handler+0x27c>)
 8002b28:	78db      	ldrb	r3, [r3, #3]
 8002b2a:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b30:	e027      	b.n	8002b82 <instruction_handler+0x23a>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	3301      	adds	r3, #1
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 8002b40:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <instruction_handler+0x274>)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4413      	add	r3, r2
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d114      	bne.n	8002b7c <instruction_handler+0x234>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	e00d      	b.n	8002b74 <instruction_handler+0x22c>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	8bb9      	ldrh	r1, [r7, #28]
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	440b      	add	r3, r1
 8002b66:	4915      	ldr	r1, [pc, #84]	; (8002bbc <instruction_handler+0x274>)
 8002b68:	5c89      	ldrb	r1, [r1, r2]
 8002b6a:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <instruction_handler+0x27c>)
 8002b6c:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	3301      	adds	r3, #1
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	6a3a      	ldr	r2, [r7, #32]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3ed      	bcc.n	8002b58 <instruction_handler+0x210>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	3301      	adds	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	8afb      	ldrh	r3, [r7, #22]
 8002b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3d3      	bcc.n	8002b32 <instruction_handler+0x1ea>
				}
			}
		}
		break;
 8002b8a:	e049      	b.n	8002c20 <instruction_handler+0x2d8>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 8002b8c:	f7fe fdd8 	bl	8001740 <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <instruction_handler+0x278>)
 8002b92:	2255      	movs	r2, #85	; 0x55
 8002b94:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <instruction_handler+0x278>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f7ff fe8b 	bl	80028b8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <instruction_handler+0x280>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4905      	ldr	r1, [pc, #20]	; (8002bc0 <instruction_handler+0x278>)
 8002baa:	4808      	ldr	r0, [pc, #32]	; (8002bcc <instruction_handler+0x284>)
 8002bac:	f000 fac2 	bl	8003134 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8002bb0:	2064      	movs	r0, #100	; 0x64
 8002bb2:	f000 ff89 	bl	8003ac8 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8002bb6:	f002 fd4a 	bl	800564e <HAL_NVIC_SystemReset>
		}
		break;
 8002bba:	e031      	b.n	8002c20 <instruction_handler+0x2d8>
 8002bbc:	20002d00 	.word	0x20002d00
 8002bc0:	2000314c 	.word	0x2000314c
 8002bc4:	200000e8 	.word	0x200000e8
 8002bc8:	200000d0 	.word	0x200000d0
 8002bcc:	2000036c 	.word	0x2000036c
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <instruction_handler+0x2e0>)
 8002bd2:	2255      	movs	r2, #85	; 0x55
 8002bd4:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <instruction_handler+0x2e0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f7ff fe6b 	bl	80028b8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <instruction_handler+0x2e4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	490f      	ldr	r1, [pc, #60]	; (8002c28 <instruction_handler+0x2e0>)
 8002bea:	4811      	ldr	r0, [pc, #68]	; (8002c30 <instruction_handler+0x2e8>)
 8002bec:	f000 faa2 	bl	8003134 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8002bf0:	2064      	movs	r0, #100	; 0x64
 8002bf2:	f000 ff69 	bl	8003ac8 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8002bf6:	f002 fd2a 	bl	800564e <HAL_NVIC_SystemReset>
		}
		break;
 8002bfa:	e011      	b.n	8002c20 <instruction_handler+0x2d8>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <instruction_handler+0x2e0>)
 8002bfe:	2255      	movs	r2, #85	; 0x55
 8002c00:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <instruction_handler+0x2e0>)
 8002c04:	2202      	movs	r2, #2
 8002c06:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f7ff fe55 	bl	80028b8 <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <instruction_handler+0x2e4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4904      	ldr	r1, [pc, #16]	; (8002c28 <instruction_handler+0x2e0>)
 8002c16:	4806      	ldr	r0, [pc, #24]	; (8002c30 <instruction_handler+0x2e8>)
 8002c18:	f000 fa8c 	bl	8003134 <HAL_Serial_Write>
		break;
 8002c1c:	e000      	b.n	8002c20 <instruction_handler+0x2d8>
		break;
 8002c1e:	bf00      	nop
		// nope
	}
}
 8002c20:	bf00      	nop
 8002c22:	3730      	adds	r7, #48	; 0x30
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	2000314c 	.word	0x2000314c
 8002c2c:	200000d0 	.word	0x200000d0
 8002c30:	2000036c 	.word	0x2000036c

08002c34 <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 8002c3e:	4b84      	ldr	r3, [pc, #528]	; (8002e50 <packet_handler+0x21c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	f200 8100 	bhi.w	8002e48 <packet_handler+0x214>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <packet_handler+0x1c>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	08002c8f 	.word	0x08002c8f
 8002c58:	08002cbf 	.word	0x08002cbf
 8002c5c:	08002cdb 	.word	0x08002cdb
 8002c60:	08002cf7 	.word	0x08002cf7
 8002c64:	08002d19 	.word	0x08002d19
 8002c68:	08002d27 	.word	0x08002d27
 8002c6c:	08002d5f 	.word	0x08002d5f
 8002c70:	08002d8d 	.word	0x08002d8d
 8002c74:	08002da9 	.word	0x08002da9
	{
	case HEADER1:
		if(c==0xFF)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	2bff      	cmp	r3, #255	; 0xff
 8002c7c:	f040 80e1 	bne.w	8002e42 <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8002c80:	4a74      	ldr	r2, [pc, #464]	; (8002e54 <packet_handler+0x220>)
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <packet_handler+0x21c>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002c8c:	e0d9      	b.n	8002e42 <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	2bff      	cmp	r3, #255	; 0xff
 8002c92:	d106      	bne.n	8002ca2 <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 8002c94:	4a6f      	ldr	r2, [pc, #444]	; (8002e54 <packet_handler+0x220>)
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 8002c9a:	4b6d      	ldr	r3, [pc, #436]	; (8002e50 <packet_handler+0x21c>)
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8002ca0:	e0d2      	b.n	8002e48 <packet_handler+0x214>
		else if(c==0xFD)
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	2bfd      	cmp	r3, #253	; 0xfd
 8002ca6:	d106      	bne.n	8002cb6 <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8002ca8:	4a6a      	ldr	r2, [pc, #424]	; (8002e54 <packet_handler+0x220>)
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8002cae:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <packet_handler+0x21c>)
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	701a      	strb	r2, [r3, #0]
		break;
 8002cb4:	e0c8      	b.n	8002e48 <packet_handler+0x214>
			packet_state = HEADER1;
 8002cb6:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <packet_handler+0x21c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
		break;
 8002cbc:	e0c4      	b.n	8002e48 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2bfd      	cmp	r3, #253	; 0xfd
 8002cc2:	d106      	bne.n	8002cd2 <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8002cc4:	4a63      	ldr	r2, [pc, #396]	; (8002e54 <packet_handler+0x220>)
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8002cca:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <packet_handler+0x21c>)
 8002ccc:	2203      	movs	r2, #3
 8002cce:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002cd0:	e0ba      	b.n	8002e48 <packet_handler+0x214>
			packet_state = HEADER1;
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <packet_handler+0x21c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
		break;
 8002cd8:	e0b6      	b.n	8002e48 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 8002ce0:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <packet_handler+0x220>)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 8002ce6:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <packet_handler+0x21c>)
 8002ce8:	2204      	movs	r2, #4
 8002cea:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002cec:	e0ac      	b.n	8002e48 <packet_handler+0x214>
			packet_state = HEADER1;
 8002cee:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <packet_handler+0x21c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
		break;
 8002cf4:	e0a8      	b.n	8002e48 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2bfc      	cmp	r3, #252	; 0xfc
 8002cfa:	d902      	bls.n	8002d02 <packet_handler+0xce>
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	2bfe      	cmp	r3, #254	; 0xfe
 8002d00:	d106      	bne.n	8002d10 <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 8002d02:	4a54      	ldr	r2, [pc, #336]	; (8002e54 <packet_handler+0x220>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 8002d08:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <packet_handler+0x21c>)
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002d0e:	e09b      	b.n	8002e48 <packet_handler+0x214>
			packet_state = HEADER1;
 8002d10:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <packet_handler+0x21c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
		break;
 8002d16:	e097      	b.n	8002e48 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 8002d18:	4a4e      	ldr	r2, [pc, #312]	; (8002e54 <packet_handler+0x220>)
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <packet_handler+0x21c>)
 8002d20:	2206      	movs	r2, #6
 8002d22:	701a      	strb	r2, [r3, #0]
		break;
 8002d24:	e090      	b.n	8002e48 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 8002d26:	4a4b      	ldr	r2, [pc, #300]	; (8002e54 <packet_handler+0x220>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <packet_handler+0x220>)
 8002d2e:	799b      	ldrb	r3, [r3, #6]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	4a48      	ldr	r2, [pc, #288]	; (8002e54 <packet_handler+0x220>)
 8002d34:	7952      	ldrb	r2, [r2, #5]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	3b02      	subs	r3, #2
 8002d3a:	4a47      	ldr	r2, [pc, #284]	; (8002e58 <packet_handler+0x224>)
 8002d3c:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 8002d3e:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <packet_handler+0x224>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d46:	d806      	bhi.n	8002d56 <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <packet_handler+0x21c>)
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <packet_handler+0x228>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002d54:	e078      	b.n	8002e48 <packet_handler+0x214>
			packet_state = HEADER1;
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <packet_handler+0x21c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
		break;
 8002d5c:	e074      	b.n	8002e48 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <packet_handler+0x228>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	493c      	ldr	r1, [pc, #240]	; (8002e54 <packet_handler+0x220>)
 8002d64:	79fa      	ldrb	r2, [r7, #7]
 8002d66:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8002d68:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <packet_handler+0x228>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <packet_handler+0x228>)
 8002d70:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 8002d72:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <packet_handler+0x224>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	4a37      	ldr	r2, [pc, #220]	; (8002e58 <packet_handler+0x224>)
 8002d7a:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <packet_handler+0x224>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d160      	bne.n	8002e46 <packet_handler+0x212>
			packet_state = CRC1;
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <packet_handler+0x21c>)
 8002d86:	2208      	movs	r2, #8
 8002d88:	701a      	strb	r2, [r3, #0]
		break;
 8002d8a:	e05c      	b.n	8002e46 <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8002d8c:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <packet_handler+0x228>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4930      	ldr	r1, [pc, #192]	; (8002e54 <packet_handler+0x220>)
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8002d96:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <packet_handler+0x228>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <packet_handler+0x228>)
 8002d9e:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <packet_handler+0x21c>)
 8002da2:	2209      	movs	r2, #9
 8002da4:	701a      	strb	r2, [r3, #0]
		break;
 8002da6:	e04f      	b.n	8002e48 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <packet_handler+0x228>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4929      	ldr	r1, [pc, #164]	; (8002e54 <packet_handler+0x220>)
 8002dae:	79fa      	ldrb	r2, [r7, #7]
 8002db0:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <packet_handler+0x228>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <packet_handler+0x220>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <packet_handler+0x228>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	4923      	ldr	r1, [pc, #140]	; (8002e54 <packet_handler+0x220>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	b21b      	sxth	r3, r3
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <packet_handler+0x228>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	491d      	ldr	r1, [pc, #116]	; (8002e54 <packet_handler+0x220>)
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7ff fd38 	bl	8002854 <updateCRC>
 8002de4:	4603      	mov	r3, r0
 8002de6:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 8002de8:	89ba      	ldrh	r2, [r7, #12]
 8002dea:	89fb      	ldrh	r3, [r7, #14]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d10c      	bne.n	8002e0a <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <packet_handler+0x220>)
 8002df2:	791a      	ldrb	r2, [r3, #4]
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <packet_handler+0x22c>)
 8002df6:	78db      	ldrb	r3, [r3, #3]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d003      	beq.n	8002e04 <packet_handler+0x1d0>
 8002dfc:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <packet_handler+0x220>)
 8002dfe:	791b      	ldrb	r3, [r3, #4]
 8002e00:	2bfe      	cmp	r3, #254	; 0xfe
 8002e02:	d11a      	bne.n	8002e3a <packet_handler+0x206>
				instruction_handler();
 8002e04:	f7ff fda0 	bl	8002948 <instruction_handler>
 8002e08:	e017      	b.n	8002e3a <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <packet_handler+0x22c>)
 8002e0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e10:	3301      	adds	r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <packet_handler+0x22c>)
 8002e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <packet_handler+0x230>)
 8002e1c:	2255      	movs	r2, #85	; 0x55
 8002e1e:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <packet_handler+0x230>)
 8002e22:	2203      	movs	r2, #3
 8002e24:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8002e26:	2002      	movs	r0, #2
 8002e28:	f7ff fd46 	bl	80028b8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <packet_handler+0x234>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	490c      	ldr	r1, [pc, #48]	; (8002e64 <packet_handler+0x230>)
 8002e34:	480d      	ldr	r0, [pc, #52]	; (8002e6c <packet_handler+0x238>)
 8002e36:	f000 f97d 	bl	8003134 <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <packet_handler+0x21c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
		break;
 8002e40:	e002      	b.n	8002e48 <packet_handler+0x214>
		break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <packet_handler+0x214>
		break;
 8002e46:	bf00      	nop
	}
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200000d4 	.word	0x200000d4
 8002e54:	20002d00 	.word	0x20002d00
 8002e58:	200000cc 	.word	0x200000cc
 8002e5c:	200000c8 	.word	0x200000c8
 8002e60:	200000e8 	.word	0x200000e8
 8002e64:	2000314c 	.word	0x2000314c
 8002e68:	200000d0 	.word	0x200000d0
 8002e6c:	2000036c 	.word	0x2000036c

08002e70 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8002e78:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e032      	b.n	8002ee6 <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <HAL_UART_ErrorCallback+0x90>)
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d124      	bne.n	8002edc <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_UART_ErrorCallback+0x90>)
 8002e98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4917      	ldr	r1, [pc, #92]	; (8002f00 <HAL_UART_ErrorCallback+0x90>)
 8002ea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ea6:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8002eaa:	3210      	adds	r2, #16
 8002eac:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002eb0:	3310      	adds	r3, #16
 8002eb2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_UART_ErrorCallback+0x90>)
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <HAL_UART_ErrorCallback+0x90>)
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002ece:	3310      	adds	r3, #16
 8002ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f005 ff75 	bl	8008dc4 <HAL_UART_Receive_DMA>
		   break;
 8002eda:	e00b      	b.n	8002ef4 <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	4a06      	ldr	r2, [pc, #24]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_UART_ErrorCallback+0x8c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_UART_ErrorCallback+0x94>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1c5      	bne.n	8002e80 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200000e0 	.word	0x200000e0
 8002f00:	200000d8 	.word	0x200000d8
 8002f04:	200000dc 	.word	0x200000dc

08002f08 <HAL_Serial_Init_Half_Duplex>:
		GPIO_PinState PinState_TX,
		GPIO_TypeDef *GPIOx_RX,
		uint16_t GPIO_Pin_RX,
		GPIO_PinState PinState_RX
)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	807b      	strh	r3, [r7, #2]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8002f16:	4b45      	ldr	r3, [pc, #276]	; (800302c <HAL_Serial_Init_Half_Duplex+0x124>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	4943      	ldr	r1, [pc, #268]	; (800302c <HAL_Serial_Init_Half_Duplex+0x124>)
 8002f1e:	600a      	str	r2, [r1, #0]
 8002f20:	4943      	ldr	r1, [pc, #268]	; (8003030 <HAL_Serial_Init_Half_Duplex+0x128>)
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f34:	3304      	adds	r3, #4
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f40:	3308      	adds	r3, #8
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8002f58:	3210      	adds	r2, #16
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f60:	3310      	adds	r3, #16
 8002f62:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f6e:	3310      	adds	r3, #16
 8002f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f74:	4619      	mov	r1, r3
 8002f76:	f005 ff25 	bl	8008dc4 <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = true;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f80:	3314      	adds	r3, #20
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = GPIOx_TX;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f8c:	3318      	adds	r3, #24
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = GPIO_Pin_TX;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f98:	331c      	adds	r3, #28
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = PinState_TX;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fa4:	331e      	adds	r3, #30
 8002fa6:	7e3a      	ldrb	r2, [r7, #24]
 8002fa8:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = GPIOx_RX;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fb0:	3320      	adds	r3, #32
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = GPIO_Pin_RX;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fbc:	3324      	adds	r3, #36	; 0x24
 8002fbe:	8c3a      	ldrh	r2, [r7, #32]
 8002fc0:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = PinState_RX;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fc8:	3326      	adds	r3, #38	; 0x26
 8002fca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fce:	701a      	strb	r2, [r3, #0]
    // TX = OFF
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fd6:	3318      	adds	r3, #24
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fe0:	331c      	adds	r3, #28
 8002fe2:	8819      	ldrh	r1, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fea:	331e      	adds	r3, #30
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf0c      	ite	eq
 8002ff2:	2301      	moveq	r3, #1
 8002ff4:	2300      	movne	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f003 fa1b 	bl	8006434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003004:	3320      	adds	r3, #32
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800300e:	3324      	adds	r3, #36	; 0x24
 8003010:	8819      	ldrh	r1, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003018:	3326      	adds	r3, #38	; 0x26
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f003 fa09 	bl	8006434 <HAL_GPIO_WritePin>
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200000dc 	.word	0x200000dc
 8003030:	200000d8 	.word	0x200000d8

08003034 <HAL_Serial_Available>:

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_Serial_Available+0x14>
        return 0;
 8003044:	2300      	movs	r3, #0
 8003046:	e01f      	b.n	8003088 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800304e:	3310      	adds	r3, #16
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	6852      	ldr	r2, [r2, #4]
 800305a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 800305e:	4413      	add	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003068:	3310      	adds	r3, #16
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d303      	bcc.n	800307e <HAL_Serial_Available+0x4a>
        return head-tail;
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	e004      	b.n	8003088 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_Serial_GetChar+0x14>
        return 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e03f      	b.n	8003128 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80030ae:	3310      	adds	r3, #16
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	6852      	ldr	r2, [r2, #4]
 80030ba:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 80030be:	4413      	add	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80030c8:	3310      	adds	r3, #16
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d027      	beq.n	8003126 <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80030dc:	3310      	adds	r3, #16
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	1c51      	adds	r1, r2, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80030e8:	3310      	adds	r3, #16
 80030ea:	6019      	str	r1, [r3, #0]
 80030ec:	7813      	ldrb	r3, [r2, #0]
 80030ee:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80030f6:	3310      	adds	r3, #16
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003100:	3310      	adds	r3, #16
 8003102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003106:	429a      	cmp	r2, r3
 8003108:	d30b      	bcc.n	8003122 <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003110:	3310      	adds	r3, #16
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800311e:	3310      	adds	r3, #16
 8003120:	601a      	str	r2, [r3, #0]
        return c;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	e000      	b.n	8003128 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_Serial_Write+0x18>
        return 0;
 8003148:	2300      	movs	r3, #0
 800314a:	e09a      	b.n	8003282 <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003152:	3304      	adds	r3, #4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4403      	add	r3, r0
 8003164:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003168:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003170:	3304      	adds	r3, #4
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	019b      	lsls	r3, r3, #6
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	461a      	mov	r2, r3
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f006 fede 	bl	8009f4c <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003196:	3304      	adds	r3, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80031a6:	3304      	adds	r3, #4
 80031a8:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80031b0:	330c      	adds	r3, #12
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d163      	bne.n	8003280 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80031be:	330c      	adds	r3, #12
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80031ca:	3314      	adds	r3, #20
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d028      	beq.n	8003224 <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80031d8:	3318      	adds	r3, #24
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80031e2:	331c      	adds	r3, #28
 80031e4:	8819      	ldrh	r1, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80031ec:	331e      	adds	r3, #30
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	f003 f91f 	bl	8006434 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80031fc:	3320      	adds	r3, #32
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003206:	3324      	adds	r3, #36	; 0x24
 8003208:	8819      	ldrh	r1, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003210:	3326      	adds	r3, #38	; 0x26
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	f003 f908 	bl	8006434 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800322e:	3308      	adds	r3, #8
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003246:	3308      	adds	r3, #8
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68f9      	ldr	r1, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	019b      	lsls	r3, r3, #6
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800325a:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	4621      	mov	r1, r4
 8003262:	f005 fd2f 	bl	8008cc4 <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800326c:	3308      	adds	r3, #8
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	f003 021f 	and.w	r2, r3, #31
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800327c:	3308      	adds	r3, #8
 800327e:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 8003280:	687b      	ldr	r3, [r7, #4]
}
 8003282:	4618      	mov	r0, r3
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}
	...

0800328c <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 8003294:	4b71      	ldr	r3, [pc, #452]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e0d0      	b.n	800343e <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 800329c:	4b6f      	ldr	r3, [pc, #444]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6f      	ldr	r2, [pc, #444]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80032a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f040 80c2 	bne.w	8003434 <HAL_UART_TxCpltCallback+0x1a8>
 80032b0:	4b6a      	ldr	r3, [pc, #424]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80032be:	330c      	adds	r3, #12
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	f040 80b6 	bne.w	8003434 <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 80032c8:	4b64      	ldr	r3, [pc, #400]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a64      	ldr	r2, [pc, #400]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80032d6:	3304      	adds	r3, #4
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b60      	ldr	r3, [pc, #384]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4960      	ldr	r1, [pc, #384]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80032e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032e4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80032e8:	3308      	adds	r3, #8
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d04a      	beq.n	8003386 <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 80032f0:	4b5a      	ldr	r3, [pc, #360]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a5a      	ldr	r2, [pc, #360]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80032f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 80032fa:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 80032fc:	4b57      	ldr	r3, [pc, #348]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a57      	ldr	r2, [pc, #348]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 8003302:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003306:	4b55      	ldr	r3, [pc, #340]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a55      	ldr	r2, [pc, #340]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003314:	3308      	adds	r3, #8
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	019b      	lsls	r3, r3, #6
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8003324:	4b4d      	ldr	r3, [pc, #308]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a4d      	ldr	r2, [pc, #308]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 800332a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800332e:	4b4b      	ldr	r3, [pc, #300]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a4b      	ldr	r2, [pc, #300]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 8003334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003338:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800333c:	3308      	adds	r3, #8
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	019b      	lsls	r3, r3, #6
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800334e:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	4621      	mov	r1, r4
 8003356:	f005 fcb5 	bl	8008cc4 <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 800335a:	4b40      	ldr	r3, [pc, #256]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a40      	ldr	r2, [pc, #256]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 8003360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003364:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003368:	3308      	adds	r3, #8
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	493b      	ldr	r1, [pc, #236]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 8003374:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003378:	f002 021f 	and.w	r2, r2, #31
 800337c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003380:	3308      	adds	r3, #8
 8003382:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 8003384:	e064      	b.n	8003450 <HAL_UART_TxCpltCallback+0x1c4>
				hserial_table[id]->tx_dma = 0;
 8003386:	4b35      	ldr	r3, [pc, #212]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a35      	ldr	r2, [pc, #212]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003394:	330c      	adds	r3, #12
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a30      	ldr	r2, [pc, #192]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80033a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80033a8:	3314      	adds	r3, #20
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d04f      	beq.n	8003450 <HAL_UART_TxCpltCallback+0x1c4>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 80033b0:	4b2a      	ldr	r3, [pc, #168]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2a      	ldr	r2, [pc, #168]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80033be:	3318      	adds	r3, #24
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a26      	ldr	r2, [pc, #152]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80033d0:	331c      	adds	r3, #28
 80033d2:	8819      	ldrh	r1, [r3, #0]
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a21      	ldr	r2, [pc, #132]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80033da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033de:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80033e2:	331e      	adds	r3, #30
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	f003 f81f 	bl	8006434 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 80033fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003400:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003404:	3320      	adds	r3, #32
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 800340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003412:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003416:	3324      	adds	r3, #36	; 0x24
 8003418:	8819      	ldrh	r1, [r3, #0]
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a10      	ldr	r2, [pc, #64]	; (8003460 <HAL_UART_TxCpltCallback+0x1d4>)
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003428:	3326      	adds	r3, #38	; 0x26
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	f003 f801 	bl	8006434 <HAL_GPIO_WritePin>
           break;
 8003432:	e00d      	b.n	8003450 <HAL_UART_TxCpltCallback+0x1c4>
    for(id=0;id!=serial_counter;++id)
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_UART_TxCpltCallback+0x1d0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_UART_TxCpltCallback+0x1d8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	f47f af27 	bne.w	800329c <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 800344e:	e000      	b.n	8003452 <HAL_UART_TxCpltCallback+0x1c6>
           break;
 8003450:	bf00      	nop
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	bf00      	nop
 800345c:	200000e4 	.word	0x200000e4
 8003460:	200000d8 	.word	0x200000d8
 8003464:	200000dc 	.word	0x200000dc

08003468 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_MspInit+0x44>)
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <HAL_MspInit+0x44>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6613      	str	r3, [r2, #96]	; 0x60
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_MspInit+0x44>)
 800347c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_MspInit+0x44>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_MspInit+0x44>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6593      	str	r3, [r2, #88]	; 0x58
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_MspInit+0x44>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800349e:	f003 f987 	bl	80067b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000

080034b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d0:	d16e      	bne.n	80035b0 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 80034d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034de:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034ea:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	4a32      	ldr	r2, [pc, #200]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 80034f0:	f043 0320 	orr.w	r3, r3, #32
 80034f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034f6:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_ADC_MspInit+0x108>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800351e:	2303      	movs	r3, #3
 8003520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	4619      	mov	r1, r3
 800352c:	4823      	ldr	r0, [pc, #140]	; (80035bc <HAL_ADC_MspInit+0x10c>)
 800352e:	f002 fde7 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003532:	2301      	movs	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003536:	2303      	movs	r3, #3
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	4619      	mov	r1, r3
 8003544:	481e      	ldr	r0, [pc, #120]	; (80035c0 <HAL_ADC_MspInit+0x110>)
 8003546:	f002 fddb 	bl	8006100 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800354a:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 800354c:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <HAL_ADC_MspInit+0x118>)
 800354e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 8003552:	2205      	movs	r2, #5
 8003554:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 800356a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800356e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 8003572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003576:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 800357a:	2220      	movs	r2, #32
 800357c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 8003580:	2200      	movs	r2, #0
 8003582:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003584:	480f      	ldr	r0, [pc, #60]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 8003586:	f002 f873 	bl	8005670 <HAL_DMA_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003590:	f7fe ff80 	bl	8002494 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <HAL_ADC_MspInit+0x114>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2100      	movs	r1, #0
 80035a4:	2012      	movs	r0, #18
 80035a6:	f002 f82a 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80035aa:	2012      	movs	r0, #18
 80035ac:	f002 f841 	bl	8005632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035b0:	bf00      	nop
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	48001400 	.word	0x48001400
 80035c0:	48000400 	.word	0x48000400
 80035c4:	20002c14 	.word	0x20002c14
 80035c8:	40020030 	.word	0x40020030

080035cc <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <HAL_OPAMP_MspInit+0x5c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d118      	bne.n	8003620 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <HAL_OPAMP_MspInit+0x60>)
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <HAL_OPAMP_MspInit+0x60>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <HAL_OPAMP_MspInit+0x60>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003606:	230a      	movs	r3, #10
 8003608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360a:	2303      	movs	r3, #3
 800360c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	4619      	mov	r1, r3
 8003618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800361c:	f002 fd70 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8003620:	bf00      	nop
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40010300 	.word	0x40010300
 800362c:	40021000 	.word	0x40021000

08003630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_TIM_Base_MspInit+0x68>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d114      	bne.n	800366c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_TIM_Base_MspInit+0x6c>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	4a15      	ldr	r2, [pc, #84]	; (800369c <HAL_TIM_Base_MspInit+0x6c>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6593      	str	r3, [r2, #88]	; 0x58
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <HAL_TIM_Base_MspInit+0x6c>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800365a:	2200      	movs	r2, #0
 800365c:	2100      	movs	r1, #0
 800365e:	201e      	movs	r0, #30
 8003660:	f001 ffcd 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003664:	201e      	movs	r0, #30
 8003666:	f001 ffe4 	bl	8005632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800366a:	e010      	b.n	800368e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <HAL_TIM_Base_MspInit+0x70>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10b      	bne.n	800368e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_TIM_Base_MspInit+0x6c>)
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <HAL_TIM_Base_MspInit+0x6c>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6613      	str	r3, [r2, #96]	; 0x60
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_TIM_Base_MspInit+0x6c>)
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40000800 	.word	0x40000800
 800369c:	40021000 	.word	0x40021000
 80036a0:	40014000 	.word	0x40014000

080036a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a11      	ldr	r2, [pc, #68]	; (8003708 <HAL_TIM_MspPostInit+0x64>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d11b      	bne.n	80036fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_TIM_MspPostInit+0x68>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	4a10      	ldr	r2, [pc, #64]	; (800370c <HAL_TIM_MspPostInit+0x68>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_TIM_MspPostInit+0x68>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036de:	23c0      	movs	r3, #192	; 0xc0
 80036e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036ee:	2302      	movs	r3, #2
 80036f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	4619      	mov	r1, r3
 80036f8:	4805      	ldr	r0, [pc, #20]	; (8003710 <HAL_TIM_MspPostInit+0x6c>)
 80036fa:	f002 fd01 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80036fe:	bf00      	nop
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40000800 	.word	0x40000800
 800370c:	40021000 	.word	0x40021000
 8003710:	48000400 	.word	0x48000400

08003714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a53      	ldr	r2, [pc, #332]	; (8003880 <HAL_UART_MspInit+0x16c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	f040 80a0 	bne.w	8003878 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003738:	4b52      	ldr	r3, [pc, #328]	; (8003884 <HAL_UART_MspInit+0x170>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4a51      	ldr	r2, [pc, #324]	; (8003884 <HAL_UART_MspInit+0x170>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
 8003744:	4b4f      	ldr	r3, [pc, #316]	; (8003884 <HAL_UART_MspInit+0x170>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <HAL_UART_MspInit+0x170>)
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	4a4b      	ldr	r2, [pc, #300]	; (8003884 <HAL_UART_MspInit+0x170>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800375c:	4b49      	ldr	r3, [pc, #292]	; (8003884 <HAL_UART_MspInit+0x170>)
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003768:	4b46      	ldr	r3, [pc, #280]	; (8003884 <HAL_UART_MspInit+0x170>)
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	4a45      	ldr	r2, [pc, #276]	; (8003884 <HAL_UART_MspInit+0x170>)
 800376e:	f043 0302 	orr.w	r3, r3, #2
 8003772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003774:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_UART_MspInit+0x170>)
 8003776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003792:	2307      	movs	r3, #7
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	4619      	mov	r1, r3
 800379c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a0:	f002 fcae 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037a4:	2308      	movs	r3, #8
 80037a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a8:	2302      	movs	r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037b4:	2307      	movs	r3, #7
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4619      	mov	r1, r3
 80037be:	4832      	ldr	r0, [pc, #200]	; (8003888 <HAL_UART_MspInit+0x174>)
 80037c0:	f002 fc9e 	bl	8006100 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_UART_MspInit+0x178>)
 80037c6:	4a32      	ldr	r2, [pc, #200]	; (8003890 <HAL_UART_MspInit+0x17c>)
 80037c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80037ca:	4b30      	ldr	r3, [pc, #192]	; (800388c <HAL_UART_MspInit+0x178>)
 80037cc:	221a      	movs	r2, #26
 80037ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037d0:	4b2e      	ldr	r3, [pc, #184]	; (800388c <HAL_UART_MspInit+0x178>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d6:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_UART_MspInit+0x178>)
 80037d8:	2200      	movs	r2, #0
 80037da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_UART_MspInit+0x178>)
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_UART_MspInit+0x178>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_UART_MspInit+0x178>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80037ee:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_UART_MspInit+0x178>)
 80037f0:	2220      	movs	r2, #32
 80037f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <HAL_UART_MspInit+0x178>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037fa:	4824      	ldr	r0, [pc, #144]	; (800388c <HAL_UART_MspInit+0x178>)
 80037fc:	f001 ff38 	bl	8005670 <HAL_DMA_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8003806:	f7fe fe45 	bl	8002494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <HAL_UART_MspInit+0x178>)
 800380e:	679a      	str	r2, [r3, #120]	; 0x78
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_UART_MspInit+0x178>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003816:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <HAL_UART_MspInit+0x180>)
 8003818:	4a1f      	ldr	r2, [pc, #124]	; (8003898 <HAL_UART_MspInit+0x184>)
 800381a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_UART_MspInit+0x180>)
 800381e:	221b      	movs	r2, #27
 8003820:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_UART_MspInit+0x180>)
 8003824:	2210      	movs	r2, #16
 8003826:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_UART_MspInit+0x180>)
 800382a:	2200      	movs	r2, #0
 800382c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_UART_MspInit+0x180>)
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <HAL_UART_MspInit+0x180>)
 8003836:	2200      	movs	r2, #0
 8003838:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <HAL_UART_MspInit+0x180>)
 800383c:	2200      	movs	r2, #0
 800383e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_UART_MspInit+0x180>)
 8003842:	2200      	movs	r2, #0
 8003844:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_UART_MspInit+0x180>)
 8003848:	2200      	movs	r2, #0
 800384a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800384c:	4811      	ldr	r0, [pc, #68]	; (8003894 <HAL_UART_MspInit+0x180>)
 800384e:	f001 ff0f 	bl	8005670 <HAL_DMA_Init>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8003858:	f7fe fe1c 	bl	8002494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <HAL_UART_MspInit+0x180>)
 8003860:	675a      	str	r2, [r3, #116]	; 0x74
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <HAL_UART_MspInit+0x180>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003868:	2200      	movs	r2, #0
 800386a:	2100      	movs	r1, #0
 800386c:	2026      	movs	r0, #38	; 0x26
 800386e:	f001 fec6 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003872:	2026      	movs	r0, #38	; 0x26
 8003874:	f001 fedd 	bl	8005632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003878:	bf00      	nop
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40004400 	.word	0x40004400
 8003884:	40021000 	.word	0x40021000
 8003888:	48000400 	.word	0x48000400
 800388c:	2000016c 	.word	0x2000016c
 8003890:	40020008 	.word	0x40020008
 8003894:	2000030c 	.word	0x2000030c
 8003898:	4002001c 	.word	0x4002001c

0800389c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <NMI_Handler+0x4>

080038a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038a6:	e7fe      	b.n	80038a6 <HardFault_Handler+0x4>

080038a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038ac:	e7fe      	b.n	80038ac <MemManage_Handler+0x4>

080038ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038b2:	e7fe      	b.n	80038b2 <BusFault_Handler+0x4>

080038b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <UsageFault_Handler+0x4>

080038ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038e8:	f000 f8d0 	bl	8003a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <DMA1_Channel1_IRQHandler+0x10>)
 80038f6:	f002 f845 	bl	8005984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	2000016c 	.word	0x2000016c

08003904 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <DMA1_Channel2_IRQHandler+0x10>)
 800390a:	f002 f83b 	bl	8005984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	2000030c 	.word	0x2000030c

08003918 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <DMA1_Channel3_IRQHandler+0x10>)
 800391e:	f002 f831 	bl	8005984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20002c14 	.word	0x20002c14

0800392c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <ADC1_2_IRQHandler+0x10>)
 8003932:	f000 fd67 	bl	8004404 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200002a0 	.word	0x200002a0

08003940 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <TIM4_IRQHandler+0x10>)
 8003946:	f004 f8c9 	bl	8007adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200001cc 	.word	0x200001cc

08003954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <USART2_IRQHandler+0x10>)
 800395a:	f005 fabb 	bl	8008ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20002c74 	.word	0x20002c74

08003968 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <SystemInit+0x28>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	4a07      	ldr	r2, [pc, #28]	; (8003990 <SystemInit+0x28>)
 8003974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <SystemInit+0x28>)
 800397e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003982:	609a      	str	r2, [r3, #8]
#endif
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003994:	480d      	ldr	r0, [pc, #52]	; (80039cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003996:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003998:	480d      	ldr	r0, [pc, #52]	; (80039d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800399a:	490e      	ldr	r1, [pc, #56]	; (80039d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800399c:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <LoopForever+0xe>)
  movs r3, #0
 800399e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80039a0:	e002      	b.n	80039a8 <LoopCopyDataInit>

080039a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a6:	3304      	adds	r3, #4

080039a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039ac:	d3f9      	bcc.n	80039a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ae:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80039b0:	4c0b      	ldr	r4, [pc, #44]	; (80039e0 <LoopForever+0x16>)
  movs r3, #0
 80039b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b4:	e001      	b.n	80039ba <LoopFillZerobss>

080039b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b8:	3204      	adds	r2, #4

080039ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039bc:	d3fb      	bcc.n	80039b6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039be:	f7ff ffd3 	bl	8003968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039c2:	f006 fa9f 	bl	8009f04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039c6:	f7fe f9e5 	bl	8001d94 <main>

080039ca <LoopForever>:

LoopForever:
    b LoopForever
 80039ca:	e7fe      	b.n	80039ca <LoopForever>
  ldr   r0, =_estack
 80039cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80039d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039d4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80039d8:	0800a1dc 	.word	0x0800a1dc
  ldr r2, =_sbss
 80039dc:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80039e0:	2000359c 	.word	0x2000359c

080039e4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039e4:	e7fe      	b.n	80039e4 <COMP1_2_3_IRQHandler>

080039e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f0:	2003      	movs	r0, #3
 80039f2:	f001 fdf9 	bl	80055e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039f6:	2000      	movs	r0, #0
 80039f8:	f000 f80e 	bl	8003a18 <HAL_InitTick>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	71fb      	strb	r3, [r7, #7]
 8003a06:	e001      	b.n	8003a0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a08:	f7ff fd2e 	bl	8003468 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a0c:	79fb      	ldrb	r3, [r7, #7]

}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_InitTick+0x68>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d022      	beq.n	8003a72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a2c:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <HAL_InitTick+0x6c>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_InitTick+0x68>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fe08 	bl	8005656 <HAL_SYSTICK_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	d809      	bhi.n	8003a66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a52:	2200      	movs	r2, #0
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5a:	f001 fdd0 	bl	80055fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <HAL_InitTick+0x70>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	e007      	b.n	8003a76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	e004      	b.n	8003a76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e001      	b.n	8003a76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000010 	.word	0x20000010
 8003a84:	20000008 	.word	0x20000008
 8003a88:	2000000c 	.word	0x2000000c

08003a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_IncTick+0x1c>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_IncTick+0x20>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4413      	add	r3, r2
 8003a9a:	4a03      	ldr	r2, [pc, #12]	; (8003aa8 <HAL_IncTick+0x1c>)
 8003a9c:	6013      	str	r3, [r2, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20003598 	.word	0x20003598
 8003aac:	20000010 	.word	0x20000010

08003ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <HAL_GetTick+0x14>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20003598 	.word	0x20003598

08003ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ad0:	f7ff ffee 	bl	8003ab0 <HAL_GetTick>
 8003ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d004      	beq.n	8003aec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <HAL_Delay+0x40>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aec:	bf00      	nop
 8003aee:	f7ff ffdf 	bl	8003ab0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d8f7      	bhi.n	8003aee <HAL_Delay+0x26>
  {
  }
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000010 	.word	0x20000010

08003b0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	609a      	str	r2, [r3, #8]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3360      	adds	r3, #96	; 0x60
 8003b86:	461a      	mov	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <LL_ADC_SetOffset+0x44>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	03fff000 	.word	0x03fff000

08003bbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3360      	adds	r3, #96	; 0x60
 8003bca:	461a      	mov	r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3360      	adds	r3, #96	; 0x60
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b087      	sub	sp, #28
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3360      	adds	r3, #96	; 0x60
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3360      	adds	r3, #96	; 0x60
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	615a      	str	r2, [r3, #20]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b087      	sub	sp, #28
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3330      	adds	r3, #48	; 0x30
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	4413      	add	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	211f      	movs	r1, #31
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	401a      	ands	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	f003 011f 	and.w	r1, r3, #31
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3314      	adds	r3, #20
 8003d64:	461a      	mov	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	0e5b      	lsrs	r3, r3, #25
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	4413      	add	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	0d1b      	lsrs	r3, r3, #20
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2107      	movs	r1, #7
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	401a      	ands	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	0d1b      	lsrs	r3, r3, #20
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0318 	and.w	r3, r3, #24
 8003dce:	4908      	ldr	r1, [pc, #32]	; (8003df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003dd0:	40d9      	lsrs	r1, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	0007ffff 	.word	0x0007ffff

08003df4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 031f 	and.w	r3, r3, #31
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6093      	str	r3, [r2, #8]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e64:	d101      	bne.n	8003e6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb4:	d101      	bne.n	8003eba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003edc:	f043 0201 	orr.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <LL_ADC_IsEnabled+0x18>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <LL_ADC_IsEnabled+0x1a>
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f2a:	f043 0204 	orr.w	r2, r3, #4
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d101      	bne.n	8003f56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d101      	bne.n	8003f7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e16b      	b.n	800427e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fa7b 	bl	80034b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ff3f 	bl	8003e50 <LL_ADC_IsDeepPowerDownEnabled>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff25 	bl	8003e2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ff5a 	bl	8003ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff3e 	bl	8003e78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ffc:	4ba2      	ldr	r3, [pc, #648]	; (8004288 <HAL_ADC_Init+0x2fc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	099b      	lsrs	r3, r3, #6
 8004002:	4aa2      	ldr	r2, [pc, #648]	; (800428c <HAL_ADC_Init+0x300>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800400c:	e002      	b.n	8004014 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3b01      	subs	r3, #1
 8004012:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f9      	bne.n	800400e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff3e 	bl	8003ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	f043 0210 	orr.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff77 	bl	8003f3e <LL_ADC_REG_IsConversionOngoing>
 8004050:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 8106 	bne.w	800426c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 8102 	bne.w	800426c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004070:	f043 0202 	orr.w	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff37 	bl	8003ef0 <LL_ADC_IsEnabled>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d111      	bne.n	80040ac <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004088:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800408c:	f7ff ff30 	bl	8003ef0 <LL_ADC_IsEnabled>
 8004090:	4604      	mov	r4, r0
 8004092:	487f      	ldr	r0, [pc, #508]	; (8004290 <HAL_ADC_Init+0x304>)
 8004094:	f7ff ff2c 	bl	8003ef0 <LL_ADC_IsEnabled>
 8004098:	4603      	mov	r3, r0
 800409a:	4323      	orrs	r3, r4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4619      	mov	r1, r3
 80040a6:	487b      	ldr	r0, [pc, #492]	; (8004294 <HAL_ADC_Init+0x308>)
 80040a8:	f7ff fd30 	bl	8003b0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7f5b      	ldrb	r3, [r3, #29]
 80040b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80040bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80040c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d106      	bne.n	80040e8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	045b      	lsls	r3, r3, #17
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	4b63      	ldr	r3, [pc, #396]	; (8004298 <HAL_ADC_Init+0x30c>)
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	430b      	orrs	r3, r1
 8004116:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff03 	bl	8003f3e <LL_ADC_REG_IsConversionOngoing>
 8004138:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ff10 	bl	8003f64 <LL_ADC_INJ_IsConversionOngoing>
 8004144:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d16d      	bne.n	8004228 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d16a      	bne.n	8004228 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004156:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800415e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800416e:	f023 0302 	bic.w	r3, r3, #2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	69b9      	ldr	r1, [r7, #24]
 8004178:	430b      	orrs	r3, r1
 800417a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004192:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800419c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6911      	ldr	r1, [r2, #16]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80041b2:	e013      	b.n	80041dc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d118      	bne.n	8004218 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041f0:	f023 0304 	bic.w	r3, r3, #4
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004202:	4311      	orrs	r1, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004208:	430a      	orrs	r2, r1
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	e007      	b.n	8004228 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10c      	bne.n	800424a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f023 010f 	bic.w	r1, r3, #15
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	1e5a      	subs	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
 8004248:	e007      	b.n	800425a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 020f 	bic.w	r2, r2, #15
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	65da      	str	r2, [r3, #92]	; 0x5c
 800426a:	e007      	b.n	800427c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	f043 0210 	orr.w	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800427c:	7ffb      	ldrb	r3, [r7, #31]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd90      	pop	{r4, r7, pc}
 8004286:	bf00      	nop
 8004288:	20000008 	.word	0x20000008
 800428c:	053e2d63 	.word	0x053e2d63
 8004290:	50000100 	.word	0x50000100
 8004294:	50000300 	.word	0x50000300
 8004298:	fff04007 	.word	0xfff04007

0800429c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a8:	4851      	ldr	r0, [pc, #324]	; (80043f0 <HAL_ADC_Start_DMA+0x154>)
 80042aa:	f7ff fda3 	bl	8003df4 <LL_ADC_GetMultimode>
 80042ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fe42 	bl	8003f3e <LL_ADC_REG_IsConversionOngoing>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f040 808f 	bne.w	80043e0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_Start_DMA+0x34>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e08a      	b.n	80043e6 <HAL_ADC_Start_DMA+0x14a>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d002      	beq.n	80042ea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b09      	cmp	r3, #9
 80042e8:	d173      	bne.n	80043d2 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 feb2 	bl	8005054 <ADC_Enable>
 80042f0:	4603      	mov	r3, r0
 80042f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d166      	bne.n	80043c8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a38      	ldr	r2, [pc, #224]	; (80043f4 <HAL_ADC_Start_DMA+0x158>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d002      	beq.n	800431e <HAL_ADC_Start_DMA+0x82>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	e001      	b.n	8004322 <HAL_ADC_Start_DMA+0x86>
 800431e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	4293      	cmp	r3, r2
 8004328:	d002      	beq.n	8004330 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d006      	beq.n	8004356 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434c:	f023 0206 	bic.w	r2, r3, #6
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	661a      	str	r2, [r3, #96]	; 0x60
 8004354:	e002      	b.n	800435c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_ADC_Start_DMA+0x15c>)
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <HAL_ADC_Start_DMA+0x160>)
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	4a23      	ldr	r2, [pc, #140]	; (8004400 <HAL_ADC_Start_DMA+0x164>)
 8004372:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	221c      	movs	r2, #28
 800437a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0210 	orr.w	r2, r2, #16
 8004392:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3340      	adds	r3, #64	; 0x40
 80043ae:	4619      	mov	r1, r3
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f001 fa04 	bl	80057c0 <HAL_DMA_Start_IT>
 80043b8:	4603      	mov	r3, r0
 80043ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fda8 	bl	8003f16 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80043c6:	e00d      	b.n	80043e4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80043d0:	e008      	b.n	80043e4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80043de:	e001      	b.n	80043e4 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
 80043e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	50000300 	.word	0x50000300
 80043f4:	50000100 	.word	0x50000100
 80043f8:	08005109 	.word	0x08005109
 80043fc:	080051e1 	.word	0x080051e1
 8004400:	080051fd 	.word	0x080051fd

08004404 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800440c:	2300      	movs	r3, #0
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004420:	4883      	ldr	r0, [pc, #524]	; (8004630 <HAL_ADC_IRQHandler+0x22c>)
 8004422:	f7ff fce7 	bl	8003df4 <LL_ADC_GetMultimode>
 8004426:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d017      	beq.n	8004462 <HAL_ADC_IRQHandler+0x5e>
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d012      	beq.n	8004462 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 ff39 	bl	80052cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2202      	movs	r2, #2
 8004460:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <HAL_ADC_IRQHandler+0x72>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8085 	beq.w	800458c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d07f      	beq.n	800458c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fc01 	bl	8003cb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d064      	beq.n	800457e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5e      	ldr	r2, [pc, #376]	; (8004634 <HAL_ADC_IRQHandler+0x230>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d002      	beq.n	80044c4 <HAL_ADC_IRQHandler+0xc0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	e001      	b.n	80044c8 <HAL_ADC_IRQHandler+0xc4>
 80044c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d008      	beq.n	80044e2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d002      	beq.n	80044e2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b09      	cmp	r3, #9
 80044e0:	d104      	bne.n	80044ec <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	e00d      	b.n	8004508 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a50      	ldr	r2, [pc, #320]	; (8004634 <HAL_ADC_IRQHandler+0x230>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d002      	beq.n	80044fc <HAL_ADC_IRQHandler+0xf8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	e001      	b.n	8004500 <HAL_ADC_IRQHandler+0xfc>
 80044fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004500:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d135      	bne.n	800457e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d12e      	bne.n	800457e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fd0a 	bl	8003f3e <LL_ADC_REG_IsConversionOngoing>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11a      	bne.n	8004566 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020c 	bic.w	r2, r2, #12
 800453e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d112      	bne.n	800457e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	65da      	str	r2, [r3, #92]	; 0x5c
 8004564:	e00b      	b.n	800457e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	f043 0210 	orr.w	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004576:	f043 0201 	orr.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd f848 	bl	8001614 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	220c      	movs	r2, #12
 800458a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x19c>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 809e 	beq.w	80046e8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8098 	beq.w	80046e8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fbaa 	bl	8003d2e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80045da:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fb65 	bl	8003cb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045e6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a11      	ldr	r2, [pc, #68]	; (8004634 <HAL_ADC_IRQHandler+0x230>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d002      	beq.n	80045f8 <HAL_ADC_IRQHandler+0x1f4>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	e001      	b.n	80045fc <HAL_ADC_IRQHandler+0x1f8>
 80045f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4293      	cmp	r3, r2
 8004602:	d008      	beq.n	8004616 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b06      	cmp	r3, #6
 800460e:	d002      	beq.n	8004616 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b07      	cmp	r3, #7
 8004614:	d104      	bne.n	8004620 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	e011      	b.n	8004644 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a03      	ldr	r2, [pc, #12]	; (8004634 <HAL_ADC_IRQHandler+0x230>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d006      	beq.n	8004638 <HAL_ADC_IRQHandler+0x234>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e005      	b.n	800463c <HAL_ADC_IRQHandler+0x238>
 8004630:	50000300 	.word	0x50000300
 8004634:	50000100 	.word	0x50000100
 8004638:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800463c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10c      	bne.n	8004664 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004650:	2b00      	cmp	r3, #0
 8004652:	d142      	bne.n	80046da <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d03f      	beq.n	80046da <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8004660:	2b00      	cmp	r3, #0
 8004662:	d13a      	bne.n	80046da <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d133      	bne.n	80046da <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d12e      	bne.n	80046da <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fc6f 	bl	8003f64 <LL_ADC_INJ_IsConversionOngoing>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11a      	bne.n	80046c2 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800469a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d112      	bne.n	80046da <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	f043 0201 	orr.w	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	65da      	str	r2, [r3, #92]	; 0x5c
 80046c0:	e00b      	b.n	80046da <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	f043 0210 	orr.w	r2, r3, #16
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	f043 0201 	orr.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fdce 	bl	800527c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2260      	movs	r2, #96	; 0x60
 80046e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d011      	beq.n	8004716 <HAL_ADC_IRQHandler+0x312>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f89f 	bl	800484c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <HAL_ADC_IRQHandler+0x342>
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fdb4 	bl	80052a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474c:	2b00      	cmp	r3, #0
 800474e:	d012      	beq.n	8004776 <HAL_ADC_IRQHandler+0x372>
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00d      	beq.n	8004776 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fda6 	bl	80052b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004774:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	d036      	beq.n	80047ee <HAL_ADC_IRQHandler+0x3ea>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	d031      	beq.n	80047ee <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004792:	2301      	movs	r3, #1
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e014      	b.n	80047c2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800479e:	4825      	ldr	r0, [pc, #148]	; (8004834 <HAL_ADC_IRQHandler+0x430>)
 80047a0:	f7ff fb36 	bl	8003e10 <LL_ADC_GetMultiDMATransfer>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80047aa:	2301      	movs	r3, #1
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
 80047ae:	e008      	b.n	80047c2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80047be:	2301      	movs	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10e      	bne.n	80047e6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	f043 0202 	orr.w	r2, r3, #2
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f83d 	bl	8004860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2210      	movs	r2, #16
 80047ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d018      	beq.n	800482a <HAL_ADC_IRQHandler+0x426>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d013      	beq.n	800482a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004806:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004812:	f043 0208 	orr.w	r2, r3, #8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004822:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fd33 	bl	8005290 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800482a:	bf00      	nop
 800482c:	3728      	adds	r7, #40	; 0x28
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	50000300 	.word	0x50000300

08004838 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b0b6      	sub	sp, #216	; 0xd8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_ADC_ConfigChannel+0x22>
 8004892:	2302      	movs	r3, #2
 8004894:	e3c7      	b.n	8005026 <HAL_ADC_ConfigChannel+0x7b2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fb4b 	bl	8003f3e <LL_ADC_REG_IsConversionOngoing>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 83ac 	bne.w	8005008 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	f7ff fa0a 	bl	8003cd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fb39 	bl	8003f3e <LL_ADC_REG_IsConversionOngoing>
 80048cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fb45 	bl	8003f64 <LL_ADC_INJ_IsConversionOngoing>
 80048da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 81d9 	bne.w	8004c9a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 81d4 	bne.w	8004c9a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048fa:	d10f      	bne.n	800491c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	4619      	mov	r1, r3
 8004908:	f7ff fa24 	bl	8003d54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff f9b8 	bl	8003c8a <LL_ADC_SetSamplingTimeCommonConfig>
 800491a:	e00e      	b.n	800493a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	461a      	mov	r2, r3
 800492a:	f7ff fa13 	bl	8003d54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff f9a8 	bl	8003c8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d022      	beq.n	80049a2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6919      	ldr	r1, [r3, #16]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800496c:	f7ff f902 	bl	8003b74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	6919      	ldr	r1, [r3, #16]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	461a      	mov	r2, r3
 800497e:	f7ff f94e 	bl	8003c1e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6919      	ldr	r1, [r3, #16]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	7f1b      	ldrb	r3, [r3, #28]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x124>
 8004992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004996:	e000      	b.n	800499a <HAL_ADC_ConfigChannel+0x126>
 8004998:	2300      	movs	r3, #0
 800499a:	461a      	mov	r2, r3
 800499c:	f7ff f95a 	bl	8003c54 <LL_ADC_SetOffsetSaturation>
 80049a0:	e17b      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff f907 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x15a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff f8fc 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 80049c4:	4603      	mov	r3, r0
 80049c6:	0e9b      	lsrs	r3, r3, #26
 80049c8:	f003 021f 	and.w	r2, r3, #31
 80049cc:	e01e      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x198>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff f8f1 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 80049da:	4603      	mov	r3, r0
 80049dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80049f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e004      	b.n	8004a0a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004a00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a04:	fab3 f383 	clz	r3, r3
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x1b0>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0e9b      	lsrs	r3, r3, #26
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	e018      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x1e2>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004a40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004a48:	2320      	movs	r3, #32
 8004a4a:	e004      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004a4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a50:	fab3 f383 	clz	r3, r3
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d106      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff f8c0 	bl	8003be8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff f8a4 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x220>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2101      	movs	r1, #1
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff f899 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	0e9b      	lsrs	r3, r3, #26
 8004a8e:	f003 021f 	and.w	r2, r3, #31
 8004a92:	e01e      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x25e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f88e 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	e004      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004aca:	fab3 f383 	clz	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x276>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	0e9b      	lsrs	r3, r3, #26
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	e018      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x2a8>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004b0e:	2320      	movs	r3, #32
 8004b10:	e004      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004b12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d106      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2101      	movs	r1, #1
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff f85d 	bl	8003be8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2102      	movs	r1, #2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f841 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x2e6>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2102      	movs	r1, #2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff f836 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004b50:	4603      	mov	r3, r0
 8004b52:	0e9b      	lsrs	r3, r3, #26
 8004b54:	f003 021f 	and.w	r2, r3, #31
 8004b58:	e01e      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x324>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2102      	movs	r1, #2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff f82b 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004b80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004b88:	2320      	movs	r3, #32
 8004b8a:	e004      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b90:	fab3 f383 	clz	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x33c>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	0e9b      	lsrs	r3, r3, #26
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	e016      	b.n	8004bde <HAL_ADC_ConfigChannel+0x36a>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004bc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	e004      	b.n	8004bde <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d106      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	2102      	movs	r1, #2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fffc 	bl	8003be8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2103      	movs	r1, #3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe ffe0 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x3a8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2103      	movs	r1, #3
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe ffd5 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004c12:	4603      	mov	r3, r0
 8004c14:	0e9b      	lsrs	r3, r3, #26
 8004c16:	f003 021f 	and.w	r2, r3, #31
 8004c1a:	e017      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x3d8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2103      	movs	r1, #3
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe ffca 	bl	8003bbc <LL_ADC_GetOffsetChannel>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2e:	fa93 f3a3 	rbit	r3, r3
 8004c32:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c36:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004c3e:	2320      	movs	r3, #32
 8004c40:	e003      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c44:	fab3 f383 	clz	r3, r3
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x3f0>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0e9b      	lsrs	r3, r3, #26
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	e011      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x414>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e003      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d106      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2103      	movs	r1, #3
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe ffa7 	bl	8003be8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff f926 	bl	8003ef0 <LL_ADC_IsEnabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f040 8140 	bne.w	8004f2c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f7ff f877 	bl	8003dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	4a8f      	ldr	r2, [pc, #572]	; (8004f00 <HAL_ADC_ConfigChannel+0x68c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	f040 8131 	bne.w	8004f2c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x47e>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	0e9b      	lsrs	r3, r3, #26
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2b09      	cmp	r3, #9
 8004ce8:	bf94      	ite	ls
 8004cea:	2301      	movls	r3, #1
 8004cec:	2300      	movhi	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	e019      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x4b2>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cfa:	fa93 f3a3 	rbit	r3, r3
 8004cfe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d02:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004d0a:	2320      	movs	r3, #32
 8004d0c:	e003      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d10:	fab3 f383 	clz	r3, r3
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	3301      	adds	r3, #1
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	2b09      	cmp	r3, #9
 8004d1e:	bf94      	ite	ls
 8004d20:	2301      	movls	r3, #1
 8004d22:	2300      	movhi	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d079      	beq.n	8004e1e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d107      	bne.n	8004d46 <HAL_ADC_ConfigChannel+0x4d2>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	0e9b      	lsrs	r3, r3, #26
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	069b      	lsls	r3, r3, #26
 8004d40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d44:	e015      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x4fe>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d56:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004d5e:	2320      	movs	r3, #32
 8004d60:	e003      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d64:	fab3 f383 	clz	r3, r3
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	069b      	lsls	r3, r3, #26
 8004d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_ADC_ConfigChannel+0x51e>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	0e9b      	lsrs	r3, r3, #26
 8004d84:	3301      	adds	r3, #1
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d90:	e017      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x54e>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004daa:	2320      	movs	r3, #32
 8004dac:	e003      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db0:	fab3 f383 	clz	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	3301      	adds	r3, #1
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	ea42 0103 	orr.w	r1, r2, r3
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x574>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	0e9b      	lsrs	r3, r3, #26
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f003 021f 	and.w	r2, r3, #31
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	051b      	lsls	r3, r3, #20
 8004de6:	e018      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x5a6>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004e00:	2320      	movs	r3, #32
 8004e02:	e003      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f003 021f 	and.w	r2, r3, #31
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	e081      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d107      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x5c6>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	0e9b      	lsrs	r3, r3, #26
 8004e30:	3301      	adds	r3, #1
 8004e32:	069b      	lsls	r3, r3, #26
 8004e34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e38:	e015      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x5f2>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	fa93 f3a3 	rbit	r3, r3
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004e52:	2320      	movs	r3, #32
 8004e54:	e003      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	fab3 f383 	clz	r3, r3
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	069b      	lsls	r3, r3, #26
 8004e62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x612>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	0e9b      	lsrs	r3, r3, #26
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	2101      	movs	r1, #1
 8004e80:	fa01 f303 	lsl.w	r3, r1, r3
 8004e84:	e017      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x642>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	fa93 f3a3 	rbit	r3, r3
 8004e92:	61fb      	str	r3, [r7, #28]
  return result;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004e9e:	2320      	movs	r3, #32
 8004ea0:	e003      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	fab3 f383 	clz	r3, r3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	ea42 0103 	orr.w	r1, r2, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10d      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x66e>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	0e9b      	lsrs	r3, r3, #26
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f003 021f 	and.w	r2, r3, #31
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3b1e      	subs	r3, #30
 8004eda:	051b      	lsls	r3, r3, #20
 8004edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	e01e      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x6ac>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	fa93 f3a3 	rbit	r3, r3
 8004eee:	613b      	str	r3, [r7, #16]
  return result;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d104      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004efa:	2320      	movs	r3, #32
 8004efc:	e006      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x698>
 8004efe:	bf00      	nop
 8004f00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f003 021f 	and.w	r2, r3, #31
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	3b1e      	subs	r3, #30
 8004f1a:	051b      	lsls	r3, r3, #20
 8004f1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f20:	430b      	orrs	r3, r1
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	6892      	ldr	r2, [r2, #8]
 8004f26:	4619      	mov	r1, r3
 8004f28:	f7fe ff14 	bl	8003d54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <HAL_ADC_ConfigChannel+0x7bc>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d070      	beq.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f38:	483e      	ldr	r0, [pc, #248]	; (8005034 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f3a:	f7fe fe0d 	bl	8003b58 <LL_ADC_GetCommonPathInternalCh>
 8004f3e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3c      	ldr	r2, [pc, #240]	; (8005038 <HAL_ADC_ConfigChannel+0x7c4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_ADC_ConfigChannel+0x6e2>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3a      	ldr	r2, [pc, #232]	; (800503c <HAL_ADC_ConfigChannel+0x7c8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d126      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d120      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f6a:	d156      	bne.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f74:	4619      	mov	r1, r3
 8004f76:	482f      	ldr	r0, [pc, #188]	; (8005034 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f78:	f7fe fddb 	bl	8003b32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004f7c:	4b30      	ldr	r3, [pc, #192]	; (8005040 <HAL_ADC_ConfigChannel+0x7cc>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	099b      	lsrs	r3, r3, #6
 8004f82:	4a30      	ldr	r2, [pc, #192]	; (8005044 <HAL_ADC_ConfigChannel+0x7d0>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	099a      	lsrs	r2, r3, #6
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f94:	e002      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f9      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fa2:	e03a      	b.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a27      	ldr	r2, [pc, #156]	; (8005048 <HAL_ADC_ConfigChannel+0x7d4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d113      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x762>
 8004fae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a23      	ldr	r2, [pc, #140]	; (800504c <HAL_ADC_ConfigChannel+0x7d8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d02a      	beq.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4819      	ldr	r0, [pc, #100]	; (8005034 <HAL_ADC_ConfigChannel+0x7c0>)
 8004fd0:	f7fe fdaf 	bl	8003b32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fd4:	e021      	b.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_ADC_ConfigChannel+0x7dc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d11c      	bne.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d116      	bne.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <HAL_ADC_ConfigChannel+0x7d8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d011      	beq.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ff6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ffa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ffe:	4619      	mov	r1, r3
 8005000:	480c      	ldr	r0, [pc, #48]	; (8005034 <HAL_ADC_ConfigChannel+0x7c0>)
 8005002:	f7fe fd96 	bl	8003b32 <LL_ADC_SetCommonPathInternalCh>
 8005006:	e008      	b.n	800501a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005022:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005026:	4618      	mov	r0, r3
 8005028:	37d8      	adds	r7, #216	; 0xd8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	80080000 	.word	0x80080000
 8005034:	50000300 	.word	0x50000300
 8005038:	c3210000 	.word	0xc3210000
 800503c:	90c00010 	.word	0x90c00010
 8005040:	20000008 	.word	0x20000008
 8005044:	053e2d63 	.word	0x053e2d63
 8005048:	c7520000 	.word	0xc7520000
 800504c:	50000100 	.word	0x50000100
 8005050:	cb840000 	.word	0xcb840000

08005054 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f7fe ff45 	bl	8003ef0 <LL_ADC_IsEnabled>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d146      	bne.n	80050fa <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	4b24      	ldr	r3, [pc, #144]	; (8005104 <ADC_Enable+0xb0>)
 8005074:	4013      	ands	r3, r2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507e:	f043 0210 	orr.w	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508a:	f043 0201 	orr.w	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e032      	b.n	80050fc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe ff14 	bl	8003ec8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050a0:	f7fe fd06 	bl	8003ab0 <HAL_GetTick>
 80050a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050a6:	e021      	b.n	80050ec <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe ff1f 	bl	8003ef0 <LL_ADC_IsEnabled>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe ff03 	bl	8003ec8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050c2:	f7fe fcf5 	bl	8003ab0 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d90d      	bls.n	80050ec <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	f043 0210 	orr.w	r2, r3, #16
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e0:	f043 0201 	orr.w	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e007      	b.n	80050fc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d1d6      	bne.n	80050a8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	8000003f 	.word	0x8000003f

08005108 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800511e:	2b00      	cmp	r3, #0
 8005120:	d14b      	bne.n	80051ba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d021      	beq.n	8005180 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fdb5 	bl	8003cb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d032      	beq.n	80051b2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d12b      	bne.n	80051b2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11f      	bne.n	80051b2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	f043 0201 	orr.w	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	65da      	str	r2, [r3, #92]	; 0x5c
 800517e:	e018      	b.n	80051b2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d111      	bne.n	80051b2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7fc fa2e 	bl	8001614 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80051b8:	e00e      	b.n	80051d8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff fb4a 	bl	8004860 <HAL_ADC_ErrorCallback>
}
 80051cc:	e004      	b.n	80051d8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff fb22 	bl	8004838 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521a:	f043 0204 	orr.w	r2, r3, #4
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff fb1c 	bl	8004860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <LL_ADC_IsEnabled>:
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <LL_ADC_IsEnabled+0x18>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <LL_ADC_IsEnabled+0x1a>
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <LL_ADC_REG_IsConversionOngoing>:
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d101      	bne.n	800526e <LL_ADC_REG_IsConversionOngoing+0x18>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80052e0:	b590      	push	{r4, r7, lr}
 80052e2:	b0a1      	sub	sp, #132	; 0x84
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e087      	b.n	800540e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800530e:	d102      	bne.n	8005316 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005310:	4b41      	ldr	r3, [pc, #260]	; (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	e001      	b.n	800531a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005324:	f043 0220 	orr.w	r2, r3, #32
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e06a      	b.n	800540e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff ff8b 	bl	8005256 <LL_ADC_REG_IsConversionOngoing>
 8005340:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ff85 	bl	8005256 <LL_ADC_REG_IsConversionOngoing>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d14c      	bne.n	80053ec <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005354:	2b00      	cmp	r3, #0
 8005356:	d149      	bne.n	80053ec <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005358:	4b30      	ldr	r3, [pc, #192]	; (800541c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800535a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d028      	beq.n	80053b6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005376:	035b      	lsls	r3, r3, #13
 8005378:	430b      	orrs	r3, r1
 800537a:	431a      	orrs	r2, r3
 800537c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005380:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005384:	f7ff ff54 	bl	8005230 <LL_ADC_IsEnabled>
 8005388:	4604      	mov	r4, r0
 800538a:	4823      	ldr	r0, [pc, #140]	; (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800538c:	f7ff ff50 	bl	8005230 <LL_ADC_IsEnabled>
 8005390:	4603      	mov	r3, r0
 8005392:	4323      	orrs	r3, r4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d133      	bne.n	8005400 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80053a0:	f023 030f 	bic.w	r3, r3, #15
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	6811      	ldr	r1, [r2, #0]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	431a      	orrs	r2, r3
 80053b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053b4:	e024      	b.n	8005400 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80053b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80053c6:	f7ff ff33 	bl	8005230 <LL_ADC_IsEnabled>
 80053ca:	4604      	mov	r4, r0
 80053cc:	4812      	ldr	r0, [pc, #72]	; (8005418 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80053ce:	f7ff ff2f 	bl	8005230 <LL_ADC_IsEnabled>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4323      	orrs	r3, r4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d112      	bne.n	8005400 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80053da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80053e2:	f023 030f 	bic.w	r3, r3, #15
 80053e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80053e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053ea:	e009      	b.n	8005400 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80053fe:	e000      	b.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005400:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800540a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800540e:	4618      	mov	r0, r3
 8005410:	3784      	adds	r7, #132	; 0x84
 8005412:	46bd      	mov	sp, r7
 8005414:	bd90      	pop	{r4, r7, pc}
 8005416:	bf00      	nop
 8005418:	50000100 	.word	0x50000100
 800541c:	50000300 	.word	0x50000300

08005420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <__NVIC_SetPriorityGrouping+0x44>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800543c:	4013      	ands	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800544c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005452:	4a04      	ldr	r2, [pc, #16]	; (8005464 <__NVIC_SetPriorityGrouping+0x44>)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	60d3      	str	r3, [r2, #12]
}
 8005458:	bf00      	nop
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <__NVIC_GetPriorityGrouping+0x18>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	f003 0307 	and.w	r3, r3, #7
}
 8005476:	4618      	mov	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	e000ed00 	.word	0xe000ed00

08005484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800548e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005492:	2b00      	cmp	r3, #0
 8005494:	db0b      	blt.n	80054ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	f003 021f 	and.w	r2, r3, #31
 800549c:	4907      	ldr	r1, [pc, #28]	; (80054bc <__NVIC_EnableIRQ+0x38>)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2001      	movs	r0, #1
 80054a6:	fa00 f202 	lsl.w	r2, r0, r2
 80054aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	e000e100 	.word	0xe000e100

080054c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	6039      	str	r1, [r7, #0]
 80054ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	db0a      	blt.n	80054ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	490c      	ldr	r1, [pc, #48]	; (800550c <__NVIC_SetPriority+0x4c>)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	0112      	lsls	r2, r2, #4
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	440b      	add	r3, r1
 80054e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054e8:	e00a      	b.n	8005500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	4908      	ldr	r1, [pc, #32]	; (8005510 <__NVIC_SetPriority+0x50>)
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	3b04      	subs	r3, #4
 80054f8:	0112      	lsls	r2, r2, #4
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	440b      	add	r3, r1
 80054fe:	761a      	strb	r2, [r3, #24]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	e000e100 	.word	0xe000e100
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005514:	b480      	push	{r7}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f1c3 0307 	rsb	r3, r3, #7
 800552e:	2b04      	cmp	r3, #4
 8005530:	bf28      	it	cs
 8005532:	2304      	movcs	r3, #4
 8005534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3304      	adds	r3, #4
 800553a:	2b06      	cmp	r3, #6
 800553c:	d902      	bls.n	8005544 <NVIC_EncodePriority+0x30>
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3b03      	subs	r3, #3
 8005542:	e000      	b.n	8005546 <NVIC_EncodePriority+0x32>
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005548:	f04f 32ff 	mov.w	r2, #4294967295
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43da      	mvns	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	401a      	ands	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800555c:	f04f 31ff 	mov.w	r1, #4294967295
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	fa01 f303 	lsl.w	r3, r1, r3
 8005566:	43d9      	mvns	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800556c:	4313      	orrs	r3, r2
         );
}
 800556e:	4618      	mov	r0, r3
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005580:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <__NVIC_SystemReset+0x20>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800558c:	4903      	ldr	r1, [pc, #12]	; (800559c <__NVIC_SystemReset+0x20>)
 800558e:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <__NVIC_SystemReset+0x24>)
 8005590:	4313      	orrs	r3, r2
 8005592:	60cb      	str	r3, [r1, #12]
 8005594:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <__NVIC_SystemReset+0x1c>
 800559c:	e000ed00 	.word	0xe000ed00
 80055a0:	05fa0004 	.word	0x05fa0004

080055a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055b4:	d301      	bcc.n	80055ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055b6:	2301      	movs	r3, #1
 80055b8:	e00f      	b.n	80055da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ba:	4a0a      	ldr	r2, [pc, #40]	; (80055e4 <SysTick_Config+0x40>)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3b01      	subs	r3, #1
 80055c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055c2:	210f      	movs	r1, #15
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	f7ff ff7a 	bl	80054c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <SysTick_Config+0x40>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055d2:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <SysTick_Config+0x40>)
 80055d4:	2207      	movs	r2, #7
 80055d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	e000e010 	.word	0xe000e010

080055e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff ff15 	bl	8005420 <__NVIC_SetPriorityGrouping>
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	4603      	mov	r3, r0
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800560c:	f7ff ff2c 	bl	8005468 <__NVIC_GetPriorityGrouping>
 8005610:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	6978      	ldr	r0, [r7, #20]
 8005618:	f7ff ff7c 	bl	8005514 <NVIC_EncodePriority>
 800561c:	4602      	mov	r2, r0
 800561e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff ff4b 	bl	80054c0 <__NVIC_SetPriority>
}
 800562a:	bf00      	nop
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	4603      	mov	r3, r0
 800563a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800563c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff ff1f 	bl	8005484 <__NVIC_EnableIRQ>
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005652:	f7ff ff93 	bl	800557c <__NVIC_SystemReset>

08005656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff ffa0 	bl	80055a4 <SysTick_Config>
 8005664:	4603      	mov	r3, r0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e08d      	b.n	800579e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <HAL_DMA_Init+0x138>)
 800568a:	429a      	cmp	r2, r3
 800568c:	d80f      	bhi.n	80056ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	4b45      	ldr	r3, [pc, #276]	; (80057ac <HAL_DMA_Init+0x13c>)
 8005696:	4413      	add	r3, r2
 8005698:	4a45      	ldr	r2, [pc, #276]	; (80057b0 <HAL_DMA_Init+0x140>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	009a      	lsls	r2, r3, #2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a42      	ldr	r2, [pc, #264]	; (80057b4 <HAL_DMA_Init+0x144>)
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40
 80056ac:	e00e      	b.n	80056cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <HAL_DMA_Init+0x148>)
 80056b6:	4413      	add	r3, r2
 80056b8:	4a3d      	ldr	r2, [pc, #244]	; (80057b0 <HAL_DMA_Init+0x140>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	009a      	lsls	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a3c      	ldr	r2, [pc, #240]	; (80057bc <HAL_DMA_Init+0x14c>)
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80056f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa1e 	bl	8005b60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572c:	d102      	bne.n	8005734 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005748:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d010      	beq.n	8005774 <HAL_DMA_Init+0x104>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b04      	cmp	r3, #4
 8005758:	d80c      	bhi.n	8005774 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa3e 	bl	8005bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	e008      	b.n	8005786 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40020407 	.word	0x40020407
 80057ac:	bffdfff8 	.word	0xbffdfff8
 80057b0:	cccccccd 	.word	0xcccccccd
 80057b4:	40020000 	.word	0x40020000
 80057b8:	bffdfbf8 	.word	0xbffdfbf8
 80057bc:	40020400 	.word	0x40020400

080057c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_DMA_Start_IT+0x20>
 80057dc:	2302      	movs	r3, #2
 80057de:	e066      	b.n	80058ae <HAL_DMA_Start_IT+0xee>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d155      	bne.n	80058a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f962 	bl	8005ae2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 020e 	orr.w	r2, r2, #14
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e00f      	b.n	8005858 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 020a 	orr.w	r2, r2, #10
 8005856:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005874:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e005      	b.n	80058ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
 80058aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d00d      	beq.n	80058ea <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2204      	movs	r2, #4
 80058d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
 80058e8:	e047      	b.n	800597a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 020e 	bic.w	r2, r2, #14
 80058f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f003 021f 	and.w	r2, r3, #31
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	2101      	movs	r1, #1
 8005928:	fa01 f202 	lsl.w	r2, r1, r2
 800592c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005936:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00c      	beq.n	800595a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800594e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005958:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
    }
  }
  return status;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2204      	movs	r2, #4
 80059a6:	409a      	lsls	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d026      	beq.n	80059fe <HAL_DMA_IRQHandler+0x7a>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d021      	beq.n	80059fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0204 	bic.w	r2, r2, #4
 80059d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059dc:	f003 021f 	and.w	r2, r3, #31
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	2104      	movs	r1, #4
 80059e6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d071      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059fc:	e06c      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2202      	movs	r2, #2
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d02e      	beq.n	8005a70 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d029      	beq.n	8005a70 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 020a 	bic.w	r2, r2, #10
 8005a38:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	f003 021f 	and.w	r2, r3, #31
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	2102      	movs	r1, #2
 8005a50:	fa01 f202 	lsl.w	r2, r1, r2
 8005a54:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d038      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a6e:	e033      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2208      	movs	r2, #8
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d02a      	beq.n	8005ada <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d025      	beq.n	8005ada <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 020e 	bic.w	r2, r2, #14
 8005a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f003 021f 	and.w	r2, r3, #31
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2101      	movs	r1, #1
 8005aac:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
}
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005af8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d004      	beq.n	8005b0c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005b0a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	f003 021f 	and.w	r2, r3, #31
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b1e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d108      	bne.n	8005b42 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b40:	e007      	b.n	8005b52 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	60da      	str	r2, [r3, #12]
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d802      	bhi.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e001      	b.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b7c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	3b08      	subs	r3, #8
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b98:	089b      	lsrs	r3, r3, #2
 8005b9a:	009a      	lsls	r2, r3, #2
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a0b      	ldr	r2, [pc, #44]	; (8005bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005baa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40020407 	.word	0x40020407
 8005bcc:	40020800 	.word	0x40020800
 8005bd0:	40020820 	.word	0x40020820
 8005bd4:	cccccccd 	.word	0xcccccccd
 8005bd8:	40020880 	.word	0x40020880

08005bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005bfe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2201      	movs	r2, #1
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005c10:	bf00      	nop
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	1000823f 	.word	0x1000823f
 8005c20:	40020940 	.word	0x40020940

08005c24 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c36:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <HAL_FLASH_Program+0xa4>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_FLASH_Program+0x1e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e03e      	b.n	8005cc0 <HAL_FLASH_Program+0x9c>
 8005c42:	4b21      	ldr	r3, [pc, #132]	; (8005cc8 <HAL_FLASH_Program+0xa4>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c4c:	f000 f888 	bl	8005d60 <FLASH_WaitForLastOperation>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d12e      	bne.n	8005cb8 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <HAL_FLASH_Program+0xa4>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d107      	bne.n	8005c76 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c6a:	68b8      	ldr	r0, [r7, #8]
 8005c6c:	f000 f8cc 	bl	8005e08 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005c70:	2301      	movs	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	e010      	b.n	8005c98 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d002      	beq.n	8005c82 <HAL_FLASH_Program+0x5e>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d10a      	bne.n	8005c98 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	4619      	mov	r1, r3
 8005c86:	68b8      	ldr	r0, [r7, #8]
 8005c88:	f000 f8e2 	bl	8005e50 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d102      	bne.n	8005c98 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005c92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c96:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c9c:	f000 f860 	bl	8005d60 <FLASH_WaitForLastOperation>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d006      	beq.n	8005cb8 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005caa:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <HAL_FLASH_Program+0xa8>)
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	4906      	ldr	r1, [pc, #24]	; (8005ccc <HAL_FLASH_Program+0xa8>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005cb8:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <HAL_FLASH_Program+0xa4>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20000014 	.word	0x20000014
 8005ccc:	40022000 	.word	0x40022000

08005cd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <HAL_FLASH_Unlock+0x38>)
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	da0b      	bge.n	8005cfa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <HAL_FLASH_Unlock+0x38>)
 8005ce4:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <HAL_FLASH_Unlock+0x3c>)
 8005ce6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ce8:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <HAL_FLASH_Unlock+0x38>)
 8005cea:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <HAL_FLASH_Unlock+0x40>)
 8005cec:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005cee:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <HAL_FLASH_Unlock+0x38>)
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da01      	bge.n	8005cfa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	40022000 	.word	0x40022000
 8005d0c:	45670123 	.word	0x45670123
 8005d10:	cdef89ab 	.word	0xcdef89ab

08005d14 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <HAL_FLASH_Lock+0x30>)
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	4a08      	ldr	r2, [pc, #32]	; (8005d44 <HAL_FLASH_Lock+0x30>)
 8005d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d28:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_FLASH_Lock+0x30>)
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da01      	bge.n	8005d36 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005d36:	79fb      	ldrb	r3, [r7, #7]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	40022000 	.word	0x40022000

08005d48 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <HAL_FLASH_GetError+0x14>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	20000014 	.word	0x20000014

08005d60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005d68:	f7fd fea2 	bl	8003ab0 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d6e:	e009      	b.n	8005d84 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005d70:	f7fd fe9e 	bl	8003ab0 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d201      	bcs.n	8005d84 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e038      	b.n	8005df6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d84:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <FLASH_WaitForLastOperation+0xa0>)
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d90:	d0ee      	beq.n	8005d70 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005d92:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <FLASH_WaitForLastOperation+0xa0>)
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01e      	beq.n	8005de2 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8005da4:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <FLASH_WaitForLastOperation+0xa4>)
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <FLASH_WaitForLastOperation+0xa4>)
 8005dae:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <FLASH_WaitForLastOperation+0x6a>
 8005dba:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <FLASH_WaitForLastOperation+0xa0>)
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005dc4:	490e      	ldr	r1, [pc, #56]	; (8005e00 <FLASH_WaitForLastOperation+0xa0>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	618b      	str	r3, [r1, #24]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <FLASH_WaitForLastOperation+0x7e>
 8005dd4:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <FLASH_WaitForLastOperation+0xa0>)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005ddc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e009      	b.n	8005df6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005de2:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <FLASH_WaitForLastOperation+0xa0>)
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d102      	bne.n	8005df4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005dee:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <FLASH_WaitForLastOperation+0xa0>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40022000 	.word	0x40022000
 8005e04:	20000014 	.word	0x20000014

08005e08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005e08:	b490      	push	{r4, r7}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005e14:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <FLASH_Program_DoubleWord+0x44>)
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <FLASH_Program_DoubleWord+0x44>)
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005e26:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005e2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	f04f 0400 	mov.w	r4, #0
 8005e36:	0013      	movs	r3, r2
 8005e38:	2400      	movs	r4, #0
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	3204      	adds	r2, #4
 8005e3e:	6013      	str	r3, [r2, #0]
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc90      	pop	{r4, r7}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40022000 	.word	0x40022000

08005e50 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005e66:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <FLASH_Program_Fast+0x64>)
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	4a12      	ldr	r2, [pc, #72]	; (8005eb4 <FLASH_Program_Fast+0x64>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e72:	f3ef 8310 	mrs	r3, PRIMASK
 8005e76:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e78:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e7c:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	617b      	str	r3, [r7, #20]
    row_index--;
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005e98:	7ffb      	ldrb	r3, [r7, #31]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1ef      	bne.n	8005e7e <FLASH_Program_Fast+0x2e>
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005ea8:	bf00      	nop
 8005eaa:	3724      	adds	r7, #36	; 0x24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40022000 	.word	0x40022000

08005eb8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ec2:	4b4a      	ldr	r3, [pc, #296]	; (8005fec <HAL_FLASHEx_Erase+0x134>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_FLASHEx_Erase+0x16>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e089      	b.n	8005fe2 <HAL_FLASHEx_Erase+0x12a>
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_FLASHEx_Erase+0x134>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ed8:	f7ff ff42 	bl	8005d60 <FLASH_WaitForLastOperation>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d179      	bne.n	8005fda <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ee6:	4b41      	ldr	r3, [pc, #260]	; (8005fec <HAL_FLASHEx_Erase+0x134>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005eec:	4b40      	ldr	r3, [pc, #256]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d019      	beq.n	8005f2c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005ef8:	4b3d      	ldr	r3, [pc, #244]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a3c      	ldr	r2, [pc, #240]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005efe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f02:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005f04:	4b3a      	ldr	r3, [pc, #232]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f10:	4b37      	ldr	r3, [pc, #220]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a36      	ldr	r2, [pc, #216]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f1a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005f1c:	4b33      	ldr	r3, [pc, #204]	; (8005fec <HAL_FLASHEx_Erase+0x134>)
 8005f1e:	2203      	movs	r2, #3
 8005f20:	771a      	strb	r2, [r3, #28]
 8005f22:	e016      	b.n	8005f52 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005f24:	4b31      	ldr	r3, [pc, #196]	; (8005fec <HAL_FLASHEx_Erase+0x134>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	771a      	strb	r2, [r3, #28]
 8005f2a:	e012      	b.n	8005f52 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005f2c:	4b30      	ldr	r3, [pc, #192]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d009      	beq.n	8005f4c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f38:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2c      	ldr	r2, [pc, #176]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f42:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005f44:	4b29      	ldr	r3, [pc, #164]	; (8005fec <HAL_FLASHEx_Erase+0x134>)
 8005f46:	2202      	movs	r2, #2
 8005f48:	771a      	strb	r2, [r3, #28]
 8005f4a:	e002      	b.n	8005f52 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005f4c:	4b27      	ldr	r3, [pc, #156]	; (8005fec <HAL_FLASHEx_Erase+0x134>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d111      	bne.n	8005f7e <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f848 	bl	8005ff4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f68:	f7ff fefa 	bl	8005d60 <FLASH_WaitForLastOperation>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005f70:	4b1f      	ldr	r3, [pc, #124]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005f76:	f023 0304 	bic.w	r3, r3, #4
 8005f7a:	6153      	str	r3, [r2, #20]
 8005f7c:	e02b      	b.n	8005fd6 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f04f 32ff 	mov.w	r2, #4294967295
 8005f84:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	e01b      	b.n	8005fc6 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4619      	mov	r1, r3
 8005f94:	68b8      	ldr	r0, [r7, #8]
 8005f96:	f000 f84b 	bl	8006030 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f9e:	f7ff fedf 	bl	8005d60 <FLASH_WaitForLastOperation>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005fa6:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	4a11      	ldr	r2, [pc, #68]	; (8005ff0 <HAL_FLASHEx_Erase+0x138>)
 8005fac:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005fb0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	601a      	str	r2, [r3, #0]
          break;
 8005fbe:	e00a      	b.n	8005fd6 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60bb      	str	r3, [r7, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d3db      	bcc.n	8005f8e <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005fd6:	f000 f84f 	bl	8006078 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fda:	4b04      	ldr	r3, [pc, #16]	; (8005fec <HAL_FLASHEx_Erase+0x134>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]

  return status;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000014 	.word	0x20000014
 8005ff0:	40022000 	.word	0x40022000

08005ff4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <FLASH_MassErase+0x38>)
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	4a08      	ldr	r2, [pc, #32]	; (800602c <FLASH_MassErase+0x38>)
 800600c:	f043 0304 	orr.w	r3, r3, #4
 8006010:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <FLASH_MassErase+0x38>)
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	4a05      	ldr	r2, [pc, #20]	; (800602c <FLASH_MassErase+0x38>)
 8006018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601c:	6153      	str	r3, [r2, #20]
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40022000 	.word	0x40022000

08006030 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <FLASH_PageErase+0x44>)
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800604a:	490a      	ldr	r1, [pc, #40]	; (8006074 <FLASH_PageErase+0x44>)
 800604c:	4313      	orrs	r3, r2
 800604e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006050:	4b08      	ldr	r3, [pc, #32]	; (8006074 <FLASH_PageErase+0x44>)
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	4a07      	ldr	r2, [pc, #28]	; (8006074 <FLASH_PageErase+0x44>)
 8006056:	f043 0302 	orr.w	r3, r3, #2
 800605a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <FLASH_PageErase+0x44>)
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	4a04      	ldr	r2, [pc, #16]	; (8006074 <FLASH_PageErase+0x44>)
 8006062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006066:	6153      	str	r3, [r2, #20]
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40022000 	.word	0x40022000

08006078 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <FLASH_FlushCaches+0x80>)
 8006080:	7f1b      	ldrb	r3, [r3, #28]
 8006082:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d002      	beq.n	8006090 <FLASH_FlushCaches+0x18>
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d111      	bne.n	80060b4 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <FLASH_FlushCaches+0x84>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a19      	ldr	r2, [pc, #100]	; (80060fc <FLASH_FlushCaches+0x84>)
 8006096:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	4b17      	ldr	r3, [pc, #92]	; (80060fc <FLASH_FlushCaches+0x84>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a16      	ldr	r2, [pc, #88]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d002      	beq.n	80060c0 <FLASH_FlushCaches+0x48>
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d111      	bne.n	80060e4 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a0d      	ldr	r2, [pc, #52]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a0a      	ldr	r2, [pc, #40]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80060d8:	4b08      	ldr	r3, [pc, #32]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a07      	ldr	r2, [pc, #28]	; (80060fc <FLASH_FlushCaches+0x84>)
 80060de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060e2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80060e4:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <FLASH_FlushCaches+0x80>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	771a      	strb	r2, [r3, #28]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000014 	.word	0x20000014
 80060fc:	40022000 	.word	0x40022000

08006100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800610e:	e15a      	b.n	80063c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	2101      	movs	r1, #1
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	fa01 f303 	lsl.w	r3, r1, r3
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 814c 	beq.w	80063c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d00b      	beq.n	8006148 <HAL_GPIO_Init+0x48>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d007      	beq.n	8006148 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800613c:	2b11      	cmp	r3, #17
 800613e:	d003      	beq.n	8006148 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b12      	cmp	r3, #18
 8006146:	d130      	bne.n	80061aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	2203      	movs	r2, #3
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800617e:	2201      	movs	r2, #1
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	43db      	mvns	r3, r3
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4013      	ands	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	091b      	lsrs	r3, r3, #4
 8006194:	f003 0201 	and.w	r2, r3, #1
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	2203      	movs	r2, #3
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43db      	mvns	r3, r3
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4013      	ands	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_Init+0xea>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b12      	cmp	r3, #18
 80061e8:	d123      	bne.n	8006232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	08da      	lsrs	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3208      	adds	r2, #8
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	220f      	movs	r2, #15
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	43db      	mvns	r3, r3
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4013      	ands	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	08da      	lsrs	r2, r3, #3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3208      	adds	r2, #8
 800622c:	6939      	ldr	r1, [r7, #16]
 800622e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	2203      	movs	r2, #3
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 0203 	and.w	r2, r3, #3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80a6 	beq.w	80063c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006274:	4b5b      	ldr	r3, [pc, #364]	; (80063e4 <HAL_GPIO_Init+0x2e4>)
 8006276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006278:	4a5a      	ldr	r2, [pc, #360]	; (80063e4 <HAL_GPIO_Init+0x2e4>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6613      	str	r3, [r2, #96]	; 0x60
 8006280:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <HAL_GPIO_Init+0x2e4>)
 8006282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800628c:	4a56      	ldr	r2, [pc, #344]	; (80063e8 <HAL_GPIO_Init+0x2e8>)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	3302      	adds	r3, #2
 8006294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	220f      	movs	r2, #15
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4013      	ands	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062b6:	d01f      	beq.n	80062f8 <HAL_GPIO_Init+0x1f8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a4c      	ldr	r2, [pc, #304]	; (80063ec <HAL_GPIO_Init+0x2ec>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d019      	beq.n	80062f4 <HAL_GPIO_Init+0x1f4>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a4b      	ldr	r2, [pc, #300]	; (80063f0 <HAL_GPIO_Init+0x2f0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d013      	beq.n	80062f0 <HAL_GPIO_Init+0x1f0>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a4a      	ldr	r2, [pc, #296]	; (80063f4 <HAL_GPIO_Init+0x2f4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00d      	beq.n	80062ec <HAL_GPIO_Init+0x1ec>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a49      	ldr	r2, [pc, #292]	; (80063f8 <HAL_GPIO_Init+0x2f8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d007      	beq.n	80062e8 <HAL_GPIO_Init+0x1e8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a48      	ldr	r2, [pc, #288]	; (80063fc <HAL_GPIO_Init+0x2fc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d101      	bne.n	80062e4 <HAL_GPIO_Init+0x1e4>
 80062e0:	2305      	movs	r3, #5
 80062e2:	e00a      	b.n	80062fa <HAL_GPIO_Init+0x1fa>
 80062e4:	2306      	movs	r3, #6
 80062e6:	e008      	b.n	80062fa <HAL_GPIO_Init+0x1fa>
 80062e8:	2304      	movs	r3, #4
 80062ea:	e006      	b.n	80062fa <HAL_GPIO_Init+0x1fa>
 80062ec:	2303      	movs	r3, #3
 80062ee:	e004      	b.n	80062fa <HAL_GPIO_Init+0x1fa>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e002      	b.n	80062fa <HAL_GPIO_Init+0x1fa>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_GPIO_Init+0x1fa>
 80062f8:	2300      	movs	r3, #0
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	f002 0203 	and.w	r2, r2, #3
 8006300:	0092      	lsls	r2, r2, #2
 8006302:	4093      	lsls	r3, r2
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800630a:	4937      	ldr	r1, [pc, #220]	; (80063e8 <HAL_GPIO_Init+0x2e8>)
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	089b      	lsrs	r3, r3, #2
 8006310:	3302      	adds	r3, #2
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006318:	4b39      	ldr	r3, [pc, #228]	; (8006400 <HAL_GPIO_Init+0x300>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	43db      	mvns	r3, r3
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4013      	ands	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800633c:	4a30      	ldr	r2, [pc, #192]	; (8006400 <HAL_GPIO_Init+0x300>)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006342:	4b2f      	ldr	r3, [pc, #188]	; (8006400 <HAL_GPIO_Init+0x300>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	43db      	mvns	r3, r3
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4013      	ands	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006366:	4a26      	ldr	r2, [pc, #152]	; (8006400 <HAL_GPIO_Init+0x300>)
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800636c:	4b24      	ldr	r3, [pc, #144]	; (8006400 <HAL_GPIO_Init+0x300>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	43db      	mvns	r3, r3
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4013      	ands	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006390:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <HAL_GPIO_Init+0x300>)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006396:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <HAL_GPIO_Init+0x300>)
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	43db      	mvns	r3, r3
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4013      	ands	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063ba:	4a11      	ldr	r2, [pc, #68]	; (8006400 <HAL_GPIO_Init+0x300>)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	3301      	adds	r3, #1
 80063c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f47f ae9d 	bne.w	8006110 <HAL_GPIO_Init+0x10>
  }
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40021000 	.word	0x40021000
 80063e8:	40010000 	.word	0x40010000
 80063ec:	48000400 	.word	0x48000400
 80063f0:	48000800 	.word	0x48000800
 80063f4:	48000c00 	.word	0x48000c00
 80063f8:	48001000 	.word	0x48001000
 80063fc:	48001400 	.word	0x48001400
 8006400:	40010400 	.word	0x40010400

08006404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	887b      	ldrh	r3, [r7, #2]
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
 8006420:	e001      	b.n	8006426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	807b      	strh	r3, [r7, #2]
 8006440:	4613      	mov	r3, r2
 8006442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006444:	787b      	ldrb	r3, [r7, #1]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800644a:	887a      	ldrh	r2, [r7, #2]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006450:	e002      	b.n	8006458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006452:	887a      	ldrh	r2, [r7, #2]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e0bb      	b.n	80065f2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b05      	cmp	r3, #5
 8006484:	d101      	bne.n	800648a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e0b3      	b.n	80065f2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d101      	bne.n	800649a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e0ab      	b.n	80065f2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800649a:	4b58      	ldr	r3, [pc, #352]	; (80065fc <HAL_OPAMP_Init+0x198>)
 800649c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649e:	4a57      	ldr	r2, [pc, #348]	; (80065fc <HAL_OPAMP_Init+0x198>)
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	6613      	str	r3, [r2, #96]	; 0x60
 80064a6:	4b55      	ldr	r3, [pc, #340]	; (80065fc <HAL_OPAMP_Init+0x198>)
 80064a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	60bb      	str	r3, [r7, #8]
 80064b0:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fd f880 	bl	80035cc <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d003      	beq.n	80064dc <HAL_OPAMP_Init+0x78>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b60      	cmp	r3, #96	; 0x60
 80064da:	d133      	bne.n	8006544 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f023 0110 	bic.w	r1, r3, #16
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4b41      	ldr	r3, [pc, #260]	; (8006600 <HAL_OPAMP_Init+0x19c>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6851      	ldr	r1, [r2, #4]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6892      	ldr	r2, [r2, #8]
 8006504:	4311      	orrs	r1, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6912      	ldr	r2, [r2, #16]
 800650a:	430a      	orrs	r2, r1
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	7d09      	ldrb	r1, [r1, #20]
 8006510:	2901      	cmp	r1, #1
 8006512:	d102      	bne.n	800651a <HAL_OPAMP_Init+0xb6>
 8006514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006518:	e000      	b.n	800651c <HAL_OPAMP_Init+0xb8>
 800651a:	2100      	movs	r1, #0
 800651c:	4311      	orrs	r1, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006522:	4311      	orrs	r1, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006528:	4311      	orrs	r1, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800652e:	04d2      	lsls	r2, r2, #19
 8006530:	4311      	orrs	r1, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006536:	0612      	lsls	r2, r2, #24
 8006538:	4311      	orrs	r1, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	430b      	orrs	r3, r1
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e035      	b.n	80065b0 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f023 0110 	bic.w	r1, r3, #16
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	4b27      	ldr	r3, [pc, #156]	; (8006600 <HAL_OPAMP_Init+0x19c>)
 8006562:	4013      	ands	r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6851      	ldr	r1, [r2, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6892      	ldr	r2, [r2, #8]
 800656c:	4311      	orrs	r1, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	68d2      	ldr	r2, [r2, #12]
 8006572:	4311      	orrs	r1, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6912      	ldr	r2, [r2, #16]
 8006578:	430a      	orrs	r2, r1
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	7d09      	ldrb	r1, [r1, #20]
 800657e:	2901      	cmp	r1, #1
 8006580:	d102      	bne.n	8006588 <HAL_OPAMP_Init+0x124>
 8006582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006586:	e000      	b.n	800658a <HAL_OPAMP_Init+0x126>
 8006588:	2100      	movs	r1, #0
 800658a:	4311      	orrs	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006590:	4311      	orrs	r1, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006596:	4311      	orrs	r1, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800659c:	04d2      	lsls	r2, r2, #19
 800659e:	4311      	orrs	r1, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065a4:	0612      	lsls	r2, r2, #24
 80065a6:	4311      	orrs	r1, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	db10      	blt.n	80065dc <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	e0003e11 	.word	0xe0003e11

08006604 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
 800661a:	e01d      	b.n	8006658 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b05      	cmp	r3, #5
 8006626:	d102      	bne.n	800662e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
 800662c:	e014      	b.n	8006658 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b01      	cmp	r3, #1
 8006638:	d10c      	bne.n	8006654 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0201 	orr.w	r2, r2, #1
 8006648:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2204      	movs	r2, #4
 800664e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006652:	e001      	b.n	8006658 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d141      	bne.n	80066fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006676:	4b4b      	ldr	r3, [pc, #300]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800667e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006682:	d131      	bne.n	80066e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006684:	4b47      	ldr	r3, [pc, #284]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	4a46      	ldr	r2, [pc, #280]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006694:	4b43      	ldr	r3, [pc, #268]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800669c:	4a41      	ldr	r2, [pc, #260]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800669e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066a4:	4b40      	ldr	r3, [pc, #256]	; (80067a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2232      	movs	r2, #50	; 0x32
 80066aa:	fb02 f303 	mul.w	r3, r2, r3
 80066ae:	4a3f      	ldr	r2, [pc, #252]	; (80067ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066b0:	fba2 2303 	umull	r2, r3, r2, r3
 80066b4:	0c9b      	lsrs	r3, r3, #18
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066ba:	e002      	b.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3b01      	subs	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066c2:	4b38      	ldr	r3, [pc, #224]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ce:	d102      	bne.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f2      	bne.n	80066bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066d6:	4b33      	ldr	r3, [pc, #204]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e2:	d158      	bne.n	8006796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e057      	b.n	8006798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066e8:	4b2e      	ldr	r3, [pc, #184]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ee:	4a2d      	ldr	r2, [pc, #180]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066f8:	e04d      	b.n	8006796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006700:	d141      	bne.n	8006786 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006702:	4b28      	ldr	r3, [pc, #160]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800670a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670e:	d131      	bne.n	8006774 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006710:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006716:	4a23      	ldr	r2, [pc, #140]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006720:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006728:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800672a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800672e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006730:	4b1d      	ldr	r3, [pc, #116]	; (80067a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2232      	movs	r2, #50	; 0x32
 8006736:	fb02 f303 	mul.w	r3, r2, r3
 800673a:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800673c:	fba2 2303 	umull	r2, r3, r2, r3
 8006740:	0c9b      	lsrs	r3, r3, #18
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006746:	e002      	b.n	800674e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3b01      	subs	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675a:	d102      	bne.n	8006762 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f2      	bne.n	8006748 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006762:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676e:	d112      	bne.n	8006796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e011      	b.n	8006798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006774:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800677a:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800677c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006784:	e007      	b.n	8006796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006786:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800678e:	4a05      	ldr	r2, [pc, #20]	; (80067a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006794:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40007000 	.word	0x40007000
 80067a8:	20000008 	.word	0x20000008
 80067ac:	431bde83 	.word	0x431bde83

080067b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	4a04      	ldr	r2, [pc, #16]	; (80067cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067be:	6093      	str	r3, [r2, #8]
}
 80067c0:	bf00      	nop
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40007000 	.word	0x40007000

080067d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e308      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d075      	beq.n	80068da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ee:	4ba3      	ldr	r3, [pc, #652]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 030c 	and.w	r3, r3, #12
 80067f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067f8:	4ba0      	ldr	r3, [pc, #640]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b0c      	cmp	r3, #12
 8006806:	d102      	bne.n	800680e <HAL_RCC_OscConfig+0x3e>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2b03      	cmp	r3, #3
 800680c:	d002      	beq.n	8006814 <HAL_RCC_OscConfig+0x44>
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d10b      	bne.n	800682c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006814:	4b99      	ldr	r3, [pc, #612]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d05b      	beq.n	80068d8 <HAL_RCC_OscConfig+0x108>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d157      	bne.n	80068d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e2e3      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006834:	d106      	bne.n	8006844 <HAL_RCC_OscConfig+0x74>
 8006836:	4b91      	ldr	r3, [pc, #580]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a90      	ldr	r2, [pc, #576]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e01d      	b.n	8006880 <HAL_RCC_OscConfig+0xb0>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800684c:	d10c      	bne.n	8006868 <HAL_RCC_OscConfig+0x98>
 800684e:	4b8b      	ldr	r3, [pc, #556]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a8a      	ldr	r2, [pc, #552]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4b88      	ldr	r3, [pc, #544]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a87      	ldr	r2, [pc, #540]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e00b      	b.n	8006880 <HAL_RCC_OscConfig+0xb0>
 8006868:	4b84      	ldr	r3, [pc, #528]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a83      	ldr	r2, [pc, #524]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800686e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4b81      	ldr	r3, [pc, #516]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a80      	ldr	r2, [pc, #512]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800687a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d013      	beq.n	80068b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fd f912 	bl	8003ab0 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006890:	f7fd f90e 	bl	8003ab0 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b64      	cmp	r3, #100	; 0x64
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e2a8      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068a2:	4b76      	ldr	r3, [pc, #472]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0xc0>
 80068ae:	e014      	b.n	80068da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fd f8fe 	bl	8003ab0 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b8:	f7fd f8fa 	bl	8003ab0 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	; 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e294      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ca:	4b6c      	ldr	r3, [pc, #432]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f0      	bne.n	80068b8 <HAL_RCC_OscConfig+0xe8>
 80068d6:	e000      	b.n	80068da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d075      	beq.n	80069d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e6:	4b65      	ldr	r3, [pc, #404]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068f0:	4b62      	ldr	r3, [pc, #392]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b0c      	cmp	r3, #12
 80068fe:	d102      	bne.n	8006906 <HAL_RCC_OscConfig+0x136>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d002      	beq.n	800690c <HAL_RCC_OscConfig+0x13c>
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b04      	cmp	r3, #4
 800690a:	d11f      	bne.n	800694c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800690c:	4b5b      	ldr	r3, [pc, #364]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RCC_OscConfig+0x154>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e267      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006924:	4b55      	ldr	r3, [pc, #340]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	061b      	lsls	r3, r3, #24
 8006932:	4952      	ldr	r1, [pc, #328]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006934:	4313      	orrs	r3, r2
 8006936:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006938:	4b51      	ldr	r3, [pc, #324]	; (8006a80 <HAL_RCC_OscConfig+0x2b0>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f7fd f86b 	bl	8003a18 <HAL_InitTick>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d043      	beq.n	80069d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e253      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d023      	beq.n	800699c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006954:	4b49      	ldr	r3, [pc, #292]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a48      	ldr	r2, [pc, #288]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800695a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800695e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fd f8a6 	bl	8003ab0 <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006968:	f7fd f8a2 	bl	8003ab0 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e23c      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800697a:	4b40      	ldr	r3, [pc, #256]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0f0      	beq.n	8006968 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006986:	4b3d      	ldr	r3, [pc, #244]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	061b      	lsls	r3, r3, #24
 8006994:	4939      	ldr	r1, [pc, #228]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006996:	4313      	orrs	r3, r2
 8006998:	604b      	str	r3, [r1, #4]
 800699a:	e01a      	b.n	80069d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699c:	4b37      	ldr	r3, [pc, #220]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a36      	ldr	r2, [pc, #216]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80069a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a8:	f7fd f882 	bl	8003ab0 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069b0:	f7fd f87e 	bl	8003ab0 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e218      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069c2:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x1e0>
 80069ce:	e000      	b.n	80069d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d03c      	beq.n	8006a58 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01c      	beq.n	8006a20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069e6:	4b25      	ldr	r3, [pc, #148]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80069e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ec:	4a23      	ldr	r2, [pc, #140]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f6:	f7fd f85b 	bl	8003ab0 <HAL_GetTick>
 80069fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069fc:	e008      	b.n	8006a10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069fe:	f7fd f857 	bl	8003ab0 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e1f1      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a10:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ef      	beq.n	80069fe <HAL_RCC_OscConfig+0x22e>
 8006a1e:	e01b      	b.n	8006a58 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a20:	4b16      	ldr	r3, [pc, #88]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a30:	f7fd f83e 	bl	8003ab0 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a38:	f7fd f83a 	bl	8003ab0 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e1d4      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1ef      	bne.n	8006a38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80ab 	beq.w	8006bbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a66:	2300      	movs	r3, #0
 8006a68:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a6a:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <HAL_RCC_OscConfig+0x2ac>)
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_RCC_OscConfig+0x2b4>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e005      	b.n	8006a86 <HAL_RCC_OscConfig+0x2b6>
 8006a7a:	bf00      	nop
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	2000000c 	.word	0x2000000c
 8006a84:	2300      	movs	r3, #0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00d      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a8a:	4baf      	ldr	r3, [pc, #700]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a8e:	4aae      	ldr	r2, [pc, #696]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6593      	str	r3, [r2, #88]	; 0x58
 8006a96:	4bac      	ldr	r3, [pc, #688]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aa6:	4ba9      	ldr	r3, [pc, #676]	; (8006d4c <HAL_RCC_OscConfig+0x57c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d118      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ab2:	4ba6      	ldr	r3, [pc, #664]	; (8006d4c <HAL_RCC_OscConfig+0x57c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4aa5      	ldr	r2, [pc, #660]	; (8006d4c <HAL_RCC_OscConfig+0x57c>)
 8006ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006abe:	f7fc fff7 	bl	8003ab0 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac6:	f7fc fff3 	bl	8003ab0 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e18d      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ad8:	4b9c      	ldr	r3, [pc, #624]	; (8006d4c <HAL_RCC_OscConfig+0x57c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f0      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d108      	bne.n	8006afe <HAL_RCC_OscConfig+0x32e>
 8006aec:	4b96      	ldr	r3, [pc, #600]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af2:	4a95      	ldr	r2, [pc, #596]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006afc:	e024      	b.n	8006b48 <HAL_RCC_OscConfig+0x378>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d110      	bne.n	8006b28 <HAL_RCC_OscConfig+0x358>
 8006b06:	4b90      	ldr	r3, [pc, #576]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0c:	4a8e      	ldr	r2, [pc, #568]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b0e:	f043 0304 	orr.w	r3, r3, #4
 8006b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b16:	4b8c      	ldr	r3, [pc, #560]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1c:	4a8a      	ldr	r2, [pc, #552]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b26:	e00f      	b.n	8006b48 <HAL_RCC_OscConfig+0x378>
 8006b28:	4b87      	ldr	r3, [pc, #540]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	4a86      	ldr	r2, [pc, #536]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b38:	4b83      	ldr	r3, [pc, #524]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3e:	4a82      	ldr	r2, [pc, #520]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b40:	f023 0304 	bic.w	r3, r3, #4
 8006b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d016      	beq.n	8006b7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7fc ffae 	bl	8003ab0 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b56:	e00a      	b.n	8006b6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b58:	f7fc ffaa 	bl	8003ab0 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e142      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b6e:	4b76      	ldr	r3, [pc, #472]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ed      	beq.n	8006b58 <HAL_RCC_OscConfig+0x388>
 8006b7c:	e015      	b.n	8006baa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7e:	f7fc ff97 	bl	8003ab0 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b84:	e00a      	b.n	8006b9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b86:	f7fc ff93 	bl	8003ab0 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e12b      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b9c:	4b6a      	ldr	r3, [pc, #424]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1ed      	bne.n	8006b86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006baa:	7ffb      	ldrb	r3, [r7, #31]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d105      	bne.n	8006bbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bb0:	4b65      	ldr	r3, [pc, #404]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb4:	4a64      	ldr	r2, [pc, #400]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d03c      	beq.n	8006c42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01c      	beq.n	8006c0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bd0:	4b5d      	ldr	r3, [pc, #372]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bd6:	4a5c      	ldr	r2, [pc, #368]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be0:	f7fc ff66 	bl	8003ab0 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006be8:	f7fc ff62 	bl	8003ab0 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e0fc      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bfa:	4b53      	ldr	r3, [pc, #332]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0ef      	beq.n	8006be8 <HAL_RCC_OscConfig+0x418>
 8006c08:	e01b      	b.n	8006c42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c0a:	4b4f      	ldr	r3, [pc, #316]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c10:	4a4d      	ldr	r2, [pc, #308]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006c12:	f023 0301 	bic.w	r3, r3, #1
 8006c16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1a:	f7fc ff49 	bl	8003ab0 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c22:	f7fc ff45 	bl	8003ab0 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e0df      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c34:	4b44      	ldr	r3, [pc, #272]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1ef      	bne.n	8006c22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 80d3 	beq.w	8006df2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c4c:	4b3e      	ldr	r3, [pc, #248]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 030c 	and.w	r3, r3, #12
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	f000 808d 	beq.w	8006d74 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d15a      	bne.n	8006d18 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c62:	4b39      	ldr	r3, [pc, #228]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a38      	ldr	r2, [pc, #224]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6e:	f7fc ff1f 	bl	8003ab0 <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c74:	e008      	b.n	8006c88 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c76:	f7fc ff1b 	bl	8003ab0 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e0b5      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c88:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f0      	bne.n	8006c76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c94:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	4b2d      	ldr	r3, [pc, #180]	; (8006d50 <HAL_RCC_OscConfig+0x580>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6a11      	ldr	r1, [r2, #32]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ca4:	3a01      	subs	r2, #1
 8006ca6:	0112      	lsls	r2, r2, #4
 8006ca8:	4311      	orrs	r1, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006cae:	0212      	lsls	r2, r2, #8
 8006cb0:	4311      	orrs	r1, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006cb6:	0852      	lsrs	r2, r2, #1
 8006cb8:	3a01      	subs	r2, #1
 8006cba:	0552      	lsls	r2, r2, #21
 8006cbc:	4311      	orrs	r1, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cc2:	0852      	lsrs	r2, r2, #1
 8006cc4:	3a01      	subs	r2, #1
 8006cc6:	0652      	lsls	r2, r2, #25
 8006cc8:	4311      	orrs	r1, r2
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006cce:	06d2      	lsls	r2, r2, #27
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	491d      	ldr	r1, [pc, #116]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ce2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ce4:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fc fede 	bl	8003ab0 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7fc feda 	bl	8003ab0 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e074      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d0a:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x528>
 8006d16:	e06c      	b.n	8006df2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d18:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d22:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006d24:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4a07      	ldr	r2, [pc, #28]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d30:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4a04      	ldr	r2, [pc, #16]	; (8006d48 <HAL_RCC_OscConfig+0x578>)
 8006d36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d40:	f7fc feb6 	bl	8003ab0 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d46:	e00e      	b.n	8006d66 <HAL_RCC_OscConfig+0x596>
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	40007000 	.word	0x40007000
 8006d50:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d54:	f7fc feac 	bl	8003ab0 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e046      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d66:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <HAL_RCC_OscConfig+0x62c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f0      	bne.n	8006d54 <HAL_RCC_OscConfig+0x584>
 8006d72:	e03e      	b.n	8006df2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e039      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006d80:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <HAL_RCC_OscConfig+0x62c>)
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f003 0203 	and.w	r2, r3, #3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d12c      	bne.n	8006dee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d123      	bne.n	8006dee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d11b      	bne.n	8006dee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d113      	bne.n	8006dee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d109      	bne.n	8006dee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	3b01      	subs	r3, #1
 8006de8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d001      	beq.n	8006df2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40021000 	.word	0x40021000

08006e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e11e      	b.n	8007056 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e18:	4b91      	ldr	r3, [pc, #580]	; (8007060 <HAL_RCC_ClockConfig+0x260>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d910      	bls.n	8006e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e26:	4b8e      	ldr	r3, [pc, #568]	; (8007060 <HAL_RCC_ClockConfig+0x260>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	498c      	ldr	r1, [pc, #560]	; (8007060 <HAL_RCC_ClockConfig+0x260>)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e36:	4b8a      	ldr	r3, [pc, #552]	; (8007060 <HAL_RCC_ClockConfig+0x260>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d001      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e106      	b.n	8007056 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d073      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d129      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e5c:	4b81      	ldr	r3, [pc, #516]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0f4      	b.n	8007056 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e6c:	f000 f99e 	bl	80071ac <RCC_GetSysClockFreqFromPLLSource>
 8006e70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4a7c      	ldr	r2, [pc, #496]	; (8007068 <HAL_RCC_ClockConfig+0x268>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d93f      	bls.n	8006efa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e7a:	4b7a      	ldr	r3, [pc, #488]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d033      	beq.n	8006efa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d12f      	bne.n	8006efa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e9a:	4b72      	ldr	r3, [pc, #456]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ea2:	4a70      	ldr	r2, [pc, #448]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006eaa:	2380      	movs	r3, #128	; 0x80
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	e024      	b.n	8006efa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d107      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eb8:	4b6a      	ldr	r3, [pc, #424]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0c6      	b.n	8007056 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ec8:	4b66      	ldr	r3, [pc, #408]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0be      	b.n	8007056 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006ed8:	f000 f8ce 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 8006edc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	4a61      	ldr	r2, [pc, #388]	; (8007068 <HAL_RCC_ClockConfig+0x268>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d909      	bls.n	8006efa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ee6:	4b5f      	ldr	r3, [pc, #380]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eee:	4a5d      	ldr	r2, [pc, #372]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ef6:	2380      	movs	r3, #128	; 0x80
 8006ef8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006efa:	4b5a      	ldr	r3, [pc, #360]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f023 0203 	bic.w	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4957      	ldr	r1, [pc, #348]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0c:	f7fc fdd0 	bl	8003ab0 <HAL_GetTick>
 8006f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f12:	e00a      	b.n	8006f2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f14:	f7fc fdcc 	bl	8003ab0 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e095      	b.n	8007056 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f2a:	4b4e      	ldr	r3, [pc, #312]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 020c 	and.w	r2, r3, #12
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d1eb      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d023      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f54:	4b43      	ldr	r3, [pc, #268]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4a42      	ldr	r2, [pc, #264]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f6c:	4b3d      	ldr	r3, [pc, #244]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f74:	4a3b      	ldr	r2, [pc, #236]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f7c:	4b39      	ldr	r3, [pc, #228]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	4936      	ldr	r1, [pc, #216]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	608b      	str	r3, [r1, #8]
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b80      	cmp	r3, #128	; 0x80
 8006f94:	d105      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f96:	4b33      	ldr	r3, [pc, #204]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	4a32      	ldr	r2, [pc, #200]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fa0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa2:	4b2f      	ldr	r3, [pc, #188]	; (8007060 <HAL_RCC_ClockConfig+0x260>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d21d      	bcs.n	8006fec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb0:	4b2b      	ldr	r3, [pc, #172]	; (8007060 <HAL_RCC_ClockConfig+0x260>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f023 020f 	bic.w	r2, r3, #15
 8006fb8:	4929      	ldr	r1, [pc, #164]	; (8007060 <HAL_RCC_ClockConfig+0x260>)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006fc0:	f7fc fd76 	bl	8003ab0 <HAL_GetTick>
 8006fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc6:	e00a      	b.n	8006fde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fc8:	f7fc fd72 	bl	8003ab0 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e03b      	b.n	8007056 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fde:	4b20      	ldr	r3, [pc, #128]	; (8007060 <HAL_RCC_ClockConfig+0x260>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d1ed      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	4917      	ldr	r1, [pc, #92]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8007006:	4313      	orrs	r3, r2
 8007008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d009      	beq.n	800702a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007016:	4b13      	ldr	r3, [pc, #76]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	490f      	ldr	r1, [pc, #60]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8007026:	4313      	orrs	r3, r2
 8007028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800702a:	f000 f825 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 800702e:	4601      	mov	r1, r0
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <HAL_RCC_ClockConfig+0x264>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	4a0c      	ldr	r2, [pc, #48]	; (800706c <HAL_RCC_ClockConfig+0x26c>)
 800703c:	5cd3      	ldrb	r3, [r2, r3]
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	fa21 f303 	lsr.w	r3, r1, r3
 8007046:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <HAL_RCC_ClockConfig+0x270>)
 8007048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800704a:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <HAL_RCC_ClockConfig+0x274>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fc fce2 	bl	8003a18 <HAL_InitTick>
 8007054:	4603      	mov	r3, r0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40022000 	.word	0x40022000
 8007064:	40021000 	.word	0x40021000
 8007068:	04c4b400 	.word	0x04c4b400
 800706c:	0800a19c 	.word	0x0800a19c
 8007070:	20000008 	.word	0x20000008
 8007074:	2000000c 	.word	0x2000000c

08007078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800707e:	4b2c      	ldr	r3, [pc, #176]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b04      	cmp	r3, #4
 8007088:	d102      	bne.n	8007090 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800708a:	4b2a      	ldr	r3, [pc, #168]	; (8007134 <HAL_RCC_GetSysClockFreq+0xbc>)
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	e047      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007090:	4b27      	ldr	r3, [pc, #156]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	2b08      	cmp	r3, #8
 800709a:	d102      	bne.n	80070a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800709c:	4b26      	ldr	r3, [pc, #152]	; (8007138 <HAL_RCC_GetSysClockFreq+0xc0>)
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	e03e      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80070a2:	4b23      	ldr	r3, [pc, #140]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 030c 	and.w	r3, r3, #12
 80070aa:	2b0c      	cmp	r3, #12
 80070ac:	d136      	bne.n	800711c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070ae:	4b20      	ldr	r3, [pc, #128]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	091b      	lsrs	r3, r3, #4
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	3301      	adds	r3, #1
 80070c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d10c      	bne.n	80070e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070cc:	4a1a      	ldr	r2, [pc, #104]	; (8007138 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d4:	4a16      	ldr	r2, [pc, #88]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070d6:	68d2      	ldr	r2, [r2, #12]
 80070d8:	0a12      	lsrs	r2, r2, #8
 80070da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070de:	fb02 f303 	mul.w	r3, r2, r3
 80070e2:	617b      	str	r3, [r7, #20]
      break;
 80070e4:	e00c      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070e6:	4a13      	ldr	r2, [pc, #76]	; (8007134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ee:	4a10      	ldr	r2, [pc, #64]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070f0:	68d2      	ldr	r2, [r2, #12]
 80070f2:	0a12      	lsrs	r2, r2, #8
 80070f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070f8:	fb02 f303 	mul.w	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]
      break;
 80070fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	0e5b      	lsrs	r3, r3, #25
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	3301      	adds	r3, #1
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	e001      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007120:	693b      	ldr	r3, [r7, #16]
}
 8007122:	4618      	mov	r0, r3
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000
 8007134:	00f42400 	.word	0x00f42400
 8007138:	007a1200 	.word	0x007a1200

0800713c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <HAL_RCC_GetHCLKFreq+0x14>)
 8007142:	681b      	ldr	r3, [r3, #0]
}
 8007144:	4618      	mov	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20000008 	.word	0x20000008

08007154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007158:	f7ff fff0 	bl	800713c <HAL_RCC_GetHCLKFreq>
 800715c:	4601      	mov	r1, r0
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	4a04      	ldr	r2, [pc, #16]	; (800717c <HAL_RCC_GetPCLK1Freq+0x28>)
 800716a:	5cd3      	ldrb	r3, [r2, r3]
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007174:	4618      	mov	r0, r3
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40021000 	.word	0x40021000
 800717c:	0800a1ac 	.word	0x0800a1ac

08007180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007184:	f7ff ffda 	bl	800713c <HAL_RCC_GetHCLKFreq>
 8007188:	4601      	mov	r1, r0
 800718a:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	0adb      	lsrs	r3, r3, #11
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	4a04      	ldr	r2, [pc, #16]	; (80071a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007196:	5cd3      	ldrb	r3, [r2, r3]
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40021000 	.word	0x40021000
 80071a8:	0800a1ac 	.word	0x0800a1ac

080071ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071b2:	4b1e      	ldr	r3, [pc, #120]	; (800722c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071bc:	4b1b      	ldr	r3, [pc, #108]	; (800722c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	091b      	lsrs	r3, r3, #4
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d10c      	bne.n	80071ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071d0:	4a17      	ldr	r2, [pc, #92]	; (8007230 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	4a14      	ldr	r2, [pc, #80]	; (800722c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071da:	68d2      	ldr	r2, [r2, #12]
 80071dc:	0a12      	lsrs	r2, r2, #8
 80071de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071e2:	fb02 f303 	mul.w	r3, r2, r3
 80071e6:	617b      	str	r3, [r7, #20]
    break;
 80071e8:	e00c      	b.n	8007204 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071ea:	4a12      	ldr	r2, [pc, #72]	; (8007234 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f2:	4a0e      	ldr	r2, [pc, #56]	; (800722c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071f4:	68d2      	ldr	r2, [r2, #12]
 80071f6:	0a12      	lsrs	r2, r2, #8
 80071f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071fc:	fb02 f303 	mul.w	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]
    break;
 8007202:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007204:	4b09      	ldr	r3, [pc, #36]	; (800722c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	0e5b      	lsrs	r3, r3, #25
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	3301      	adds	r3, #1
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800721e:	687b      	ldr	r3, [r7, #4]
}
 8007220:	4618      	mov	r0, r3
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40021000 	.word	0x40021000
 8007230:	007a1200 	.word	0x007a1200
 8007234:	00f42400 	.word	0x00f42400

08007238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007240:	2300      	movs	r3, #0
 8007242:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007244:	2300      	movs	r3, #0
 8007246:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8098 	beq.w	8007386 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007256:	2300      	movs	r3, #0
 8007258:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800725a:	4b43      	ldr	r3, [pc, #268]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800725c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10d      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007266:	4b40      	ldr	r3, [pc, #256]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726a:	4a3f      	ldr	r2, [pc, #252]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800726c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007270:	6593      	str	r3, [r2, #88]	; 0x58
 8007272:	4b3d      	ldr	r3, [pc, #244]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727a:	60bb      	str	r3, [r7, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800727e:	2301      	movs	r3, #1
 8007280:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007282:	4b3a      	ldr	r3, [pc, #232]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a39      	ldr	r2, [pc, #228]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800728e:	f7fc fc0f 	bl	8003ab0 <HAL_GetTick>
 8007292:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007294:	e009      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007296:	f7fc fc0b 	bl	8003ab0 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d902      	bls.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	74fb      	strb	r3, [r7, #19]
        break;
 80072a8:	e005      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072aa:	4b30      	ldr	r3, [pc, #192]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0ef      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80072b6:	7cfb      	ldrb	r3, [r7, #19]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d159      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072bc:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d01e      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d019      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072d8:	4b23      	ldr	r3, [pc, #140]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072e4:	4b20      	ldr	r3, [pc, #128]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ea:	4a1f      	ldr	r2, [pc, #124]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072f4:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fa:	4a1b      	ldr	r2, [pc, #108]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007304:	4a18      	ldr	r2, [pc, #96]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d016      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007316:	f7fc fbcb 	bl	8003ab0 <HAL_GetTick>
 800731a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800731c:	e00b      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800731e:	f7fc fbc7 	bl	8003ab0 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f241 3288 	movw	r2, #5000	; 0x1388
 800732c:	4293      	cmp	r3, r2
 800732e:	d902      	bls.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	74fb      	strb	r3, [r7, #19]
            break;
 8007334:	e006      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0ec      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007344:	7cfb      	ldrb	r3, [r7, #19]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10b      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	4903      	ldr	r1, [pc, #12]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800735a:	4313      	orrs	r3, r2
 800735c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007360:	e008      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007362:	7cfb      	ldrb	r3, [r7, #19]
 8007364:	74bb      	strb	r3, [r7, #18]
 8007366:	e005      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007368:	40021000 	.word	0x40021000
 800736c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007370:	7cfb      	ldrb	r3, [r7, #19]
 8007372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007374:	7c7b      	ldrb	r3, [r7, #17]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d105      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800737a:	4ba6      	ldr	r3, [pc, #664]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	4aa5      	ldr	r2, [pc, #660]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007392:	4ba0      	ldr	r3, [pc, #640]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007398:	f023 0203 	bic.w	r2, r3, #3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	499c      	ldr	r1, [pc, #624]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073b4:	4b97      	ldr	r3, [pc, #604]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ba:	f023 020c 	bic.w	r2, r3, #12
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	4994      	ldr	r1, [pc, #592]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0304 	and.w	r3, r3, #4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073d6:	4b8f      	ldr	r3, [pc, #572]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	498b      	ldr	r1, [pc, #556]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073f8:	4b86      	ldr	r3, [pc, #536]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	4983      	ldr	r1, [pc, #524]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007408:	4313      	orrs	r3, r2
 800740a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800741a:	4b7e      	ldr	r3, [pc, #504]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	497a      	ldr	r1, [pc, #488]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800743c:	4b75      	ldr	r3, [pc, #468]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800743e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007442:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	4972      	ldr	r1, [pc, #456]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800744c:	4313      	orrs	r3, r2
 800744e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800745e:	4b6d      	ldr	r3, [pc, #436]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	4969      	ldr	r1, [pc, #420]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007480:	4b64      	ldr	r3, [pc, #400]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007486:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	4961      	ldr	r1, [pc, #388]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074a2:	4b5c      	ldr	r3, [pc, #368]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	4958      	ldr	r1, [pc, #352]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d015      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074c4:	4b53      	ldr	r3, [pc, #332]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	4950      	ldr	r1, [pc, #320]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e2:	d105      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074e4:	4b4b      	ldr	r3, [pc, #300]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	4a4a      	ldr	r2, [pc, #296]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d015      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074fc:	4b45      	ldr	r3, [pc, #276]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007502:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	4942      	ldr	r1, [pc, #264]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800751a:	d105      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800751c:	4b3d      	ldr	r3, [pc, #244]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	4a3c      	ldr	r2, [pc, #240]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007526:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d015      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007534:	4b37      	ldr	r3, [pc, #220]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	4934      	ldr	r1, [pc, #208]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007552:	d105      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007554:	4b2f      	ldr	r3, [pc, #188]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a2e      	ldr	r2, [pc, #184]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800755a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800755e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d015      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800756c:	4b29      	ldr	r3, [pc, #164]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757a:	4926      	ldr	r1, [pc, #152]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800757c:	4313      	orrs	r3, r2
 800757e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800758a:	d105      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800758c:	4b21      	ldr	r3, [pc, #132]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4a20      	ldr	r2, [pc, #128]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007596:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d015      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075a4:	4b1b      	ldr	r3, [pc, #108]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	4918      	ldr	r1, [pc, #96]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075c2:	d105      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075c4:	4b13      	ldr	r3, [pc, #76]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	4a12      	ldr	r2, [pc, #72]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d015      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80075dc:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	490a      	ldr	r1, [pc, #40]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075fa:	d105      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	4a04      	ldr	r2, [pc, #16]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007606:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007608:	7cbb      	ldrb	r3, [r7, #18]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	40021000 	.word	0x40021000

08007618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e049      	b.n	80076be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fb fff6 	bl	8003630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f000 fdd4 	bl	8008204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d001      	beq.n	80076e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e042      	b.n	8007766 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a21      	ldr	r2, [pc, #132]	; (8007774 <HAL_TIM_Base_Start+0xac>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <HAL_TIM_Base_Start+0x5c>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fa:	d013      	beq.n	8007724 <HAL_TIM_Base_Start+0x5c>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1d      	ldr	r2, [pc, #116]	; (8007778 <HAL_TIM_Base_Start+0xb0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <HAL_TIM_Base_Start+0x5c>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1c      	ldr	r2, [pc, #112]	; (800777c <HAL_TIM_Base_Start+0xb4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <HAL_TIM_Base_Start+0x5c>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <HAL_TIM_Base_Start+0xb8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <HAL_TIM_Base_Start+0x5c>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a19      	ldr	r2, [pc, #100]	; (8007784 <HAL_TIM_Base_Start+0xbc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d115      	bne.n	8007750 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	4b17      	ldr	r3, [pc, #92]	; (8007788 <HAL_TIM_Base_Start+0xc0>)
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b06      	cmp	r3, #6
 8007734:	d015      	beq.n	8007762 <HAL_TIM_Base_Start+0x9a>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800773c:	d011      	beq.n	8007762 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0201 	orr.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774e:	e008      	b.n	8007762 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e000      	b.n	8007764 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40000400 	.word	0x40000400
 800777c:	40000800 	.word	0x40000800
 8007780:	40013400 	.word	0x40013400
 8007784:	40014000 	.word	0x40014000
 8007788:	00010007 	.word	0x00010007

0800778c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e049      	b.n	8007832 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f841 	bl	800783a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f000 fd1a 	bl	8008204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
	...

08007850 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d109      	bne.n	8007874 <HAL_TIM_PWM_Start_IT+0x24>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	bf14      	ite	ne
 800786c:	2301      	movne	r3, #1
 800786e:	2300      	moveq	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	e03c      	b.n	80078ee <HAL_TIM_PWM_Start_IT+0x9e>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b04      	cmp	r3, #4
 8007878:	d109      	bne.n	800788e <HAL_TIM_PWM_Start_IT+0x3e>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b01      	cmp	r3, #1
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	e02f      	b.n	80078ee <HAL_TIM_PWM_Start_IT+0x9e>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d109      	bne.n	80078a8 <HAL_TIM_PWM_Start_IT+0x58>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	bf14      	ite	ne
 80078a0:	2301      	movne	r3, #1
 80078a2:	2300      	moveq	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	e022      	b.n	80078ee <HAL_TIM_PWM_Start_IT+0x9e>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b0c      	cmp	r3, #12
 80078ac:	d109      	bne.n	80078c2 <HAL_TIM_PWM_Start_IT+0x72>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	bf14      	ite	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	2300      	moveq	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	e015      	b.n	80078ee <HAL_TIM_PWM_Start_IT+0x9e>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d109      	bne.n	80078dc <HAL_TIM_PWM_Start_IT+0x8c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	bf14      	ite	ne
 80078d4:	2301      	movne	r3, #1
 80078d6:	2300      	moveq	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	e008      	b.n	80078ee <HAL_TIM_PWM_Start_IT+0x9e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	bf14      	ite	ne
 80078e8:	2301      	movne	r3, #1
 80078ea:	2300      	moveq	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0dd      	b.n	8007ab2 <HAL_TIM_PWM_Start_IT+0x262>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d104      	bne.n	8007906 <HAL_TIM_PWM_Start_IT+0xb6>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007904:	e023      	b.n	800794e <HAL_TIM_PWM_Start_IT+0xfe>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d104      	bne.n	8007916 <HAL_TIM_PWM_Start_IT+0xc6>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007914:	e01b      	b.n	800794e <HAL_TIM_PWM_Start_IT+0xfe>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d104      	bne.n	8007926 <HAL_TIM_PWM_Start_IT+0xd6>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007924:	e013      	b.n	800794e <HAL_TIM_PWM_Start_IT+0xfe>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b0c      	cmp	r3, #12
 800792a:	d104      	bne.n	8007936 <HAL_TIM_PWM_Start_IT+0xe6>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007934:	e00b      	b.n	800794e <HAL_TIM_PWM_Start_IT+0xfe>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b10      	cmp	r3, #16
 800793a:	d104      	bne.n	8007946 <HAL_TIM_PWM_Start_IT+0xf6>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007944:	e003      	b.n	800794e <HAL_TIM_PWM_Start_IT+0xfe>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b0c      	cmp	r3, #12
 8007952:	d841      	bhi.n	80079d8 <HAL_TIM_PWM_Start_IT+0x188>
 8007954:	a201      	add	r2, pc, #4	; (adr r2, 800795c <HAL_TIM_PWM_Start_IT+0x10c>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	08007991 	.word	0x08007991
 8007960:	080079d9 	.word	0x080079d9
 8007964:	080079d9 	.word	0x080079d9
 8007968:	080079d9 	.word	0x080079d9
 800796c:	080079a3 	.word	0x080079a3
 8007970:	080079d9 	.word	0x080079d9
 8007974:	080079d9 	.word	0x080079d9
 8007978:	080079d9 	.word	0x080079d9
 800797c:	080079b5 	.word	0x080079b5
 8007980:	080079d9 	.word	0x080079d9
 8007984:	080079d9 	.word	0x080079d9
 8007988:	080079d9 	.word	0x080079d9
 800798c:	080079c7 	.word	0x080079c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0202 	orr.w	r2, r2, #2
 800799e:	60da      	str	r2, [r3, #12]
      break;
 80079a0:	e01b      	b.n	80079da <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0204 	orr.w	r2, r2, #4
 80079b0:	60da      	str	r2, [r3, #12]
      break;
 80079b2:	e012      	b.n	80079da <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0208 	orr.w	r2, r2, #8
 80079c2:	60da      	str	r2, [r3, #12]
      break;
 80079c4:	e009      	b.n	80079da <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0210 	orr.w	r2, r2, #16
 80079d4:	60da      	str	r2, [r3, #12]
      break;
 80079d6:	e000      	b.n	80079da <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80079d8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2201      	movs	r2, #1
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 f830 	bl	8008a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a33      	ldr	r2, [pc, #204]	; (8007abc <HAL_TIM_PWM_Start_IT+0x26c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <HAL_TIM_PWM_Start_IT+0x1ca>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a32      	ldr	r2, [pc, #200]	; (8007ac0 <HAL_TIM_PWM_Start_IT+0x270>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00e      	beq.n	8007a1a <HAL_TIM_PWM_Start_IT+0x1ca>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a30      	ldr	r2, [pc, #192]	; (8007ac4 <HAL_TIM_PWM_Start_IT+0x274>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d009      	beq.n	8007a1a <HAL_TIM_PWM_Start_IT+0x1ca>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a2f      	ldr	r2, [pc, #188]	; (8007ac8 <HAL_TIM_PWM_Start_IT+0x278>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_TIM_PWM_Start_IT+0x1ca>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a2d      	ldr	r2, [pc, #180]	; (8007acc <HAL_TIM_PWM_Start_IT+0x27c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d101      	bne.n	8007a1e <HAL_TIM_PWM_Start_IT+0x1ce>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d007      	beq.n	8007a34 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a20      	ldr	r2, [pc, #128]	; (8007abc <HAL_TIM_PWM_Start_IT+0x26c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d018      	beq.n	8007a70 <HAL_TIM_PWM_Start_IT+0x220>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a46:	d013      	beq.n	8007a70 <HAL_TIM_PWM_Start_IT+0x220>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a20      	ldr	r2, [pc, #128]	; (8007ad0 <HAL_TIM_PWM_Start_IT+0x280>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00e      	beq.n	8007a70 <HAL_TIM_PWM_Start_IT+0x220>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a1f      	ldr	r2, [pc, #124]	; (8007ad4 <HAL_TIM_PWM_Start_IT+0x284>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d009      	beq.n	8007a70 <HAL_TIM_PWM_Start_IT+0x220>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <HAL_TIM_PWM_Start_IT+0x270>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d004      	beq.n	8007a70 <HAL_TIM_PWM_Start_IT+0x220>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <HAL_TIM_PWM_Start_IT+0x274>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d115      	bne.n	8007a9c <HAL_TIM_PWM_Start_IT+0x24c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	4b18      	ldr	r3, [pc, #96]	; (8007ad8 <HAL_TIM_PWM_Start_IT+0x288>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b06      	cmp	r3, #6
 8007a80:	d015      	beq.n	8007aae <HAL_TIM_PWM_Start_IT+0x25e>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a88:	d011      	beq.n	8007aae <HAL_TIM_PWM_Start_IT+0x25e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9a:	e008      	b.n	8007aae <HAL_TIM_PWM_Start_IT+0x25e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0201 	orr.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	e000      	b.n	8007ab0 <HAL_TIM_PWM_Start_IT+0x260>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40012c00 	.word	0x40012c00
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40014400 	.word	0x40014400
 8007acc:	40014800 	.word	0x40014800
 8007ad0:	40000400 	.word	0x40000400
 8007ad4:	40000800 	.word	0x40000800
 8007ad8:	00010007 	.word	0x00010007

08007adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d122      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d11b      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0202 	mvn.w	r2, #2
 8007b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fb52 	bl	80081c8 <HAL_TIM_IC_CaptureCallback>
 8007b24:	e005      	b.n	8007b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fb44 	bl	80081b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fb55 	bl	80081dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d122      	bne.n	8007b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d11b      	bne.n	8007b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f06f 0204 	mvn.w	r2, #4
 8007b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb28 	bl	80081c8 <HAL_TIM_IC_CaptureCallback>
 8007b78:	e005      	b.n	8007b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fb1a 	bl	80081b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fb2b 	bl	80081dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b08      	cmp	r3, #8
 8007b98:	d122      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d11b      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f06f 0208 	mvn.w	r2, #8
 8007bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fafe 	bl	80081c8 <HAL_TIM_IC_CaptureCallback>
 8007bcc:	e005      	b.n	8007bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 faf0 	bl	80081b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fb01 	bl	80081dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b10      	cmp	r3, #16
 8007bec:	d122      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b10      	cmp	r3, #16
 8007bfa:	d11b      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0210 	mvn.w	r2, #16
 8007c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fad4 	bl	80081c8 <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fac6 	bl	80081b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fad7 	bl	80081dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d10e      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d107      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0201 	mvn.w	r2, #1
 8007c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 faa0 	bl	80081a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d10e      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c78:	2b80      	cmp	r3, #128	; 0x80
 8007c7a:	d107      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 ff90 	bl	8008bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9a:	d10e      	bne.n	8007cba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca6:	2b80      	cmp	r3, #128	; 0x80
 8007ca8:	d107      	bne.n	8007cba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 ff83 	bl	8008bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc4:	2b40      	cmp	r3, #64	; 0x40
 8007cc6:	d10e      	bne.n	8007ce6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d107      	bne.n	8007ce6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa85 	bl	80081f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d10e      	bne.n	8007d12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d107      	bne.n	8007d12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f06f 0220 	mvn.w	r2, #32
 8007d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 ff43 	bl	8008b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d20:	d10f      	bne.n	8007d42 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d30:	d107      	bne.n	8007d42 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 ff49 	bl	8008bd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d50:	d10f      	bne.n	8007d72 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d60:	d107      	bne.n	8007d72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 ff3b 	bl	8008be8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d80:	d10f      	bne.n	8007da2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d90:	d107      	bne.n	8007da2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 ff2d 	bl	8008bfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007db0:	d10f      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007dc0:	d107      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 ff1f 	bl	8008c10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d101      	bne.n	8007df6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007df2:	2302      	movs	r3, #2
 8007df4:	e0fd      	b.n	8007ff2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b14      	cmp	r3, #20
 8007e02:	f200 80f0 	bhi.w	8007fe6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007e06:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007fe7 	.word	0x08007fe7
 8007e14:	08007fe7 	.word	0x08007fe7
 8007e18:	08007fe7 	.word	0x08007fe7
 8007e1c:	08007ea1 	.word	0x08007ea1
 8007e20:	08007fe7 	.word	0x08007fe7
 8007e24:	08007fe7 	.word	0x08007fe7
 8007e28:	08007fe7 	.word	0x08007fe7
 8007e2c:	08007ee3 	.word	0x08007ee3
 8007e30:	08007fe7 	.word	0x08007fe7
 8007e34:	08007fe7 	.word	0x08007fe7
 8007e38:	08007fe7 	.word	0x08007fe7
 8007e3c:	08007f23 	.word	0x08007f23
 8007e40:	08007fe7 	.word	0x08007fe7
 8007e44:	08007fe7 	.word	0x08007fe7
 8007e48:	08007fe7 	.word	0x08007fe7
 8007e4c:	08007f65 	.word	0x08007f65
 8007e50:	08007fe7 	.word	0x08007fe7
 8007e54:	08007fe7 	.word	0x08007fe7
 8007e58:	08007fe7 	.word	0x08007fe7
 8007e5c:	08007fa5 	.word	0x08007fa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fa5c 	bl	8008324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0208 	orr.w	r2, r2, #8
 8007e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0204 	bic.w	r2, r2, #4
 8007e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6999      	ldr	r1, [r3, #24]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	619a      	str	r2, [r3, #24]
      break;
 8007e9e:	e0a3      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 facc 	bl	8008444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6999      	ldr	r1, [r3, #24]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	021a      	lsls	r2, r3, #8
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	619a      	str	r2, [r3, #24]
      break;
 8007ee0:	e082      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fb35 	bl	8008558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0208 	orr.w	r2, r2, #8
 8007efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0204 	bic.w	r2, r2, #4
 8007f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69d9      	ldr	r1, [r3, #28]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	61da      	str	r2, [r3, #28]
      break;
 8007f20:	e062      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fb9d 	bl	8008668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69d9      	ldr	r1, [r3, #28]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	021a      	lsls	r2, r3, #8
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	61da      	str	r2, [r3, #28]
      break;
 8007f62:	e041      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68b9      	ldr	r1, [r7, #8]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fc06 	bl	800877c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0208 	orr.w	r2, r2, #8
 8007f7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0204 	bic.w	r2, r2, #4
 8007f8e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	691a      	ldr	r2, [r3, #16]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007fa2:	e021      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fc4a 	bl	8008844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	021a      	lsls	r2, r3, #8
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007fe4:	e000      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007fe6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop

08007ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_TIM_ConfigClockSource+0x18>
 8008010:	2302      	movs	r3, #2
 8008012:	e0b9      	b.n	8008188 <HAL_TIM_ConfigClockSource+0x18c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800803e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b70      	cmp	r3, #112	; 0x70
 800804e:	d02e      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0xb2>
 8008050:	2b70      	cmp	r3, #112	; 0x70
 8008052:	d812      	bhi.n	800807a <HAL_TIM_ConfigClockSource+0x7e>
 8008054:	2b30      	cmp	r3, #48	; 0x30
 8008056:	f000 8084 	beq.w	8008162 <HAL_TIM_ConfigClockSource+0x166>
 800805a:	2b30      	cmp	r3, #48	; 0x30
 800805c:	d806      	bhi.n	800806c <HAL_TIM_ConfigClockSource+0x70>
 800805e:	2b10      	cmp	r3, #16
 8008060:	d07f      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x166>
 8008062:	2b20      	cmp	r3, #32
 8008064:	d07d      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x166>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d07b      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800806a:	e084      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800806c:	2b50      	cmp	r3, #80	; 0x50
 800806e:	d048      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x106>
 8008070:	2b60      	cmp	r3, #96	; 0x60
 8008072:	d056      	beq.n	8008122 <HAL_TIM_ConfigClockSource+0x126>
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d064      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8008078:	e07d      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800807a:	4a45      	ldr	r2, [pc, #276]	; (8008190 <HAL_TIM_ConfigClockSource+0x194>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d070      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x166>
 8008080:	4a43      	ldr	r2, [pc, #268]	; (8008190 <HAL_TIM_ConfigClockSource+0x194>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d809      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x9e>
 8008086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800808a:	d027      	beq.n	80080dc <HAL_TIM_ConfigClockSource+0xe0>
 800808c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008090:	d067      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x166>
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008096:	d06d      	beq.n	8008174 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008098:	e06d      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800809a:	4a3e      	ldr	r2, [pc, #248]	; (8008194 <HAL_TIM_ConfigClockSource+0x198>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d060      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x166>
 80080a0:	4a3d      	ldr	r2, [pc, #244]	; (8008198 <HAL_TIM_ConfigClockSource+0x19c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d05d      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x166>
 80080a6:	4a3d      	ldr	r2, [pc, #244]	; (800819c <HAL_TIM_ConfigClockSource+0x1a0>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d05a      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x166>
      break;
 80080ac:	e063      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	6899      	ldr	r1, [r3, #8]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f000 fca3 	bl	8008a08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	609a      	str	r2, [r3, #8]
      break;
 80080da:	e04c      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	6899      	ldr	r1, [r3, #8]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f000 fc8c 	bl	8008a08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080fe:	609a      	str	r2, [r3, #8]
      break;
 8008100:	e039      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	6859      	ldr	r1, [r3, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	461a      	mov	r2, r3
 8008110:	f000 fbfe 	bl	8008910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2150      	movs	r1, #80	; 0x50
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fc57 	bl	80089ce <TIM_ITRx_SetConfig>
      break;
 8008120:	e029      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	6859      	ldr	r1, [r3, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	461a      	mov	r2, r3
 8008130:	f000 fc1d 	bl	800896e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2160      	movs	r1, #96	; 0x60
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fc47 	bl	80089ce <TIM_ITRx_SetConfig>
      break;
 8008140:	e019      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6859      	ldr	r1, [r3, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	461a      	mov	r2, r3
 8008150:	f000 fbde 	bl	8008910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2140      	movs	r1, #64	; 0x40
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fc37 	bl	80089ce <TIM_ITRx_SetConfig>
      break;
 8008160:	e009      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f000 fc2e 	bl	80089ce <TIM_ITRx_SetConfig>
        break;
 8008172:	e000      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8008174:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	00100020 	.word	0x00100020
 8008194:	00100040 	.word	0x00100040
 8008198:	00100070 	.word	0x00100070
 800819c:	00100030 	.word	0x00100030

080081a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a3c      	ldr	r2, [pc, #240]	; (8008308 <TIM_Base_SetConfig+0x104>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00f      	beq.n	800823c <TIM_Base_SetConfig+0x38>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008222:	d00b      	beq.n	800823c <TIM_Base_SetConfig+0x38>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a39      	ldr	r2, [pc, #228]	; (800830c <TIM_Base_SetConfig+0x108>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d007      	beq.n	800823c <TIM_Base_SetConfig+0x38>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a38      	ldr	r2, [pc, #224]	; (8008310 <TIM_Base_SetConfig+0x10c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d003      	beq.n	800823c <TIM_Base_SetConfig+0x38>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a37      	ldr	r2, [pc, #220]	; (8008314 <TIM_Base_SetConfig+0x110>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d108      	bne.n	800824e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a2d      	ldr	r2, [pc, #180]	; (8008308 <TIM_Base_SetConfig+0x104>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d01b      	beq.n	800828e <TIM_Base_SetConfig+0x8a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d017      	beq.n	800828e <TIM_Base_SetConfig+0x8a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a2a      	ldr	r2, [pc, #168]	; (800830c <TIM_Base_SetConfig+0x108>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d013      	beq.n	800828e <TIM_Base_SetConfig+0x8a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a29      	ldr	r2, [pc, #164]	; (8008310 <TIM_Base_SetConfig+0x10c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00f      	beq.n	800828e <TIM_Base_SetConfig+0x8a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a28      	ldr	r2, [pc, #160]	; (8008314 <TIM_Base_SetConfig+0x110>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00b      	beq.n	800828e <TIM_Base_SetConfig+0x8a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a27      	ldr	r2, [pc, #156]	; (8008318 <TIM_Base_SetConfig+0x114>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d007      	beq.n	800828e <TIM_Base_SetConfig+0x8a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a26      	ldr	r2, [pc, #152]	; (800831c <TIM_Base_SetConfig+0x118>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d003      	beq.n	800828e <TIM_Base_SetConfig+0x8a>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a25      	ldr	r2, [pc, #148]	; (8008320 <TIM_Base_SetConfig+0x11c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d108      	bne.n	80082a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a10      	ldr	r2, [pc, #64]	; (8008308 <TIM_Base_SetConfig+0x104>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00f      	beq.n	80082ec <TIM_Base_SetConfig+0xe8>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a11      	ldr	r2, [pc, #68]	; (8008314 <TIM_Base_SetConfig+0x110>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00b      	beq.n	80082ec <TIM_Base_SetConfig+0xe8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a10      	ldr	r2, [pc, #64]	; (8008318 <TIM_Base_SetConfig+0x114>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d007      	beq.n	80082ec <TIM_Base_SetConfig+0xe8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a0f      	ldr	r2, [pc, #60]	; (800831c <TIM_Base_SetConfig+0x118>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d003      	beq.n	80082ec <TIM_Base_SetConfig+0xe8>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a0e      	ldr	r2, [pc, #56]	; (8008320 <TIM_Base_SetConfig+0x11c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d103      	bne.n	80082f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	691a      	ldr	r2, [r3, #16]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	615a      	str	r2, [r3, #20]
}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	40012c00 	.word	0x40012c00
 800830c:	40000400 	.word	0x40000400
 8008310:	40000800 	.word	0x40000800
 8008314:	40013400 	.word	0x40013400
 8008318:	40014000 	.word	0x40014000
 800831c:	40014400 	.word	0x40014400
 8008320:	40014800 	.word	0x40014800

08008324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	f023 0201 	bic.w	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f023 0302 	bic.w	r3, r3, #2
 8008370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a2c      	ldr	r2, [pc, #176]	; (8008430 <TIM_OC1_SetConfig+0x10c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d00f      	beq.n	80083a4 <TIM_OC1_SetConfig+0x80>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a2b      	ldr	r2, [pc, #172]	; (8008434 <TIM_OC1_SetConfig+0x110>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d00b      	beq.n	80083a4 <TIM_OC1_SetConfig+0x80>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <TIM_OC1_SetConfig+0x114>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d007      	beq.n	80083a4 <TIM_OC1_SetConfig+0x80>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a29      	ldr	r2, [pc, #164]	; (800843c <TIM_OC1_SetConfig+0x118>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d003      	beq.n	80083a4 <TIM_OC1_SetConfig+0x80>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a28      	ldr	r2, [pc, #160]	; (8008440 <TIM_OC1_SetConfig+0x11c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d10c      	bne.n	80083be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f023 0308 	bic.w	r3, r3, #8
 80083aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f023 0304 	bic.w	r3, r3, #4
 80083bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a1b      	ldr	r2, [pc, #108]	; (8008430 <TIM_OC1_SetConfig+0x10c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00f      	beq.n	80083e6 <TIM_OC1_SetConfig+0xc2>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a1a      	ldr	r2, [pc, #104]	; (8008434 <TIM_OC1_SetConfig+0x110>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00b      	beq.n	80083e6 <TIM_OC1_SetConfig+0xc2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a19      	ldr	r2, [pc, #100]	; (8008438 <TIM_OC1_SetConfig+0x114>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d007      	beq.n	80083e6 <TIM_OC1_SetConfig+0xc2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a18      	ldr	r2, [pc, #96]	; (800843c <TIM_OC1_SetConfig+0x118>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d003      	beq.n	80083e6 <TIM_OC1_SetConfig+0xc2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a17      	ldr	r2, [pc, #92]	; (8008440 <TIM_OC1_SetConfig+0x11c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d111      	bne.n	800840a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	621a      	str	r2, [r3, #32]
}
 8008424:	bf00      	nop
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	40012c00 	.word	0x40012c00
 8008434:	40013400 	.word	0x40013400
 8008438:	40014000 	.word	0x40014000
 800843c:	40014400 	.word	0x40014400
 8008440:	40014800 	.word	0x40014800

08008444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	f023 0210 	bic.w	r2, r3, #16
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800847e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	021b      	lsls	r3, r3, #8
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f023 0320 	bic.w	r3, r3, #32
 8008492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a28      	ldr	r2, [pc, #160]	; (8008544 <TIM_OC2_SetConfig+0x100>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d003      	beq.n	80084b0 <TIM_OC2_SetConfig+0x6c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a27      	ldr	r2, [pc, #156]	; (8008548 <TIM_OC2_SetConfig+0x104>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d10d      	bne.n	80084cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a1d      	ldr	r2, [pc, #116]	; (8008544 <TIM_OC2_SetConfig+0x100>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00f      	beq.n	80084f4 <TIM_OC2_SetConfig+0xb0>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a1c      	ldr	r2, [pc, #112]	; (8008548 <TIM_OC2_SetConfig+0x104>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00b      	beq.n	80084f4 <TIM_OC2_SetConfig+0xb0>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a1b      	ldr	r2, [pc, #108]	; (800854c <TIM_OC2_SetConfig+0x108>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d007      	beq.n	80084f4 <TIM_OC2_SetConfig+0xb0>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a1a      	ldr	r2, [pc, #104]	; (8008550 <TIM_OC2_SetConfig+0x10c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d003      	beq.n	80084f4 <TIM_OC2_SetConfig+0xb0>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a19      	ldr	r2, [pc, #100]	; (8008554 <TIM_OC2_SetConfig+0x110>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d113      	bne.n	800851c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	40012c00 	.word	0x40012c00
 8008548:	40013400 	.word	0x40013400
 800854c:	40014000 	.word	0x40014000
 8008550:	40014400 	.word	0x40014400
 8008554:	40014800 	.word	0x40014800

08008558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 0303 	bic.w	r3, r3, #3
 8008592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a27      	ldr	r2, [pc, #156]	; (8008654 <TIM_OC3_SetConfig+0xfc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d003      	beq.n	80085c2 <TIM_OC3_SetConfig+0x6a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a26      	ldr	r2, [pc, #152]	; (8008658 <TIM_OC3_SetConfig+0x100>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d10d      	bne.n	80085de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a1c      	ldr	r2, [pc, #112]	; (8008654 <TIM_OC3_SetConfig+0xfc>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00f      	beq.n	8008606 <TIM_OC3_SetConfig+0xae>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a1b      	ldr	r2, [pc, #108]	; (8008658 <TIM_OC3_SetConfig+0x100>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00b      	beq.n	8008606 <TIM_OC3_SetConfig+0xae>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a1a      	ldr	r2, [pc, #104]	; (800865c <TIM_OC3_SetConfig+0x104>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d007      	beq.n	8008606 <TIM_OC3_SetConfig+0xae>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a19      	ldr	r2, [pc, #100]	; (8008660 <TIM_OC3_SetConfig+0x108>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d003      	beq.n	8008606 <TIM_OC3_SetConfig+0xae>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a18      	ldr	r2, [pc, #96]	; (8008664 <TIM_OC3_SetConfig+0x10c>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d113      	bne.n	800862e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800860c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4313      	orrs	r3, r2
 800862c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	621a      	str	r2, [r3, #32]
}
 8008648:	bf00      	nop
 800864a:	371c      	adds	r7, #28
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	40012c00 	.word	0x40012c00
 8008658:	40013400 	.word	0x40013400
 800865c:	40014000 	.word	0x40014000
 8008660:	40014400 	.word	0x40014400
 8008664:	40014800 	.word	0x40014800

08008668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	031b      	lsls	r3, r3, #12
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a28      	ldr	r2, [pc, #160]	; (8008768 <TIM_OC4_SetConfig+0x100>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d003      	beq.n	80086d4 <TIM_OC4_SetConfig+0x6c>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a27      	ldr	r2, [pc, #156]	; (800876c <TIM_OC4_SetConfig+0x104>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d10d      	bne.n	80086f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	031b      	lsls	r3, r3, #12
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a1d      	ldr	r2, [pc, #116]	; (8008768 <TIM_OC4_SetConfig+0x100>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00f      	beq.n	8008718 <TIM_OC4_SetConfig+0xb0>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a1c      	ldr	r2, [pc, #112]	; (800876c <TIM_OC4_SetConfig+0x104>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00b      	beq.n	8008718 <TIM_OC4_SetConfig+0xb0>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a1b      	ldr	r2, [pc, #108]	; (8008770 <TIM_OC4_SetConfig+0x108>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d007      	beq.n	8008718 <TIM_OC4_SetConfig+0xb0>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a1a      	ldr	r2, [pc, #104]	; (8008774 <TIM_OC4_SetConfig+0x10c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d003      	beq.n	8008718 <TIM_OC4_SetConfig+0xb0>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a19      	ldr	r2, [pc, #100]	; (8008778 <TIM_OC4_SetConfig+0x110>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d113      	bne.n	8008740 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800871e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008726:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	019b      	lsls	r3, r3, #6
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	4313      	orrs	r3, r2
 8008732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	019b      	lsls	r3, r3, #6
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	40012c00 	.word	0x40012c00
 800876c:	40013400 	.word	0x40013400
 8008770:	40014000 	.word	0x40014000
 8008774:	40014400 	.word	0x40014400
 8008778:	40014800 	.word	0x40014800

0800877c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <TIM_OC5_SetConfig+0xb4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00f      	beq.n	80087f6 <TIM_OC5_SetConfig+0x7a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a16      	ldr	r2, [pc, #88]	; (8008834 <TIM_OC5_SetConfig+0xb8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00b      	beq.n	80087f6 <TIM_OC5_SetConfig+0x7a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a15      	ldr	r2, [pc, #84]	; (8008838 <TIM_OC5_SetConfig+0xbc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_OC5_SetConfig+0x7a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a14      	ldr	r2, [pc, #80]	; (800883c <TIM_OC5_SetConfig+0xc0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_OC5_SetConfig+0x7a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a13      	ldr	r2, [pc, #76]	; (8008840 <TIM_OC5_SetConfig+0xc4>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d109      	bne.n	800880a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	021b      	lsls	r3, r3, #8
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	621a      	str	r2, [r3, #32]
}
 8008824:	bf00      	nop
 8008826:	371c      	adds	r7, #28
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	40012c00 	.word	0x40012c00
 8008834:	40013400 	.word	0x40013400
 8008838:	40014000 	.word	0x40014000
 800883c:	40014400 	.word	0x40014400
 8008840:	40014800 	.word	0x40014800

08008844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800888a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	051b      	lsls	r3, r3, #20
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a18      	ldr	r2, [pc, #96]	; (80088fc <TIM_OC6_SetConfig+0xb8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00f      	beq.n	80088c0 <TIM_OC6_SetConfig+0x7c>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a17      	ldr	r2, [pc, #92]	; (8008900 <TIM_OC6_SetConfig+0xbc>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00b      	beq.n	80088c0 <TIM_OC6_SetConfig+0x7c>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a16      	ldr	r2, [pc, #88]	; (8008904 <TIM_OC6_SetConfig+0xc0>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d007      	beq.n	80088c0 <TIM_OC6_SetConfig+0x7c>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a15      	ldr	r2, [pc, #84]	; (8008908 <TIM_OC6_SetConfig+0xc4>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <TIM_OC6_SetConfig+0x7c>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a14      	ldr	r2, [pc, #80]	; (800890c <TIM_OC6_SetConfig+0xc8>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d109      	bne.n	80088d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	029b      	lsls	r3, r3, #10
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	621a      	str	r2, [r3, #32]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40013400 	.word	0x40013400
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800

08008910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f023 0201 	bic.w	r2, r3, #1
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800893a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f023 030a 	bic.w	r3, r3, #10
 800894c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	621a      	str	r2, [r3, #32]
}
 8008962:	bf00      	nop
 8008964:	371c      	adds	r7, #28
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800896e:	b480      	push	{r7}
 8008970:	b087      	sub	sp, #28
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f023 0210 	bic.w	r2, r3, #16
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	031b      	lsls	r3, r3, #12
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80089e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	f043 0307 	orr.w	r3, r3, #7
 80089f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	609a      	str	r2, [r3, #8]
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	021a      	lsls	r2, r3, #8
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	609a      	str	r2, [r3, #8]
}
 8008a3c:	bf00      	nop
 8008a3e:	371c      	adds	r7, #28
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1a      	ldr	r2, [r3, #32]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	43db      	mvns	r3, r3
 8008a6a:	401a      	ands	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6a1a      	ldr	r2, [r3, #32]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a80:	431a      	orrs	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	621a      	str	r2, [r3, #32]
}
 8008a86:	bf00      	nop
 8008a88:	371c      	adds	r7, #28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
	...

08008a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d101      	bne.n	8008aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e065      	b.n	8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a2c      	ldr	r2, [pc, #176]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d004      	beq.n	8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a2b      	ldr	r2, [pc, #172]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d108      	bne.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ae6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1b      	ldr	r2, [pc, #108]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d018      	beq.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b22:	d013      	beq.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a18      	ldr	r2, [pc, #96]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00e      	beq.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a17      	ldr	r2, [pc, #92]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d009      	beq.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a12      	ldr	r2, [pc, #72]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d004      	beq.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a13      	ldr	r2, [pc, #76]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d10c      	bne.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	40012c00 	.word	0x40012c00
 8008b88:	40013400 	.word	0x40013400
 8008b8c:	40000400 	.word	0x40000400
 8008b90:	40000800 	.word	0x40000800
 8008b94:	40014000 	.word	0x40014000

08008b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e042      	b.n	8008cbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d106      	bne.n	8008c4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7fa fd63 	bl	8003714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2224      	movs	r2, #36	; 0x24
 8008c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 0201 	bic.w	r2, r2, #1
 8008c64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fad2 	bl	8009210 <UART_SetConfig>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d101      	bne.n	8008c76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e022      	b.n	8008cbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fd6e 	bl	8009760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689a      	ldr	r2, [r3, #8]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fdf5 	bl	80098a4 <UART_CheckIdleState>
 8008cba:	4603      	mov	r3, r0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	d168      	bne.n	8008dae <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <HAL_UART_Transmit_DMA+0x24>
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e061      	b.n	8008db0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d101      	bne.n	8008cfa <HAL_UART_Transmit_DMA+0x36>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e05a      	b.n	8008db0 <HAL_UART_Transmit_DMA+0xec>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	88fa      	ldrh	r2, [r7, #6]
 8008d0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	88fa      	ldrh	r2, [r7, #6]
 8008d14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2221      	movs	r2, #33	; 0x21
 8008d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d02c      	beq.n	8008d8a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d34:	4a20      	ldr	r2, [pc, #128]	; (8008db8 <HAL_UART_Transmit_DMA+0xf4>)
 8008d36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d3c:	4a1f      	ldr	r2, [pc, #124]	; (8008dbc <HAL_UART_Transmit_DMA+0xf8>)
 8008d3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d44:	4a1e      	ldr	r2, [pc, #120]	; (8008dc0 <HAL_UART_Transmit_DMA+0xfc>)
 8008d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d58:	4619      	mov	r1, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3328      	adds	r3, #40	; 0x28
 8008d60:	461a      	mov	r2, r3
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	f7fc fd2c 	bl	80057c0 <HAL_DMA_Start_IT>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00d      	beq.n	8008d8a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2210      	movs	r2, #16
 8008d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e012      	b.n	8008db0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2240      	movs	r2, #64	; 0x40
 8008d90:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008da8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e000      	b.n	8008db0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008dae:	2302      	movs	r3, #2
  }
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	08009ab7 	.word	0x08009ab7
 8008dbc:	08009b0b 	.word	0x08009b0b
 8008dc0:	08009bad 	.word	0x08009bad

08008dc4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dd8:	2b20      	cmp	r3, #32
 8008dda:	d170      	bne.n	8008ebe <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <HAL_UART_Receive_DMA+0x24>
 8008de2:	88fb      	ldrh	r3, [r7, #6]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e069      	b.n	8008ec0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d101      	bne.n	8008dfa <HAL_UART_Receive_DMA+0x36>
 8008df6:	2302      	movs	r3, #2
 8008df8:	e062      	b.n	8008ec0 <HAL_UART_Receive_DMA+0xfc>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	88fa      	ldrh	r2, [r7, #6]
 8008e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2222      	movs	r2, #34	; 0x22
 8008e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d02c      	beq.n	8008e82 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e2c:	4a26      	ldr	r2, [pc, #152]	; (8008ec8 <HAL_UART_Receive_DMA+0x104>)
 8008e2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e34:	4a25      	ldr	r2, [pc, #148]	; (8008ecc <HAL_UART_Receive_DMA+0x108>)
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3c:	4a24      	ldr	r2, [pc, #144]	; (8008ed0 <HAL_UART_Receive_DMA+0x10c>)
 8008e3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e44:	2200      	movs	r2, #0
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3324      	adds	r3, #36	; 0x24
 8008e52:	4619      	mov	r1, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e58:	461a      	mov	r2, r3
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	f7fc fcb0 	bl	80057c0 <HAL_DMA_Start_IT>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00d      	beq.n	8008e82 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2210      	movs	r2, #16
 8008e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e01e      	b.n	8008ec0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e98:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0201 	orr.w	r2, r2, #1
 8008ea8:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eb8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e000      	b.n	8008ec0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8008ebe:	2302      	movs	r3, #2
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	08009b27 	.word	0x08009b27
 8008ecc:	08009b91 	.word	0x08009b91
 8008ed0:	08009bad 	.word	0x08009bad

08008ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008efa:	4013      	ands	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d118      	bne.n	8008f36 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d013      	beq.n	8008f36 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	f003 0320 	and.w	r3, r3, #32
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d009      	beq.n	8008f36 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 8145 	beq.w	80091b6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	4798      	blx	r3
      }
      return;
 8008f34:	e13f      	b.n	80091b6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80e8 	beq.w	800910e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4ba1      	ldr	r3, [pc, #644]	; (80091c8 <HAL_UART_IRQHandler+0x2f4>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d105      	bne.n	8008f54 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	4ba0      	ldr	r3, [pc, #640]	; (80091cc <HAL_UART_IRQHandler+0x2f8>)
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80dd 	beq.w	800910e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d010      	beq.n	8008f80 <HAL_UART_IRQHandler+0xac>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f76:	f043 0201 	orr.w	r2, r3, #1
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d010      	beq.n	8008fac <HAL_UART_IRQHandler+0xd8>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2202      	movs	r2, #2
 8008f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa2:	f043 0204 	orr.w	r2, r3, #4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f003 0304 	and.w	r3, r3, #4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d010      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x104>
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fce:	f043 0202 	orr.w	r2, r3, #2
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	f003 0308 	and.w	r3, r3, #8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d015      	beq.n	800900e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	f003 0320 	and.w	r3, r3, #32
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	4b76      	ldr	r3, [pc, #472]	; (80091c8 <HAL_UART_IRQHandler+0x2f4>)
 8008ff0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00b      	beq.n	800900e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009004:	f043 0208 	orr.w	r2, r3, #8
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009014:	2b00      	cmp	r3, #0
 8009016:	d011      	beq.n	800903c <HAL_UART_IRQHandler+0x168>
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00c      	beq.n	800903c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800902a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009032:	f043 0220 	orr.w	r2, r3, #32
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 80b9 	beq.w	80091ba <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d011      	beq.n	8009076 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f003 0320 	and.w	r3, r3, #32
 8009058:	2b00      	cmp	r3, #0
 800905a:	d104      	bne.n	8009066 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d007      	beq.n	8009076 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009088:	2b40      	cmp	r3, #64	; 0x40
 800908a:	d004      	beq.n	8009096 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009092:	2b00      	cmp	r3, #0
 8009094:	d031      	beq.n	80090fa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fcea 	bl	8009a70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d123      	bne.n	80090f2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d013      	beq.n	80090ea <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090c6:	4a42      	ldr	r2, [pc, #264]	; (80091d0 <HAL_UART_IRQHandler+0x2fc>)
 80090c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fc fbf1 	bl	80058b6 <HAL_DMA_Abort_IT>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d017      	beq.n	800910a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80090e4:	4610      	mov	r0, r2
 80090e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e8:	e00f      	b.n	800910a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7f9 fec0 	bl	8002e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e00b      	b.n	800910a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7f9 febc 	bl	8002e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	e007      	b.n	800910a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7f9 feb8 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009108:	e057      	b.n	80091ba <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800910a:	bf00      	nop
    return;
 800910c:	e055      	b.n	80091ba <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00d      	beq.n	8009134 <HAL_UART_IRQHandler+0x260>
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d008      	beq.n	8009134 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800912a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fdad 	bl	8009c8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009132:	e045      	b.n	80091c0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913a:	2b00      	cmp	r3, #0
 800913c:	d012      	beq.n	8009164 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009144:	2b00      	cmp	r3, #0
 8009146:	d104      	bne.n	8009152 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d008      	beq.n	8009164 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009156:	2b00      	cmp	r3, #0
 8009158:	d031      	beq.n	80091be <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
    }
    return;
 8009162:	e02c      	b.n	80091be <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <HAL_UART_IRQHandler+0x2ac>
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	d003      	beq.n	8009180 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fd6d 	bl	8009c58 <UART_EndTransmit_IT>
    return;
 800917e:	e01f      	b.n	80091c0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d008      	beq.n	800919c <HAL_UART_IRQHandler+0x2c8>
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fd8d 	bl	8009cb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919a:	e011      	b.n	80091c0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00c      	beq.n	80091c0 <HAL_UART_IRQHandler+0x2ec>
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	da09      	bge.n	80091c0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fd77 	bl	8009ca0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b2:	bf00      	nop
 80091b4:	e004      	b.n	80091c0 <HAL_UART_IRQHandler+0x2ec>
      return;
 80091b6:	bf00      	nop
 80091b8:	e002      	b.n	80091c0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80091ba:	bf00      	nop
 80091bc:	e000      	b.n	80091c0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80091be:	bf00      	nop
  }
}
 80091c0:	3720      	adds	r7, #32
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	10000001 	.word	0x10000001
 80091cc:	04000120 	.word	0x04000120
 80091d0:	08009c2d 	.word	0x08009c2d

080091d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009210:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009214:	b088      	sub	sp, #32
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	431a      	orrs	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	4313      	orrs	r3, r2
 8009234:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	4313      	orrs	r3, r2
 800923e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4bb0      	ldr	r3, [pc, #704]	; (8009508 <UART_SetConfig+0x2f8>)
 8009248:	4013      	ands	r3, r2
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	69f9      	ldr	r1, [r7, #28]
 8009250:	430b      	orrs	r3, r1
 8009252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4aa5      	ldr	r2, [pc, #660]	; (800950c <UART_SetConfig+0x2fc>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d004      	beq.n	8009284 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	4313      	orrs	r3, r2
 8009282:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800928e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	6812      	ldr	r2, [r2, #0]
 8009296:	69f9      	ldr	r1, [r7, #28]
 8009298:	430b      	orrs	r3, r1
 800929a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	f023 010f 	bic.w	r1, r3, #15
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a96      	ldr	r2, [pc, #600]	; (8009510 <UART_SetConfig+0x300>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d121      	bne.n	8009300 <UART_SetConfig+0xf0>
 80092bc:	4b95      	ldr	r3, [pc, #596]	; (8009514 <UART_SetConfig+0x304>)
 80092be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d816      	bhi.n	80092f8 <UART_SetConfig+0xe8>
 80092ca:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <UART_SetConfig+0xc0>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	080092e1 	.word	0x080092e1
 80092d4:	080092ed 	.word	0x080092ed
 80092d8:	080092e7 	.word	0x080092e7
 80092dc:	080092f3 	.word	0x080092f3
 80092e0:	2301      	movs	r3, #1
 80092e2:	76fb      	strb	r3, [r7, #27]
 80092e4:	e0be      	b.n	8009464 <UART_SetConfig+0x254>
 80092e6:	2302      	movs	r3, #2
 80092e8:	76fb      	strb	r3, [r7, #27]
 80092ea:	e0bb      	b.n	8009464 <UART_SetConfig+0x254>
 80092ec:	2304      	movs	r3, #4
 80092ee:	76fb      	strb	r3, [r7, #27]
 80092f0:	e0b8      	b.n	8009464 <UART_SetConfig+0x254>
 80092f2:	2308      	movs	r3, #8
 80092f4:	76fb      	strb	r3, [r7, #27]
 80092f6:	e0b5      	b.n	8009464 <UART_SetConfig+0x254>
 80092f8:	2310      	movs	r3, #16
 80092fa:	76fb      	strb	r3, [r7, #27]
 80092fc:	bf00      	nop
 80092fe:	e0b1      	b.n	8009464 <UART_SetConfig+0x254>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a84      	ldr	r2, [pc, #528]	; (8009518 <UART_SetConfig+0x308>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d134      	bne.n	8009374 <UART_SetConfig+0x164>
 800930a:	4b82      	ldr	r3, [pc, #520]	; (8009514 <UART_SetConfig+0x304>)
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009310:	f003 030c 	and.w	r3, r3, #12
 8009314:	2b0c      	cmp	r3, #12
 8009316:	d829      	bhi.n	800936c <UART_SetConfig+0x15c>
 8009318:	a201      	add	r2, pc, #4	; (adr r2, 8009320 <UART_SetConfig+0x110>)
 800931a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931e:	bf00      	nop
 8009320:	08009355 	.word	0x08009355
 8009324:	0800936d 	.word	0x0800936d
 8009328:	0800936d 	.word	0x0800936d
 800932c:	0800936d 	.word	0x0800936d
 8009330:	08009361 	.word	0x08009361
 8009334:	0800936d 	.word	0x0800936d
 8009338:	0800936d 	.word	0x0800936d
 800933c:	0800936d 	.word	0x0800936d
 8009340:	0800935b 	.word	0x0800935b
 8009344:	0800936d 	.word	0x0800936d
 8009348:	0800936d 	.word	0x0800936d
 800934c:	0800936d 	.word	0x0800936d
 8009350:	08009367 	.word	0x08009367
 8009354:	2300      	movs	r3, #0
 8009356:	76fb      	strb	r3, [r7, #27]
 8009358:	e084      	b.n	8009464 <UART_SetConfig+0x254>
 800935a:	2302      	movs	r3, #2
 800935c:	76fb      	strb	r3, [r7, #27]
 800935e:	e081      	b.n	8009464 <UART_SetConfig+0x254>
 8009360:	2304      	movs	r3, #4
 8009362:	76fb      	strb	r3, [r7, #27]
 8009364:	e07e      	b.n	8009464 <UART_SetConfig+0x254>
 8009366:	2308      	movs	r3, #8
 8009368:	76fb      	strb	r3, [r7, #27]
 800936a:	e07b      	b.n	8009464 <UART_SetConfig+0x254>
 800936c:	2310      	movs	r3, #16
 800936e:	76fb      	strb	r3, [r7, #27]
 8009370:	bf00      	nop
 8009372:	e077      	b.n	8009464 <UART_SetConfig+0x254>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a68      	ldr	r2, [pc, #416]	; (800951c <UART_SetConfig+0x30c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d120      	bne.n	80093c0 <UART_SetConfig+0x1b0>
 800937e:	4b65      	ldr	r3, [pc, #404]	; (8009514 <UART_SetConfig+0x304>)
 8009380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009384:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009388:	2b10      	cmp	r3, #16
 800938a:	d00f      	beq.n	80093ac <UART_SetConfig+0x19c>
 800938c:	2b10      	cmp	r3, #16
 800938e:	d802      	bhi.n	8009396 <UART_SetConfig+0x186>
 8009390:	2b00      	cmp	r3, #0
 8009392:	d005      	beq.n	80093a0 <UART_SetConfig+0x190>
 8009394:	e010      	b.n	80093b8 <UART_SetConfig+0x1a8>
 8009396:	2b20      	cmp	r3, #32
 8009398:	d005      	beq.n	80093a6 <UART_SetConfig+0x196>
 800939a:	2b30      	cmp	r3, #48	; 0x30
 800939c:	d009      	beq.n	80093b2 <UART_SetConfig+0x1a2>
 800939e:	e00b      	b.n	80093b8 <UART_SetConfig+0x1a8>
 80093a0:	2300      	movs	r3, #0
 80093a2:	76fb      	strb	r3, [r7, #27]
 80093a4:	e05e      	b.n	8009464 <UART_SetConfig+0x254>
 80093a6:	2302      	movs	r3, #2
 80093a8:	76fb      	strb	r3, [r7, #27]
 80093aa:	e05b      	b.n	8009464 <UART_SetConfig+0x254>
 80093ac:	2304      	movs	r3, #4
 80093ae:	76fb      	strb	r3, [r7, #27]
 80093b0:	e058      	b.n	8009464 <UART_SetConfig+0x254>
 80093b2:	2308      	movs	r3, #8
 80093b4:	76fb      	strb	r3, [r7, #27]
 80093b6:	e055      	b.n	8009464 <UART_SetConfig+0x254>
 80093b8:	2310      	movs	r3, #16
 80093ba:	76fb      	strb	r3, [r7, #27]
 80093bc:	bf00      	nop
 80093be:	e051      	b.n	8009464 <UART_SetConfig+0x254>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a56      	ldr	r2, [pc, #344]	; (8009520 <UART_SetConfig+0x310>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d120      	bne.n	800940c <UART_SetConfig+0x1fc>
 80093ca:	4b52      	ldr	r3, [pc, #328]	; (8009514 <UART_SetConfig+0x304>)
 80093cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80093d4:	2b40      	cmp	r3, #64	; 0x40
 80093d6:	d00f      	beq.n	80093f8 <UART_SetConfig+0x1e8>
 80093d8:	2b40      	cmp	r3, #64	; 0x40
 80093da:	d802      	bhi.n	80093e2 <UART_SetConfig+0x1d2>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <UART_SetConfig+0x1dc>
 80093e0:	e010      	b.n	8009404 <UART_SetConfig+0x1f4>
 80093e2:	2b80      	cmp	r3, #128	; 0x80
 80093e4:	d005      	beq.n	80093f2 <UART_SetConfig+0x1e2>
 80093e6:	2bc0      	cmp	r3, #192	; 0xc0
 80093e8:	d009      	beq.n	80093fe <UART_SetConfig+0x1ee>
 80093ea:	e00b      	b.n	8009404 <UART_SetConfig+0x1f4>
 80093ec:	2300      	movs	r3, #0
 80093ee:	76fb      	strb	r3, [r7, #27]
 80093f0:	e038      	b.n	8009464 <UART_SetConfig+0x254>
 80093f2:	2302      	movs	r3, #2
 80093f4:	76fb      	strb	r3, [r7, #27]
 80093f6:	e035      	b.n	8009464 <UART_SetConfig+0x254>
 80093f8:	2304      	movs	r3, #4
 80093fa:	76fb      	strb	r3, [r7, #27]
 80093fc:	e032      	b.n	8009464 <UART_SetConfig+0x254>
 80093fe:	2308      	movs	r3, #8
 8009400:	76fb      	strb	r3, [r7, #27]
 8009402:	e02f      	b.n	8009464 <UART_SetConfig+0x254>
 8009404:	2310      	movs	r3, #16
 8009406:	76fb      	strb	r3, [r7, #27]
 8009408:	bf00      	nop
 800940a:	e02b      	b.n	8009464 <UART_SetConfig+0x254>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a3e      	ldr	r2, [pc, #248]	; (800950c <UART_SetConfig+0x2fc>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d124      	bne.n	8009460 <UART_SetConfig+0x250>
 8009416:	4b3f      	ldr	r3, [pc, #252]	; (8009514 <UART_SetConfig+0x304>)
 8009418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009424:	d012      	beq.n	800944c <UART_SetConfig+0x23c>
 8009426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800942a:	d802      	bhi.n	8009432 <UART_SetConfig+0x222>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d007      	beq.n	8009440 <UART_SetConfig+0x230>
 8009430:	e012      	b.n	8009458 <UART_SetConfig+0x248>
 8009432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009436:	d006      	beq.n	8009446 <UART_SetConfig+0x236>
 8009438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800943c:	d009      	beq.n	8009452 <UART_SetConfig+0x242>
 800943e:	e00b      	b.n	8009458 <UART_SetConfig+0x248>
 8009440:	2300      	movs	r3, #0
 8009442:	76fb      	strb	r3, [r7, #27]
 8009444:	e00e      	b.n	8009464 <UART_SetConfig+0x254>
 8009446:	2302      	movs	r3, #2
 8009448:	76fb      	strb	r3, [r7, #27]
 800944a:	e00b      	b.n	8009464 <UART_SetConfig+0x254>
 800944c:	2304      	movs	r3, #4
 800944e:	76fb      	strb	r3, [r7, #27]
 8009450:	e008      	b.n	8009464 <UART_SetConfig+0x254>
 8009452:	2308      	movs	r3, #8
 8009454:	76fb      	strb	r3, [r7, #27]
 8009456:	e005      	b.n	8009464 <UART_SetConfig+0x254>
 8009458:	2310      	movs	r3, #16
 800945a:	76fb      	strb	r3, [r7, #27]
 800945c:	bf00      	nop
 800945e:	e001      	b.n	8009464 <UART_SetConfig+0x254>
 8009460:	2310      	movs	r3, #16
 8009462:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a28      	ldr	r2, [pc, #160]	; (800950c <UART_SetConfig+0x2fc>)
 800946a:	4293      	cmp	r3, r2
 800946c:	f040 80a1 	bne.w	80095b2 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009470:	7efb      	ldrb	r3, [r7, #27]
 8009472:	2b08      	cmp	r3, #8
 8009474:	d823      	bhi.n	80094be <UART_SetConfig+0x2ae>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <UART_SetConfig+0x26c>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	080094a1 	.word	0x080094a1
 8009480:	080094bf 	.word	0x080094bf
 8009484:	080094a9 	.word	0x080094a9
 8009488:	080094bf 	.word	0x080094bf
 800948c:	080094af 	.word	0x080094af
 8009490:	080094bf 	.word	0x080094bf
 8009494:	080094bf 	.word	0x080094bf
 8009498:	080094bf 	.word	0x080094bf
 800949c:	080094b7 	.word	0x080094b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094a0:	f7fd fe58 	bl	8007154 <HAL_RCC_GetPCLK1Freq>
 80094a4:	6178      	str	r0, [r7, #20]
        break;
 80094a6:	e00f      	b.n	80094c8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094a8:	4b1e      	ldr	r3, [pc, #120]	; (8009524 <UART_SetConfig+0x314>)
 80094aa:	617b      	str	r3, [r7, #20]
        break;
 80094ac:	e00c      	b.n	80094c8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ae:	f7fd fde3 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 80094b2:	6178      	str	r0, [r7, #20]
        break;
 80094b4:	e008      	b.n	80094c8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ba:	617b      	str	r3, [r7, #20]
        break;
 80094bc:	e004      	b.n	80094c8 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	76bb      	strb	r3, [r7, #26]
        break;
 80094c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 8130 	beq.w	8009730 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	4a14      	ldr	r2, [pc, #80]	; (8009528 <UART_SetConfig+0x318>)
 80094d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094da:	461a      	mov	r2, r3
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	4613      	mov	r3, r2
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	4413      	add	r3, r2
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d305      	bcc.n	8009500 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d915      	bls.n	800952c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	76bb      	strb	r3, [r7, #26]
 8009504:	e114      	b.n	8009730 <UART_SetConfig+0x520>
 8009506:	bf00      	nop
 8009508:	cfff69f3 	.word	0xcfff69f3
 800950c:	40008000 	.word	0x40008000
 8009510:	40013800 	.word	0x40013800
 8009514:	40021000 	.word	0x40021000
 8009518:	40004400 	.word	0x40004400
 800951c:	40004800 	.word	0x40004800
 8009520:	40004c00 	.word	0x40004c00
 8009524:	00f42400 	.word	0x00f42400
 8009528:	0800a1b4 	.word	0x0800a1b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	4618      	mov	r0, r3
 8009530:	f04f 0100 	mov.w	r1, #0
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	4a87      	ldr	r2, [pc, #540]	; (8009758 <UART_SetConfig+0x548>)
 800953a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800953e:	b29b      	uxth	r3, r3
 8009540:	f04f 0400 	mov.w	r4, #0
 8009544:	461a      	mov	r2, r3
 8009546:	4623      	mov	r3, r4
 8009548:	f7f6 fe66 	bl	8000218 <__aeabi_uldivmod>
 800954c:	4603      	mov	r3, r0
 800954e:	460c      	mov	r4, r1
 8009550:	4619      	mov	r1, r3
 8009552:	4622      	mov	r2, r4
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	f04f 0400 	mov.w	r4, #0
 800955c:	0214      	lsls	r4, r2, #8
 800955e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009562:	020b      	lsls	r3, r1, #8
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6852      	ldr	r2, [r2, #4]
 8009568:	0852      	lsrs	r2, r2, #1
 800956a:	4611      	mov	r1, r2
 800956c:	f04f 0200 	mov.w	r2, #0
 8009570:	eb13 0b01 	adds.w	fp, r3, r1
 8009574:	eb44 0c02 	adc.w	ip, r4, r2
 8009578:	4658      	mov	r0, fp
 800957a:	4661      	mov	r1, ip
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f04f 0400 	mov.w	r4, #0
 8009584:	461a      	mov	r2, r3
 8009586:	4623      	mov	r3, r4
 8009588:	f7f6 fe46 	bl	8000218 <__aeabi_uldivmod>
 800958c:	4603      	mov	r3, r0
 800958e:	460c      	mov	r4, r1
 8009590:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009598:	d308      	bcc.n	80095ac <UART_SetConfig+0x39c>
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095a0:	d204      	bcs.n	80095ac <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	60da      	str	r2, [r3, #12]
 80095aa:	e0c1      	b.n	8009730 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	76bb      	strb	r3, [r7, #26]
 80095b0:	e0be      	b.n	8009730 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ba:	d164      	bne.n	8009686 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80095bc:	7efb      	ldrb	r3, [r7, #27]
 80095be:	2b08      	cmp	r3, #8
 80095c0:	d827      	bhi.n	8009612 <UART_SetConfig+0x402>
 80095c2:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <UART_SetConfig+0x3b8>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	080095ed 	.word	0x080095ed
 80095cc:	080095f5 	.word	0x080095f5
 80095d0:	080095fd 	.word	0x080095fd
 80095d4:	08009613 	.word	0x08009613
 80095d8:	08009603 	.word	0x08009603
 80095dc:	08009613 	.word	0x08009613
 80095e0:	08009613 	.word	0x08009613
 80095e4:	08009613 	.word	0x08009613
 80095e8:	0800960b 	.word	0x0800960b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095ec:	f7fd fdb2 	bl	8007154 <HAL_RCC_GetPCLK1Freq>
 80095f0:	6178      	str	r0, [r7, #20]
        break;
 80095f2:	e013      	b.n	800961c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095f4:	f7fd fdc4 	bl	8007180 <HAL_RCC_GetPCLK2Freq>
 80095f8:	6178      	str	r0, [r7, #20]
        break;
 80095fa:	e00f      	b.n	800961c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095fc:	4b57      	ldr	r3, [pc, #348]	; (800975c <UART_SetConfig+0x54c>)
 80095fe:	617b      	str	r3, [r7, #20]
        break;
 8009600:	e00c      	b.n	800961c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009602:	f7fd fd39 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 8009606:	6178      	str	r0, [r7, #20]
        break;
 8009608:	e008      	b.n	800961c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800960a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800960e:	617b      	str	r3, [r7, #20]
        break;
 8009610:	e004      	b.n	800961c <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	76bb      	strb	r3, [r7, #26]
        break;
 800961a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 8086 	beq.w	8009730 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	4a4b      	ldr	r2, [pc, #300]	; (8009758 <UART_SetConfig+0x548>)
 800962a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800962e:	461a      	mov	r2, r3
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	fbb3 f3f2 	udiv	r3, r3, r2
 8009636:	005a      	lsls	r2, r3, #1
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	085b      	lsrs	r3, r3, #1
 800963e:	441a      	add	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	fbb2 f3f3 	udiv	r3, r2, r3
 8009648:	b29b      	uxth	r3, r3
 800964a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	2b0f      	cmp	r3, #15
 8009650:	d916      	bls.n	8009680 <UART_SetConfig+0x470>
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009658:	d212      	bcs.n	8009680 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f023 030f 	bic.w	r3, r3, #15
 8009662:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	085b      	lsrs	r3, r3, #1
 8009668:	b29b      	uxth	r3, r3
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	b29a      	uxth	r2, r3
 8009670:	89fb      	ldrh	r3, [r7, #14]
 8009672:	4313      	orrs	r3, r2
 8009674:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	89fa      	ldrh	r2, [r7, #14]
 800967c:	60da      	str	r2, [r3, #12]
 800967e:	e057      	b.n	8009730 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	76bb      	strb	r3, [r7, #26]
 8009684:	e054      	b.n	8009730 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009686:	7efb      	ldrb	r3, [r7, #27]
 8009688:	2b08      	cmp	r3, #8
 800968a:	d828      	bhi.n	80096de <UART_SetConfig+0x4ce>
 800968c:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <UART_SetConfig+0x484>)
 800968e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009692:	bf00      	nop
 8009694:	080096b9 	.word	0x080096b9
 8009698:	080096c1 	.word	0x080096c1
 800969c:	080096c9 	.word	0x080096c9
 80096a0:	080096df 	.word	0x080096df
 80096a4:	080096cf 	.word	0x080096cf
 80096a8:	080096df 	.word	0x080096df
 80096ac:	080096df 	.word	0x080096df
 80096b0:	080096df 	.word	0x080096df
 80096b4:	080096d7 	.word	0x080096d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096b8:	f7fd fd4c 	bl	8007154 <HAL_RCC_GetPCLK1Freq>
 80096bc:	6178      	str	r0, [r7, #20]
        break;
 80096be:	e013      	b.n	80096e8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096c0:	f7fd fd5e 	bl	8007180 <HAL_RCC_GetPCLK2Freq>
 80096c4:	6178      	str	r0, [r7, #20]
        break;
 80096c6:	e00f      	b.n	80096e8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096c8:	4b24      	ldr	r3, [pc, #144]	; (800975c <UART_SetConfig+0x54c>)
 80096ca:	617b      	str	r3, [r7, #20]
        break;
 80096cc:	e00c      	b.n	80096e8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096ce:	f7fd fcd3 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 80096d2:	6178      	str	r0, [r7, #20]
        break;
 80096d4:	e008      	b.n	80096e8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096da:	617b      	str	r3, [r7, #20]
        break;
 80096dc:	e004      	b.n	80096e8 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	76bb      	strb	r3, [r7, #26]
        break;
 80096e6:	bf00      	nop
    }

    if (pclk != 0U)
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d020      	beq.n	8009730 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	4a19      	ldr	r2, [pc, #100]	; (8009758 <UART_SetConfig+0x548>)
 80096f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096f8:	461a      	mov	r2, r3
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	441a      	add	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009710:	b29b      	uxth	r3, r3
 8009712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	2b0f      	cmp	r3, #15
 8009718:	d908      	bls.n	800972c <UART_SetConfig+0x51c>
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009720:	d204      	bcs.n	800972c <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	60da      	str	r2, [r3, #12]
 800972a:	e001      	b.n	8009730 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800974c:	7ebb      	ldrb	r3, [r7, #26]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3720      	adds	r7, #32
 8009752:	46bd      	mov	sp, r7
 8009754:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009758:	0800a1b4 	.word	0x0800a1b4
 800975c:	00f42400 	.word	0x00f42400

08009760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00a      	beq.n	800978a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00a      	beq.n	80097ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00a      	beq.n	80097ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	f003 0308 	and.w	r3, r3, #8
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f4:	f003 0310 	and.w	r3, r3, #16
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00a      	beq.n	8009812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009816:	f003 0320 	and.w	r3, r3, #32
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00a      	beq.n	8009834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01a      	beq.n	8009876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800985a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800985e:	d10a      	bne.n	8009876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	430a      	orrs	r2, r1
 8009896:	605a      	str	r2, [r3, #4]
  }
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098b4:	f7fa f8fc 	bl	8003ab0 <HAL_GetTick>
 80098b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0308 	and.w	r3, r3, #8
 80098c4:	2b08      	cmp	r3, #8
 80098c6:	d10e      	bne.n	80098e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f82c 	bl	8009934 <UART_WaitOnFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e022      	b.n	800992c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	d10e      	bne.n	8009912 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f816 	bl	8009934 <UART_WaitOnFlagUntilTimeout>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e00c      	b.n	800992c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2220      	movs	r2, #32
 800991e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	4613      	mov	r3, r2
 8009942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009944:	e062      	b.n	8009a0c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994c:	d05e      	beq.n	8009a0c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800994e:	f7fa f8af 	bl	8003ab0 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	429a      	cmp	r2, r3
 800995c:	d302      	bcc.n	8009964 <UART_WaitOnFlagUntilTimeout+0x30>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d11d      	bne.n	80099a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009972:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0201 	bic.w	r2, r2, #1
 8009982:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2220      	movs	r2, #32
 8009988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2220      	movs	r2, #32
 8009990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e045      	b.n	8009a2c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 0304 	and.w	r3, r3, #4
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d02e      	beq.n	8009a0c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099bc:	d126      	bne.n	8009a0c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80099d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	689a      	ldr	r2, [r3, #8]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f022 0201 	bic.w	r2, r2, #1
 80099e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2220      	movs	r2, #32
 80099f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e00f      	b.n	8009a2c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	69da      	ldr	r2, [r3, #28]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	4013      	ands	r3, r2
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	bf0c      	ite	eq
 8009a1c:	2301      	moveq	r3, #1
 8009a1e:	2300      	movne	r3, #0
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	461a      	mov	r2, r3
 8009a24:	79fb      	ldrb	r3, [r7, #7]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d08d      	beq.n	8009946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009a4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009a5a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	6812      	ldr	r2, [r2, #0]
 8009a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a96:	f023 0301 	bic.w	r3, r3, #1
 8009a9a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009aaa:	bf00      	nop
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b084      	sub	sp, #16
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0320 	and.w	r3, r3, #32
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d114      	bne.n	8009afc <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ae8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009af8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009afa:	e002      	b.n	8009b02 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7f9 fbc5 	bl	800328c <HAL_UART_TxCpltCallback>
}
 8009b02:	bf00      	nop
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b16:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f7ff fb5b 	bl	80091d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b1e:	bf00      	nop
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b32:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0320 	and.w	r3, r3, #32
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d11f      	bne.n	8009b82 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b58:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0201 	bic.w	r2, r2, #1
 8009b68:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b78:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f7ff fb30 	bl	80091e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b88:	bf00      	nop
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7ff fb2c 	bl	80091fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba4:	bf00      	nop
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bc0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bc8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd4:	2b80      	cmp	r3, #128	; 0x80
 8009bd6:	d109      	bne.n	8009bec <UART_DMAError+0x40>
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2b21      	cmp	r3, #33	; 0x21
 8009bdc:	d106      	bne.n	8009bec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009be6:	6978      	ldr	r0, [r7, #20]
 8009be8:	f7ff ff24 	bl	8009a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf6:	2b40      	cmp	r3, #64	; 0x40
 8009bf8:	d109      	bne.n	8009c0e <UART_DMAError+0x62>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b22      	cmp	r3, #34	; 0x22
 8009bfe:	d106      	bne.n	8009c0e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009c08:	6978      	ldr	r0, [r7, #20]
 8009c0a:	f7ff ff31 	bl	8009a70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c14:	f043 0210 	orr.w	r2, r3, #16
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c1e:	6978      	ldr	r0, [r7, #20]
 8009c20:	f7f9 f926 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c24:	bf00      	nop
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7f9 f910 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c50:	bf00      	nop
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c6e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7f9 fb04 	bl	800328c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d101      	bne.n	8009cde <HAL_UARTEx_DisableFifoMode+0x16>
 8009cda:	2302      	movs	r3, #2
 8009cdc:	e027      	b.n	8009d2e <HAL_UARTEx_DisableFifoMode+0x66>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2224      	movs	r2, #36	; 0x24
 8009cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f022 0201 	bic.w	r2, r2, #1
 8009d04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d101      	bne.n	8009d52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d4e:	2302      	movs	r3, #2
 8009d50:	e02d      	b.n	8009dae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2224      	movs	r2, #36	; 0x24
 8009d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f022 0201 	bic.w	r2, r2, #1
 8009d78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f850 	bl	8009e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e02d      	b.n	8009e2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2224      	movs	r2, #36	; 0x24
 8009dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0201 	bic.w	r2, r2, #1
 8009df4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f812 	bl	8009e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b089      	sub	sp, #36	; 0x24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009e3c:	4a2f      	ldr	r2, [pc, #188]	; (8009efc <UARTEx_SetNbDataToProcess+0xc8>)
 8009e3e:	f107 0314 	add.w	r3, r7, #20
 8009e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e46:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009e4a:	4a2d      	ldr	r2, [pc, #180]	; (8009f00 <UARTEx_SetNbDataToProcess+0xcc>)
 8009e4c:	f107 030c 	add.w	r3, r7, #12
 8009e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e54:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d108      	bne.n	8009e72 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e70:	e03d      	b.n	8009eee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e72:	2308      	movs	r3, #8
 8009e74:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e76:	2308      	movs	r3, #8
 8009e78:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	0e5b      	lsrs	r3, r3, #25
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0307 	and.w	r3, r3, #7
 8009e88:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	0f5b      	lsrs	r3, r3, #29
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 0307 	and.w	r3, r3, #7
 8009e98:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e9a:	7fbb      	ldrb	r3, [r7, #30]
 8009e9c:	7f3a      	ldrb	r2, [r7, #28]
 8009e9e:	f107 0120 	add.w	r1, r7, #32
 8009ea2:	440a      	add	r2, r1
 8009ea4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ea8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009eac:	7f3a      	ldrb	r2, [r7, #28]
 8009eae:	f107 0120 	add.w	r1, r7, #32
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ec4:	7ffb      	ldrb	r3, [r7, #31]
 8009ec6:	7f7a      	ldrb	r2, [r7, #29]
 8009ec8:	f107 0120 	add.w	r1, r7, #32
 8009ecc:	440a      	add	r2, r1
 8009ece:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ed6:	7f7a      	ldrb	r2, [r7, #29]
 8009ed8:	f107 0120 	add.w	r1, r7, #32
 8009edc:	440a      	add	r2, r1
 8009ede:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ee2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009eee:	bf00      	nop
 8009ef0:	3724      	adds	r7, #36	; 0x24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	08009f8c 	.word	0x08009f8c
 8009f00:	08009f94 	.word	0x08009f94

08009f04 <__libc_init_array>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	4e0d      	ldr	r6, [pc, #52]	; (8009f3c <__libc_init_array+0x38>)
 8009f08:	4c0d      	ldr	r4, [pc, #52]	; (8009f40 <__libc_init_array+0x3c>)
 8009f0a:	1ba4      	subs	r4, r4, r6
 8009f0c:	10a4      	asrs	r4, r4, #2
 8009f0e:	2500      	movs	r5, #0
 8009f10:	42a5      	cmp	r5, r4
 8009f12:	d109      	bne.n	8009f28 <__libc_init_array+0x24>
 8009f14:	4e0b      	ldr	r6, [pc, #44]	; (8009f44 <__libc_init_array+0x40>)
 8009f16:	4c0c      	ldr	r4, [pc, #48]	; (8009f48 <__libc_init_array+0x44>)
 8009f18:	f000 f82c 	bl	8009f74 <_init>
 8009f1c:	1ba4      	subs	r4, r4, r6
 8009f1e:	10a4      	asrs	r4, r4, #2
 8009f20:	2500      	movs	r5, #0
 8009f22:	42a5      	cmp	r5, r4
 8009f24:	d105      	bne.n	8009f32 <__libc_init_array+0x2e>
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f2c:	4798      	blx	r3
 8009f2e:	3501      	adds	r5, #1
 8009f30:	e7ee      	b.n	8009f10 <__libc_init_array+0xc>
 8009f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f36:	4798      	blx	r3
 8009f38:	3501      	adds	r5, #1
 8009f3a:	e7f2      	b.n	8009f22 <__libc_init_array+0x1e>
 8009f3c:	0800a1d4 	.word	0x0800a1d4
 8009f40:	0800a1d4 	.word	0x0800a1d4
 8009f44:	0800a1d4 	.word	0x0800a1d4
 8009f48:	0800a1d8 	.word	0x0800a1d8

08009f4c <memcpy>:
 8009f4c:	b510      	push	{r4, lr}
 8009f4e:	1e43      	subs	r3, r0, #1
 8009f50:	440a      	add	r2, r1
 8009f52:	4291      	cmp	r1, r2
 8009f54:	d100      	bne.n	8009f58 <memcpy+0xc>
 8009f56:	bd10      	pop	{r4, pc}
 8009f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f60:	e7f7      	b.n	8009f52 <memcpy+0x6>

08009f62 <memset>:
 8009f62:	4402      	add	r2, r0
 8009f64:	4603      	mov	r3, r0
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d100      	bne.n	8009f6c <memset+0xa>
 8009f6a:	4770      	bx	lr
 8009f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8009f70:	e7f9      	b.n	8009f66 <memset+0x4>
	...

08009f74 <_init>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	bf00      	nop
 8009f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7a:	bc08      	pop	{r3}
 8009f7c:	469e      	mov	lr, r3
 8009f7e:	4770      	bx	lr

08009f80 <_fini>:
 8009f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f82:	bf00      	nop
 8009f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f86:	bc08      	pop	{r3}
 8009f88:	469e      	mov	lr, r3
 8009f8a:	4770      	bx	lr
